<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EO.Pdf</name>
  </assembly>
  <members>
    <member name="T:EO.Pdf.Acm.AcmBold">
      <summary>
        <see cref="T:EO.Pdf.Acm.AcmBold">
        </see> automatically applies bold font
            style for all enclosed contents.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmBold.#ctor(EO.Pdf.Acm.AcmContent[])">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Acm.AcmBold"></see> class.
            </summary>
      <param name="children">A list of <see cref="T:EO.Pdf.Acm.AcmContent"></see> objects to be added as children of this <see cref="T:EO.Pdf.Acm.AcmBold"></see>.</param>
    </member>
    <member name="T:EO.Pdf.Acm.AcmField">
      <summary>
            The base class for all ACM input field types.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmField.Name">
      <summary>
            Gets or sets the field name.
            </summary>
      <remarks>
            Each input field should have a unique name. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmField.Value">
      <summary>
            Gets or sets the field value.
            </summary>
      <remarks>
            See <see cref="P:EO.Pdf.PdfField.Value">PdfField.Value</see> for more details.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmField.ReadOnly">
      <summary>
            Gets or sets whether the field is readonly.
            </summary>
      <remarks>
            See <see cref="P:EO.Pdf.PdfField.ReadOnly">PdfField.ReadOnly</see> for more details.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Acm.AcmTextBox">
      <summary>
            Represents a text input box.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmTextBox.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmTextBox"></see> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTextBox.Mode">
      <summary>
            Gets or sets the text field type.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTextBox.Text">
      <summary>
            Gets or sets the textbox text.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmListField">
      <summary>
            Base class for <see cref="T:EO.Pdf.Acm.AcmListBox" /> and <see cref="T:EO.Pdf.Acm.AcmComboBox" />.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmListField.Items">
      <summary>
            Gets the collection that contains all <see cref="T:EO.Pdf.PdfListItem"></see> objects.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmListField.SelectedIndex">
      <summary>
            Gets or sets the selected item index.
            </summary>
      <remarks>
            Use -1 to clear the selected item.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Acm.AcmListBox">
      <summary>
            Represents a list box.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmListBox.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmListBox"></see> class.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmComboBox">
      <summary>
            Represents a combobox.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmComboBox.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmComboBox"></see> class.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmCheckBox">
      <summary>
            Represents a checkbox.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmCheckBox.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmCheckBox"></see> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmCheckBox.Checked">
      <summary>
            Gets or sets a value indicating whether the checkbox is checked.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmRadioButton">
      <summary>
            Represents a radio button.
            </summary>
      <remarks>
            Set multiple <see cref="T:EO.Pdf.Acm.AcmRadioButton" />'s <see cref="P:EO.Pdf.Acm.AcmField.Name" /> property to the same
            value to group them into a radio button group.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmRadioButton.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:EO.Pdf.Acm.AcmRadioButton" /> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmRadioButton.Group">
      <summary>
            Gets the parent <see cref="T:EO.Pdf.PdfRadioButtonGroup" /> in which this radio button belongs.
            </summary>
      <remarks>
            When an <see cref="T:EO.Pdf.Acm.AcmRadioButton" /> is rendered, a parent <see cref="T:EO.Pdf.PdfRadioButtonGroup" /> object
            is automatically created to group all <see cref="T:EO.Pdf.Acm.AcmRadioButton" /> with the same name together.
            Use this property to access this parent <see cref="T:EO.Pdf.PdfRadioButtonGroup" /> object. You can use 
            <see cref="P:EO.Pdf.PdfListField.SelectedIndex">PdfRadioButtonGroup.SelectedIndex</see> property to
            set the selected radio button.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Acm.AcmItalic">
      <summary>
        <see cref="T:EO.Pdf.Acm.AcmItalic">
        </see> automatically applies italic font
            style for all enclosed contents.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmItalic.#ctor(EO.Pdf.Acm.AcmContent[])">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Acm.AcmItalic"></see> class.
            </summary>
      <param name="children">A list of <see cref="T:EO.Pdf.Acm.AcmContent"></see> objects to be added as children of this <see cref="T:EO.Pdf.Acm.AcmItalic"></see>.</param>
    </member>
    <member name="T:EO.Pdf.Acm.AcmLink">
      <summary>
            Represents a link.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmLink.#ctor(EO.Pdf.Acm.AcmContent[])">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Acm.AcmLink"></see> class.
            </summary>
      <param name="children">A list of <see cref="T:EO.Pdf.Acm.AcmContent"></see> objects to be added as children of this <see cref="T:EO.Pdf.Acm.AcmLink"></see>.</param>
    </member>
    <member name="P:EO.Pdf.Acm.AcmLink.TargetContent">
      <summary>
            Gets or sets the target content to be displayed when 
            user clicks this link.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmLink.TargetUri">
      <summary>
            Gets or sets the target URI to be opened when user
            clicks this link.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmLink.TargetFile">
      <summary>
            Gets or sets the target file to be opened when user
            clicks this link.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmLink.UseNewWindow">
      <summary>
            Gets or sets a value indicating whether a new
            window should be opened every time an URI or file
            is opened.
            </summary>
      <remarks>
            This property is ignored on non-Windows systems.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Acm.AcmBlock">
      <summary>
        <see cref="T:EO.Pdf.Acm.AcmBlock">
        </see> is the base class of all block 
            contents. 
            </summary>
      <remarks>
            A block contents is a content that takes all available width 
            of the container, thus pushes all following contents below the     
            block content. See more about <a href="Pdf/Acm/Advanced Formatting/block_model.html">block</a> here.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmBlock.#ctor(EO.Pdf.Acm.AcmContent[])">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Acm.AcmBlock"></see> class.
            </summary>
      <param name="children">A list of <see cref="T:EO.Pdf.Acm.AcmContent"></see> objects to be added as children of this <see cref="T:EO.Pdf.Acm.AcmBlock"></see>.</param>
    </member>
    <member name="T:EO.Pdf.Acm.AcmInlineBlock">
      <summary>
            Represents an inline content with fixed width and height.
            </summary>
      <remarks>
            An <see cref="T:EO.Pdf.Acm.AcmInlineBlock"></see> represents a "block like"
            element on an output line, such as an image or a textbox. However
            it is not a block element (does not derived from 
            <see cref="T:EO.Pdf.Acm.AcmBlock"></see>) and does not immediately 
            end the current line.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Acm.AcmLineStyle">
      <summary>
            Specifies border or table grid line style.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmLineStyle.None">
      <summary>
            No line at all.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmLineStyle.Dotted">
      <summary>
            Dotted line.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmLineStyle.Dashed">
      <summary>
            Dash line.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmLineStyle.Solid">
      <summary>
            Solid line.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmLineInfo">
      <summary>
            Specifies border or table grid line style, color and width.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmLineInfo.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmLineInfo"></see> class uninitialized.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmLineInfo.#ctor(EO.Pdf.Acm.AcmLineStyle,System.Drawing.Color,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmLineInfo"></see> class with
            the provided style, color and width.
            </summary>
      <param name="style">The line style.</param>
      <param name="color">The line color.</param>
      <param name="width">The line width in inches.</param>
    </member>
    <member name="M:EO.Pdf.Acm.AcmLineInfo.#ctor(System.Drawing.Color,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmLineInfo"></see> class
            with the provided color and width.
            </summary>
      <param name="color">The line color.</param>
      <param name="width">The line width in inches.</param>
      <remarks>
            This constructor creates a solid line with the specified
            color and width.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmLineInfo.#ctor(System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmLineInfo"></see> class
            with the provided width.
            </summary>
      <param name="width">The line width in inches.</param>
      <remarks>
            This constructor creates a solid black line with the specified
            width.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmLineInfo.Style">
      <summary>
            Gets the line style.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmLineInfo.Color">
      <summary>
            Gets the line color.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmLineInfo.Width">
      <summary>
            Gets the line width in inches.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmBorder">
      <summary>
            Contains border information.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmBorder.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmBorder"></see> class.
            </summary>
      <remarks>
            This constructor creates the new instance uninitialized.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmBorder.#ctor(EO.Pdf.Acm.AcmLineInfo,EO.Pdf.Acm.AcmLineInfo,EO.Pdf.Acm.AcmLineInfo,EO.Pdf.Acm.AcmLineInfo)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmBorder"></see> class
            using the provided line information.
            </summary>
      <param name="left">The left border information.</param>
      <param name="top">The top border information.</param>
      <param name="right">The right border information.</param>
      <param name="bottom">The bottom border information.</param>
    </member>
    <member name="M:EO.Pdf.Acm.AcmBorder.#ctor(EO.Pdf.Acm.AcmLineInfo)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmBorder"></see> class
            using the same line information on all sides.
            </summary>
      <param name="all">Border information on all sides.</param>
      <remarks>
            This constructor creates an <see cref="T:EO.Pdf.Acm.AcmBorder"></see> object
            with all four sides using the same <see cref="T:EO.Pdf.Acm.AcmLineInfo"></see>.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmBorder.#ctor(System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmBorder"></see> class
            using solid black lines with the specific width on all sides.
            </summary>
      <param name="width">Border width in inches.</param>
      <remarks>
            This constructor creates an <see cref="T:EO.Pdf.Acm.AcmBorder"></see> object,
            using solid black line with the specified width on all four sides.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmBorder.#ctor(System.Drawing.Color,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmBorder"></see> class
            with solid lines on all sides with the specific color and width.
            </summary>
      <param name="color">Border color.</param>
      <param name="width">Border with in inches.</param>
      <remarks>
            This constructor creates an <see cref="T:EO.Pdf.Acm.AcmBorder"></see> object,
            using solid line with the specified color and width on all four sides.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmBorder.Left">
      <summary>
            Gets or sets the left side line information.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmBorder.Top">
      <summary>
            Gets or sets the top side line information.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmBorder.Right">
      <summary>
            Gets or sets the right side line information.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmBorder.Bottom">
      <summary>
            Gets or sets the bottom side line information.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmBorder.IsNone">
      <summary>
            Gets a value indicating whether all four side's
            line styles are <see cref="T:EO.Pdf.Acm.AcmLineStyle">None,</see>
            thus no border at all.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmBorder.IsEmpty">
      <summary>
            Gets whether this <see cref="T:EO.Pdf.Acm.AcmBorder"></see> object
            is uninitialized.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmImage">
      <summary>
            Represents an image.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmImage.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmImage"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmImage.#ctor(System.Drawing.Image,System.Boolean)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmImage"></see> class using
            the provided <see cref="T:System.Drawing.Image"> object.</see>.
            </summary>
      <param name="image">
            An <see cref="T:System.Drawing.Image">System.Drawing.Image</see> object
            used to initialize this image.
            </param>
      <param name="keepImage">
        <b>true</b> to keep a reference to <i>image</i>.
            When this argument is set to <b>false</b>, <see cref="P:EO.Pdf.Acm.AcmImage.Image"></see>
            returns <b>null</b>.
            </param>
    </member>
    <member name="M:EO.Pdf.Acm.AcmImage.#ctor(System.Drawing.Image)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmImage"></see> class using
            the provided <see cref="T:System.Drawing.Image"> object.</see>.
            </summary>
      <param name="image">
            An <see cref="T:System.Drawing.Image">System.Drawing.Image</see> object
            used to initialize this image.
            </param>
      <remarks>
            This constructor calls <see cref="M:EO.Pdf.Acm.AcmImage.#ctor(System.Drawing.Image,System.Boolean)"></see>
            with <i>keepImage</i> set to <b>true</b>.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmImage.Image">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Image">System.Drawing.Image</see>
            associated to this image.
            </summary>
      <remarks>
            If the <see cref="T:System.Drawing.Image">System.Drawing.Image</see> object
            was loaded from a <see cref="T:System.IO.Stream">System.IO.Stream</see>,
            then the stream object must not be closed while setting this property.
            Once the image is assigned to the <see cref="P:EO.Pdf.Acm.AcmImage.Image"></see> property, the
            original stream may close.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmImage.ScaleX">
      <summary>
            Gets or sets the horizontal scale factor.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmImage.ScaleY">
      <summary>
            Gets or sets the vertical scale factor.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmPageBreak">
      <summary>
        <see cref="T:EO.Pdf.Acm.AcmPageBreak">
        </see> adds a hard page break
            in the document.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmLineBreak">
      <summary>
        <see cref="T:EO.Pdf.Acm.AcmLineBreak">
        </see> adds a hard line break
            in the document.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmParagraph">
      <summary>
            Represents a block element that automatically applies
            <see cref="P:EO.Pdf.Acm.AcmStyle.ParagraphSpacing"></see>.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmParagraph.#ctor(EO.Pdf.Acm.AcmContent[])">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Acm.AcmParagraph"></see> class.
            </summary>
      <param name="children">A list of <see cref="T:EO.Pdf.Acm.AcmContent"></see> objects to be added as children of this <see cref="T:EO.Pdf.Acm.AcmParagraph"></see>.</param>
    </member>
    <member name="T:EO.Pdf.Acm.AcmUnit">
      <summary>
             Utility class to convert a base unit (1/72 inch, often
             the same as a point) to inches.
             </summary>
      <remarks>
             All measurements in EO.Pdf.Acm namespace are specified
             in inches. Use this class to convert value in points 
             (1/72 inch) to their corresponding inch value. For example
             <code lang="C#">
             //Create a new AcmBlock object
             AcmBlock block = new AcmBlock();
            
             //The following code set the block width to one inch
             block.Style.Width = new AcmUnit(72);
            
             //The following code also set the block width to one inch
             block.Style.Width = 1;
             </code><code lang="VB">
             'Create a new AcmBlock object
             Dim block As New AcmBlock()
             
             'The following code set the block width to one inch
             block.Style.Width = New AcmUnit(72)
             
             'The following code also set the block width to one inch
             block.Style.Width = 1
             </code></remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmUnit.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmUnit"></see> class.
            </summary>
      <param name="unit">Number of units.</param>
    </member>
    <member name="M:EO.Pdf.Acm.AcmUnit.op_Implicit(EO.Pdf.Acm.AcmUnit)~System.Single">
      <summary>
            Convert an <see cref="T:EO.Pdf.Acm.AcmUnit"></see> object to the corresponding
            float value in inches.
            </summary>
      <param name="unit">An <see cref="T:EO.Pdf.Acm.AcmUnit"></see> object.</param>
      <returns>
            Returns the corresponding float value in inches.
            </returns>
    </member>
    <member name="T:EO.Pdf.Acm.AcmContent">
      <summary>
            Represents an ACM (Abstract Content Model) content.
            </summary>
      <remarks>
        <see cref="T:EO.Pdf.Acm.AcmContent">
        </see> is the base class of all
            contents type that can be rendered by ACM. To use ACM,
            you must build a <a href="Pdf/Acm/Getting Started/contents.html">content tree</a>
            first, and then render it with an <see cref="T:EO.Pdf.Acm.AcmRender"></see> object.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmContent.#ctor(EO.Pdf.Acm.AcmContent[])">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Acm.AcmContent"></see> class.
            </summary>
      <param name="children">A list of <see cref="T:EO.Pdf.Acm.AcmContent"></see> objects to be added as children of this <see cref="T:EO.Pdf.Acm.AcmBlock"></see>.</param>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.Style">
      <summary>
            Gets the <see cref="T:EO.Pdf.Acm.AcmStyle"></see> object associated to
            this <see cref="T:EO.Pdf.Acm.AcmContent"></see> object.
            </summary>
      <remarks>
            Set properties on the returned <see cref="T:EO.Pdf.Acm.AcmStyle"></see>
            object to customize the appearance of this content.
            See <a href="Pdf/Acm/Getting Started/style.html">content styles</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.StyleName">
      <summary>
            Gets or sets the style name.
            </summary>
      <remarks>
        <see cref="P:EO.Pdf.Acm.AcmContent.StyleName">
        </see> can be used to select a style
            from the current <see cref="T:EO.Pdf.Acm.AcmStyleSheet">StyleSheet</see>.
            See <a href="Pdf/Acm/Advanced Formatting/advance_style.html">Style &amp; Stylesheet</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.StyleSheet">
      <summary>
            Gets or sets the style sheet.
            </summary>
      <remarks>
            Set this property to provide a style sheet for this content
            and all child contents. This property works together with
            <see cref="P:EO.Pdf.Acm.AcmContent.StyleName"></see> to automatically apply a style
            on the content.
            See <a href="Pdf/Acm/Advanced Formatting/advance_style.html">Style &amp; Stylesheet</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.Parent">
      <summary>
            Gets the parent <see cref="T:EO.Pdf.Acm.AcmContent"></see> object.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.Children">
      <summary>
            Gets the children collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.PrevSibling">
      <summary>
            Gets the previous sibling <see cref="T:EO.Pdf.Acm.AcmContent"></see> object.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.NextSibling">
      <summary>
            Gets the next sibling <see cref="T:EO.Pdf.Acm.AcmContent"></see> object.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.Tag">
      <summary>
            Gets or sets the object that contains data about the content.
            </summary>
      <remarks>
            Any type derived from the <see cref="T:System.Object"></see> class can be 
            assigned to this property. A common use for the <see cref="P:EO.Pdf.Acm.AcmContent.Tag"></see> 
            property is to store context information that is closely associated 
            with the content. For example, you can store the current chapter
            information (such as chapter number and name) in the
            <see cref="P:EO.Pdf.Acm.AcmContent.Tag"></see> property, and then later use this information
            to render page header and footer. See <a href="Pdf/Acm/Advanced Formatting/page_header.html#tag">here</a>
            for an example on how to use this property.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.IsBlock">
      <summary>
            Returns a value indicating whether this content is a block content.
            </summary>
      <remarks>
            A <i>block content</i> is an <see cref="T:EO.Pdf.Acm.AcmContent"></see> object
            that derives from <see cref="T:EO.Pdf.Acm.AcmBlock"></see>. <i>Block content</i>
            and <i>inline content</i> are treated very differently by the
            layout engine. See <a href="Pdf/Acm/Advanced Formatting/block_model.html">block model</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.IsInline">
      <summary>
            Returns a value indicating whether this content is an inline content.
            </summary>
      <remarks>
            Any <see cref="T:EO.Pdf.Acm.AcmContent"></see> that is not a <i>block content</i>
            is an <i>inline content</i>. <i>Block content</i>
            and <i>inline content</i> are treated very differently by the
            layout engine. See <a href="Pdf/Acm/Advanced Formatting/block_model.html">block model</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.Block">
      <summary>
            Gets the nearest block parent starting from this content.
            </summary>
      <remarks>
            This property returns the content itself if the
            content is a block content.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmContent.BlockParent">
      <summary>
            Gets the nearest block parent, starting from the parent content.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmContent.SetProperty(System.String,System.Object)">
      <summary>
            Sets a property value.
            </summary>
      <param name="propName">
        <para>
            The name of the property.
            </para>
        <para>
          <i>propName</i> can be a single name, for example, "Tag"; 
            or multiple names separated by ".", for example, "Style.BackgroundColor". 
            The first case is functionally equivalent to
            <code lang="C#">
            //This line is the same as content.SetProperty("Tag", value);
            content.Tag = value;
            </code><code lang="VB">
            'This line is the same as content.SetProperty("Tag", value)
            content.Tag = value
            </code>
            The second case is
            functionally equivalent to 
            <code lang="C#">
            //This line is the same as content.SetProperty("Style.BackgroundColor", value);
            content.Style.BackgroundColor = value;
            </code><code lang="VB">
            'This line is the same as content.SetProperty("Style.BackgroundColor", value)
            content.Style.BackgroundColor = value
            </code></para>
      </param>
      <param name="value">The value of the property.</param>
      <returns>Returns this <see cref="T:EO.Pdf.Acm.AcmContent"></see> itself.</returns>
      <remarks>
        <para>
            Because this method returns the content object itself,
            it allows you to initialize a complex
            <a href="Pdf/Acm/Getting Started/contents.html">content tree</a> with
            a single statement. For example:
            </para>
        <code lang="C#">
            //Setting both background color and foreground color in
            //a single statement
            new AcmText("some text")
                .SetProperty("Style.BackgroundColor", Color.Red)
                .SetProperty("Style.ForegroundColor", Color.Blue);
            </code>
        <code lang="VB">
            'Setting both background color and foreground color in
            'a single statement
            New AcmText("some text") _
               .SetProperty("Style.BackgroundColor", Color.Red) _
               .SetProperty("Style.ForegroundColor", Color.Blue)
            </code>
      </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmContent.CreateDestination">
      <summary>
            Creates a <see cref="T:EO.Pdf.PdfDestination"></see> object that
            points to this content.
            </summary>
      <remarks>
            This method is usually used to <a href="Pdf/Acm/Interactive/bookmark.html">create bookmarks</a>.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Acm.AcmContentCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.Acm.AcmContent"></see> object.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmColumn">
      <summary>
        <see cref="T:EO.Pdf.Acm.AcmColumn">
        </see> defines a column on an output page.
            </summary>
      <remarks>
            Use this class together with <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see>
            to define multiple output columns on a single page.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmColumn.#ctor(System.Single,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmColumn"></see> class.
            </summary>
      <param name="position">The left position of the column in inches.</param>
      <param name="width">The width of the column in inches.</param>
    </member>
    <member name="P:EO.Pdf.Acm.AcmColumn.Position">
      <summary>
            The left position of the column in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmColumn.Width">
      <summary>
            The width of the column in inches.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmColumn.Clone">
      <summary>
            Creates a clone of the <see cref="T:EO.Pdf.Acm.AcmColumn"></see> object.
            </summary>
      <returns>
            The cloned copy.
            </returns>
    </member>
    <member name="T:EO.Pdf.Acm.AcmPageLayout">
      <summary>
        <see cref="T:EO.Pdf.Acm.AcmPageLayout">
        </see> defines page margins and columns.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPageLayout.#ctor(EO.Pdf.Acm.AcmPadding,EO.Pdf.Acm.AcmColumn[])">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see> 
            class with the provided margins and column list.
            </summary>
      <param name="margins">
            An <see cref="T:EO.Pdf.Acm.AcmPadding"></see> object that specifies the page
            margins in inches.
            </param>
      <param name="columns">
            An optional <see cref="T:EO.Pdf.Acm.AcmColumn"></see> list that defines
            multiple output columns on the page. If none is specified,
            the whole page is used a single column.
            </param>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPageLayout.#ctor(EO.Pdf.Acm.AcmPadding)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see> 
            class with the provided margins.
            </summary>
      <param name="margins">
            An <see cref="T:EO.Pdf.Acm.AcmPadding"></see> object that specifies the page
            margins in inches.
            </param>
      <remarks>
            This constructor initializes the page with a single column.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPageLayout.#ctor(System.Drawing.SizeF,EO.Pdf.Acm.AcmPadding,EO.Pdf.Acm.AcmColumn[])">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see> 
            class with the provided page size, margins and column list.
            </summary>
      <param name="pageSize">Page size.</param>
      <param name="margins">Page margins.</param>
      <param name="columns">
            An optional <see cref="T:EO.Pdf.Acm.AcmColumn"></see> list that defines
            multiple output columns on the page. If none is specified,
            the whole page is used a single column.
            </param>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPageLayout.#ctor(System.Drawing.SizeF)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see> 
            class with the provided page size.
            </summary>
      <param name="pageSize">The page size.</param>
      <remarks>
            This constructor creates an <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see> object
            with the given size, default paddings and a single column.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPageLayout.Margin">
      <summary>
            Gets the page margins.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPageLayout.PageSize">
      <summary>
            Gets the page size.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPageLayout.Columns">
      <summary>
            Gets the page columns list.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmRender">
      <summary>
            An object that renders an <see cref="T:EO.Pdf.Acm.AcmContent"></see> tree.
            </summary>
      <remarks>
            See <a href="Pdf/Acm/Getting Started/contents.html">here</a> for more
            details on how to use this class.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Acm.AcmRender.#ctor(EO.Pdf.PdfDocument,EO.Pdf.Acm.AcmPageLayout[])">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmRender"></see> class.
            </summary>
      <param name="doc">The <see cref="T:EO.Pdf.PdfDocument"></see> object to which output is rendered.</param>
      <param name="pageLayouts">
            An optional list of <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see> object that
            specifies the page layouts. The first <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see>
            object is applied to the first page, the second <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see>
            object is applied to the second page, and so on. The last 
            <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see> object is being used by all
            remaining pages.
            </param>
    </member>
    <member name="M:EO.Pdf.Acm.AcmRender.#ctor(EO.Pdf.PdfPage,System.Single,EO.Pdf.Acm.AcmPageLayout[])">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmRender"></see> class.
            </summary>
      <param name="startPage">
            The first page where rendering should begin.
            </param>
      <param name="startPosition">
            The top position of <i>startPage</i> where rendering should begin.
            </param>
      <param name="pageLayouts">
            An optional list of <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see> object that
            specifies the page layouts. The first <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see>
            object is applied to the first page, the second <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see>
            object is applied to the second page, and so on. The last 
            <see cref="T:EO.Pdf.Acm.AcmPageLayout"></see> object is being used by all
            remaining pages.
            </param>
      <remarks>
            This constructor allows you to start rendering from the middle
            of the specific page.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmRender.Document">
      <summary>
            Gets the associated <see cref="T:EO.Pdf.PdfDocument"></see> object.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmRender.SetDefPageSize(System.Drawing.SizeF)">
      <summary>
            Sets the default page size.
            </summary>
      <param name="size">The default page size in inches.</param>
    </member>
    <member name="E:EO.Pdf.Acm.AcmRender.BeforeRenderPage">
      <summary>
            Occurs before the <see cref="T:EO.Pdf.Acm.AcmRender"></see> generates
            output on a page.
            </summary>
    </member>
    <member name="E:EO.Pdf.Acm.AcmRender.AfterRenderPage">
      <summary>
            Occurs after the <see cref="T:EO.Pdf.Acm.AcmRender"></see> generates
            output on a page.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmRender.Render(EO.Pdf.Acm.AcmContent[])">
      <summary>
            Renders a list of <see cref="T:EO.Pdf.Acm.AcmContent"></see> object.
            </summary>
      <param name="contents">
            The list of <see cref="T:EO.Pdf.Acm.AcmContent"></see> object to render.
            </param>
    </member>
    <member name="T:EO.Pdf.Acm.AcmPageEventArgs">
      <summary>
            Provides data for <see cref="E:EO.Pdf.Acm.AcmRender.BeforeRenderPage"></see>
            and <see cref="E:EO.Pdf.Acm.AcmRender.AfterRenderPage"></see> event.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPageEventArgs.Page">
      <summary>
            Gets the current page.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPageEventArgs.FirstPageContent">
      <summary>
            Gets the first leaf <see cref="T:EO.Pdf.Acm.AcmContent"></see> object 
            on the page.
            </summary>
      <remarks>
        <para>
            Note that this property returns the first <b>leaf</b>
            content on the page. For example, if the page starts
            with an <see cref="T:EO.Pdf.Acm.AcmParagraph"></see> object that contains
            an <see cref="T:EO.Pdf.Acm.AcmText"></see> object, then the first leaf
            content object is the <see cref="T:EO.Pdf.Acm.AcmText"></see> object,
            not the <see cref="T:EO.Pdf.Acm.AcmParagraph"></see> object.
            </para>
        <para>
            This property returns the first <b>leaf</b> content on
            the page regardless whether the content spans into another
            page or not. For example, an <see cref="T:EO.Pdf.Acm.AcmText"></see>
            object may flow from the first page to the second page.
            In that case the <see cref="T:EO.Pdf.Acm.AcmText"></see> object is
            both the <see cref="P:EO.Pdf.Acm.AcmPageEventArgs.LastPageContent"></see> of the
            first page and the <see cref="P:EO.Pdf.Acm.AcmPageEventArgs.FirstPageContent"></see>
            of the second page.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPageEventArgs.LastPageContent">
      <summary>
            Gets the last leaf <see cref="T:EO.Pdf.Acm.AcmContent"></see> object 
            on the page.
            </summary>
      <remarks>
        <para>
            This property returns the last <b>leaf</b>
            content on the page. See <see cref="P:EO.Pdf.Acm.AcmPageEventArgs.FirstPageContent"></see>
            for more details.
            </para>
      </remarks>
    </member>
    <member name="T:EO.Pdf.Acm.AcmPageEventHandler">
      <summary>
            Represents the method that will handle <see cref="E:EO.Pdf.Acm.AcmRender.BeforeRenderPage"></see>
            and <see cref="E:EO.Pdf.Acm.AcmRender.AfterRenderPage"></see> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:EO.Pdf.Acm.AcmPageEventArgs"></see> that contains the event data.</param>
    </member>
    <member name="T:EO.Pdf.Acm.AcmHorizontalAlign">
      <summary>
            Specifies the horizontal alignment of items within a block.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmHorizontalAlign.Left">
      <summary>
            Aligns to the left.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmHorizontalAlign.Center">
      <summary>
            Aligns to the center.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmHorizontalAlign.Right">
      <summary>
            Aligns to the right.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmVerticalAlign">
      <summary>
            Specifies the vertical alignment of items within a block.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmVerticalAlign.Top">
      <summary>
            Aligns to the top.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmVerticalAlign.Middle">
      <summary>
            Aligns to the middle.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmVerticalAlign.Bottom">
      <summary>
            Aligns to the bottom.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmPadding">
      <summary>
            Represents padding information.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPadding.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmPadding"></see> object.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPadding.#ctor(System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmPadding"></see> object
            with the same padding value on all sides.
            </summary>
      <param name="all">Padding width on all sides in inches.</param>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPadding.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmPadding"></see> object
            with the provided padding values.
            </summary>
      <param name="left">Left padding in inches.</param>
      <param name="top">Top padding in inches.</param>
      <param name="right">Right padding in inches.</param>
      <param name="bottom">Bottom padding in inches.</param>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPadding.Left">
      <summary>
            Gets or sets the left padding in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPadding.Top">
      <summary>
            Gets or sets the top padding in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPadding.Right">
      <summary>
            Gets or sets the right padding in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPadding.Bottom">
      <summary>
            Gets or sets the bottom padding in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPadding.All">
      <summary>
            Gets or sets the padding value for all sides in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPadding.Horizontal">
      <summary>
            Gets the total left and right padding value.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPadding.Vertical">
      <summary>
            Gets the total top and bottom padding value.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPadding.op_Addition(EO.Pdf.Acm.AcmPadding,EO.Pdf.Acm.AcmPadding)">
      <summary>
            Adds two <see cref="T:EO.Pdf.Acm.AcmPadding"></see> objects.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPadding.op_Subtraction(EO.Pdf.Acm.AcmPadding,EO.Pdf.Acm.AcmPadding)">
      <summary>
            Subtracts two <see cref="T:EO.Pdf.Acm.AcmPadding"></see> objects.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPadding.op_Multiply(EO.Pdf.Acm.AcmPadding,System.Single)">
      <summary>
            Multiplies an <see cref="T:EO.Pdf.Acm.AcmPadding"></see> object with 
            a scale factor.
            </summary>
      <param name="x">The <see cref="T:EO.Pdf.Acm.AcmPadding"></see> object.</param>
      <param name="factor">The scale factor.</param>
    </member>
    <member name="P:EO.Pdf.Acm.AcmPadding.IsEmpty">
      <summary>
            Returns a value indicating whether this <see cref="T:EO.Pdf.Acm.AcmPadding"></see>
            object is initialized.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmPadding.Clone">
      <summary>
            Creates a new <see cref="T:EO.Pdf.Acm.AcmPadding"></see> object that 
            is a copy of the current instance.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmDisplay">
      <summary>
            Represents how a content is displayed.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmDisplay.None">
      <summary>
            The content is not displayed at all.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmDisplay.Hidden">
      <summary>
            The space for the content is reserved, but the content is not displayed.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmDisplay.Visible">
      <summary>
            The content is displayed.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmStyle">
      <summary>
            Organizes style characteristics of an <see cref="T:EO.Pdf.Acm.AcmContent"></see>.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmStyle.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmStyle"></see> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.Name">
      <summary>
            The name of the style.
            </summary>
      <remarks>
            A style must have a name in order to be added into an 
            <see cref="T:EO.Pdf.Acm.AcmStyleSheet"></see>. An <see cref="T:EO.Pdf.Acm.AcmContent"></see>
            can reference a style in its own or its parent content's
            <see cref="P:EO.Pdf.Acm.AcmContent.StyleSheet"></see> by setting its
            <see cref="P:EO.Pdf.Acm.AcmContent.StyleName"></see> property.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.FontName">
      <summary>
            Gets or sets the font name.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.FontSize">
      <summary>
            Get or set the font size in points. A point is 1/72 inch.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.FontStyle">
      <summary>
            Get or set the font style such as bold and italic. 
            </summary>
      <remarks>
        <b>Underline</b> and <b>Strikeout</b> font style are not
            directly supported at this time. Both effects can be achieved 
            using <see cref="P:EO.Pdf.Acm.AcmStyle.Border"></see> (possibly together with
            <see cref="P:EO.Pdf.Acm.AcmStyle.OffsetY"></see>).
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.Border">
      <summary>
            Get or set the border information. Use this property to draw lines on one or more sides of the contents. 
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.Margin">
      <summary>
            Get or set the margin values. Margin defines the extra space reserved outside of a content's border.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.Padding">
      <summary>
            Get or set the padding values. Padding defines the extra space reserved inside a content's border around its child content. 
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.Left">
      <summary>
            Gets or sets the distance between a block content's left 
            edge and the left edge of its containing block's client area. 
            </summary>
      <remarks>
            Setting this property causes the block to be 
            <a href="Pdf/Acm/Advanced Formatting/floating_blocks.html">floated</a>. 
            This property is only used by a block content. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.Top">
      <summary>
            Gets or sets the distance between a block content's top edge 
            and the top edge of its containing block's client area.
            </summary>
      <remarks>
            Setting this property causes the block to be 
            <a href="Pdf/Acm/Advanced Formatting/floating_blocks.html">floated</a>. 
            This property is only used by a block content. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.Width">
      <summary>
            Gets or sets the block width. 
            </summary>
      <remarks>
            Note that a block width defines the distance between the 
            left edge and right edge of a block's <b>client area</b>, which 
            excludes padding, border and margin. This property is 
            only used by a block content. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.Height">
      <summary>
            Gets or sets the block height. 
            </summary>
      <remarks>
        <para>
            Note that a block height defines the distance between 
            the top edge and bottom edge of a block's client area, 
            which excludes padding, border and margin. This property 
            is only used by a block content. 
            </para>
        <para>
            This value is suggestive only. If the actual block 
            content height is greater than this value, then the 
            actual content height is used. 
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.LineHeight">
      <summary>
            Get or set the minimum line height. 
            </summary>
      <remarks>
            If the actual line content height is smaller than this 
            value, extra padding will be added to the top and bottom 
            of the line. If the line content height is greater than 
            this value, the actual line height value will be used. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.BackgroundColor">
      <summary>
            Gets or sets the content's background color. 
            </summary>
      <remarks>
            If this property is set, the content fills its background 
            with the given color. The filling area includes padding 
            and border, but excludes margin. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.ForegroundColor">
      <summary>
            Gets or sets the content's foreground color.
            </summary>
      <remarks>
            This property is used by <see cref="T:EO.Pdf.Acm.AcmText"></see> as text color.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.WordSpacing">
      <summary>
            Gets or sets the word spacing for an <see cref="T:EO.Pdf.Acm.AcmText"></see> object.
            </summary>
      <remarks>
            This property is only used by an <see cref="T:EO.Pdf.Acm.AcmText"></see> 
            object but can be applied on any parent object because it is 
            inheritable. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.ParagraphSpacing">
      <summary>
            Gets or sets the extra spacing to be added between 
            paragraphs by an <see cref="T:EO.Pdf.Acm.AcmParagraph"></see> object. 
            </summary>
      <remarks>
            This property is only used by an <see cref="T:EO.Pdf.Acm.AcmParagraph"></see> 
            object but can be applied on any parent object because 
            it is inheritable. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.OffsetX">
      <summary>
            Gets or sets the horizontal offset from an object's 
            final position to its original position. 
            </summary>
      <remarks>
        <para>
            Use this property to move a content towards left 
            or right from its original position.
            For example, you can use this property to move an image 
            towards the left or right. Setting this property moves 
            the target object only. It does not affect any other 
            contents or alter the output layout. 
            </para>
        <para>
            If an object is also being scaled (for example, a 
            scaled image), this offset is being applied before 
            scaling. 
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.OffsetY">
      <summary>
            Gets or sets the vertical offset from an object's 
            final position to its original position. 
            </summary>
      <remarks>
            This property is the same as <see cref="P:EO.Pdf.Acm.AcmStyle.OffsetY"></see>
            except for vertical offset.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.HorizontalAlign">
      <summary>
            Gets or sets the horizontal alignment of the child contents.
            </summary>
      <remarks>
            This property is applied to block content only. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.VerticalAlign">
      <summary>
            Gets or sets the vertical alignment of the child contents.
            </summary>
      <remarks>
            This property is applied to block content only. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyle.Display">
      <summary>
            Gets or sets a value indicating how the content is displayed.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmStyle.Clone">
      <summary>
            Creates a new <see cref="T:EO.Pdf.Acm.AcmStyle"></see> object that 
            is a copy of the current instance.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmStyleSheet">
      <summary>
            Manages a list of named <see cref="T:EO.Pdf.Acm.AcmStyle"></see> object
            and can be applied to a content tree through an 
            <see cref="T:EO.Pdf.Acm.AcmContent"></see>'s <see cref="P:EO.Pdf.Acm.AcmContent.StyleSheet"></see>
            property.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmStyleSheet.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmStyleSheet"></see> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmStyleSheet.Item(System.String)">
      <summary>
            Gets the <see cref="T:EO.Pdf.Acm.AcmStyle"></see> object with the given <see cref="P:EO.Pdf.Acm.AcmStyle.Name"></see>.
            </summary>
      <param name="name">The style name.</param>
      <returns>
            Returns the <see cref="T:EO.Pdf.Acm.AcmStyle"></see> object with the given
            name, or <b>null</b> if no matching <see cref="T:EO.Pdf.Acm.AcmStyle"></see>
            object is found.
            </returns>
    </member>
    <member name="T:EO.Pdf.Acm.AcmGridLineType">
      <summary>
            Indicates  grid line type for an <see cref="T:EO.Pdf.Acm.AcmTable"></see> object.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmGridLineType.None">
      <summary>
            No grid line.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmGridLineType.GridV">
      <summary>
            Vertical grid line only.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmGridLineType.GridH">
      <summary>
            Horizontal grid line only.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmGridLineType.Grid">
      <summary>
            Both horizontal and vertical grid lines.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmGridLineType.Frame">
      <summary>
            Only frames.
            </summary>
    </member>
    <member name="F:EO.Pdf.Acm.AcmGridLineType.All">
      <summary>
            Both frames and grid line.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmTable">
      <summary>
            A block-level flow content element that provides a grid-based presentation 
            organized by rows and columns.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmTable.#ctor(System.Single[])">
      <summary>
            Create a new table.
            </summary>
      <param name="colWidths">
            A list of float values that specifies column width. 
            </param>
      <remarks>
        <para>
            Total number of columns are determined by the number of
            column width values. The first value specifies the width
            of the first column, the second value specifies the width
            of the second column, and so on.
            </para>
        <para>
            Note that the column width is not the same as cell width.
            A cell's width excludes the cell's padding, border and 
            margins. A column's width includes those values. Thus the
            total width of the table element is the same as the sum
            of all column widths.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTable.Rows">
      <summary>
            Gets the table row collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTable.Columns">
      <summary>
            Gets the table column collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTable.CellSpacing">
      <summary>
            Gets or set the spacing between cells.
            </summary>
      <remarks>
            When this property is set, it overwrites each cell's
            <see cref="P:EO.Pdf.Acm.AcmStyle.Margin">margin</see> with 1/2 of the value of this property. For
            example, setting this property to "1" has the same
            effects as setting all cells' margin to "0.5" on all
            sides.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTable.CellPadding">
      <summary>
            Gets or sets the padding for all cells.
            </summary>
      <remarks>
            When this property is set, it overwrites each cell's
            <see cref="P:EO.Pdf.Acm.AcmStyle.Padding">padding</see> value.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTable.GridLineType">
      <summary>
            Gets the table grid line type.
            </summary>
      <remarks>
        <para>
            An <see cref="T:EO.Pdf.Acm.AcmTable"></see> can optionally have
            horizontal and vertical grid lines between rows and
            columns as well as a frame around the whole table.
            Use this property to specify whether to draw 
            these lines.
            </para>
        <para>
            If this property includes the <see cref="F:EO.Pdf.Acm.AcmGridLineType.Frame"></see>
            option and the table's <see cref="P:EO.Pdf.Acm.AcmContent.Style"></see> property
            also includes <see cref="P:EO.Pdf.Acm.AcmStyle.Border">Borders</see>,
            then the border will be drawn outside of the table frame.
            In another word, table frame and border do not interact with
            each other.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTable.GridLineInfo">
      <summary>
            Gets or sets the grid line color, style and width.
            </summary>
      <remarks>
            To enable grid lines/frames on a table, you must
            also set <see cref="P:EO.Pdf.Acm.AcmTable.GridLineType"></see> to a value
            other than <see cref="F:EO.Pdf.Acm.AcmGridLineType.None"></see>.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Acm.AcmTableColumn">
      <summary>
            Represents a table column.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTableColumn.Index">
      <summary>
            Gets the column index.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTableColumn.HorizontalAlign">
      <summary>
            Gets or sets the default horizontal alignment for all cells in this column.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTableColumn.VerticalAlign">
      <summary>
            Gets or sets the default vertical alignment for all cells in this column.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmTableColumnCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.Acm.AcmTableColumn"></see> objects.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmTableRow">
      <summary>
            Represents a row in an <see cref="T:EO.Pdf.Acm.AcmTable"></see>.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmTableRow.#ctor(EO.Pdf.Acm.AcmTableCell[])">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmTableRow"></see> class.
            </summary>
      <param name="cells">A list of <see cref="T:EO.Pdf.Acm.AcmTableCell"></see> objects for this row.</param>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTableRow.Cells">
      <summary>
            Gets the row's cell collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTableRow.HorizontalAlign">
      <summary>
            Gets or sets the default horizontal alignment for all cells in this row.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTableRow.VerticalAlign">
      <summary>
            Gets or sets the default vertical alignment for all cells in this row.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmTableRowCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.Acm.AcmTableRow"></see> objects.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmTableCell">
      <summary>
            Represents a table cell in an <see cref="T:EO.Pdf.Acm.AcmTableRow"></see> object.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmTableCell.#ctor(EO.Pdf.Acm.AcmContent[])">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmTableCell"></see>
            class.
            </summary>
      <param name="children">A list of <see cref="T:EO.Pdf.Acm.AcmContent"></see> objects
            representing the contents of this cell.</param>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTableCell.ColSpan">
      <summary>
            Gets or sets the number of columns occupied by this cell.
            </summary>
    </member>
    <member name="P:EO.Pdf.Acm.AcmTableCell.RowSpan">
      <summary>
            Gets or sets the number of rows occupied by this cell.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmTableCellCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.Acm.AcmTableCell"></see> objects.
            </summary>
    </member>
    <member name="T:EO.Pdf.Acm.AcmText">
      <summary>
            Represents a text segment.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmText.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmText"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.Acm.AcmText.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Acm.AcmText"></see> class
            with the provided text.
            </summary>
      <param name="text">The text to be displayed.</param>
    </member>
    <member name="P:EO.Pdf.Acm.AcmText.AutoTrim">
      <summary>
            Gets or sets a value indicating whether the
            <see cref="T:EO.Pdf.Acm.AcmText"></see> object should
            automatically trims line breaks.
            </summary>
      <remarks>
        <para>
            By default, line breaks and any space around the 
            line breaks are being automatically replaced by
            a single space character. This allows you to use
            long text with C#'s multiple line string literal 
            syntax without worrying about the line breaks.
            To turn this feature off, set this property to 
            <b>false</b>.
            </para>
        <para>
            Note that you shall not confuse this feature with
            <see cref="T:System.String">String</see>'s Trim function, 
            which removes leading and trailing white-space 
            characters. <see cref="T:EO.Pdf.Acm.AcmText"></see> never removes
            leading or trailing white-space characters. It replaces
            line breaks and any possible white-space around the
            line breaks with a single space character.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.Acm.AcmText.Text">
      <summary>
            Gets or sets the text to be displayed.
            </summary>
      <remarks>
            By default, <see cref="T:EO.Pdf.Acm.AcmText"></see> automatically
            replaces line breaks and any possible white-space 
            around the line break with a single space character.
            This allows you to write long text using C#'s 
            multiple line string literal syntax without worrying 
            about the line breaks. You can turn this feature off 
            by setting <see cref="P:EO.Pdf.Acm.AcmText.AutoTrim"></see> to false.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Contents.PdfImageContent">
      <summary>
            A PDF content object that renders image.
            </summary>
    </member>
    <member name="M:EO.Pdf.Contents.PdfImageContent.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Contents.PdfImageContent"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.Contents.PdfImageContent.#ctor(EO.Pdf.Drawing.PdfImage)">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Contents.PdfImageContent"></see> class
            with the given <see cref="T:EO.Pdf.Drawing.PdfImage"></see> object.
            </summary>
      <param name="image">The <see cref="T:EO.Pdf.Drawing.PdfImage"></see> object.</param>
    </member>
    <member name="P:EO.Pdf.Contents.PdfImageContent.Image">
      <summary>
            Gets or sets the <see cref="T:EO.Pdf.Drawing.PdfImage"></see> object
            associated to this <see cref="T:EO.Pdf.Contents.PdfImageContent"></see>.
            </summary>
    </member>
    <member name="M:EO.Pdf.Contents.PdfImageContent.AutoScale">
      <summary>
            Automatically scale the image based on the image size
            and resolution.
            </summary>
    </member>
    <member name="T:EO.Pdf.Contents.PdfPathPaintAction">
      <summary>
            Specifies path paint actions.
            </summary>
    </member>
    <member name="F:EO.Pdf.Contents.PdfPathPaintAction.None">
      <summary>
            Does nothing.
            </summary>
    </member>
    <member name="F:EO.Pdf.Contents.PdfPathPaintAction.UseEvenOdd">
      <summary>
            Use even odd rule instead of the default non-zero
            winding number rule to whether a given point is
            inside a path. 
            </summary>
    </member>
    <member name="F:EO.Pdf.Contents.PdfPathPaintAction.AutoClose">
      <summary>
            Automatically closes the path before the stroke
            the path.
            </summary>
    </member>
    <member name="F:EO.Pdf.Contents.PdfPathPaintAction.Stroke">
      <summary>
            Stroke the path.
            </summary>
    </member>
    <member name="F:EO.Pdf.Contents.PdfPathPaintAction.Fill">
      <summary>
            Fill the path.
            </summary>
    </member>
    <member name="T:EO.Pdf.Contents.PdfPathContent">
      <summary>
            A PDF content object that strokes or fills a path.
            </summary>
    </member>
    <member name="M:EO.Pdf.Contents.PdfPathContent.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Contents.PdfPathContent"></see> object.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfPathContent.Action">
      <summary>
            Gets or sets the path paint action.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfPathContent.Path">
      <summary>
            Gets the associated <see cref="T:EO.Pdf.Drawing.PdfPath"></see> object.
            </summary>
    </member>
    <member name="T:EO.Pdf.Contents.PdfTextPositionMode">
      <summary>
            Specifies the text positioning mode.
            </summary>
    </member>
    <member name="F:EO.Pdf.Contents.PdfTextPositionMode.Offset">
      <summary>
            Move to the start of the next line, offset from the start of the 
            current line by <see cref="P:EO.Pdf.Contents.PdfTextContent.Offset"></see>.
            </summary>
    </member>
    <member name="F:EO.Pdf.Contents.PdfTextPositionMode.NextLine">
      <summary>
            Move to the start of the next line. The distance between the
            current line and the new line is specified by 
            <see cref="P:EO.Pdf.Contents.PdfContent.TextLeading" /> property.
            </summary>
    </member>
    <member name="F:EO.Pdf.Contents.PdfTextPositionMode.Matrix">
      <summary>
            Apply the text matrix specified by <see cref="P:EO.Pdf.Contents.PdfTextContent.TextMatrix"></see>.
            </summary>
    </member>
    <member name="T:EO.Pdf.Contents.PdfTextLayer">
      <summary>
            Represents a PDF text block. 
            </summary>
      <remarks>
            All <see cref="T:EO.Pdf.Contents.PdfTextContent"></see> must appear inside a <see cref="T:EO.Pdf.Contents.PdfTextLayer"></see>.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Contents.PdfTextContent">
      <summary>
            Represents text on a PDF page.
            </summary>
    </member>
    <member name="M:EO.Pdf.Contents.PdfTextContent.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Contents.PdfTextContent"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.Contents.PdfTextContent.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Contents.PdfTextContent"></see>
            with the given text.
            </summary>
      <param name="text">The text to be rendered.</param>
    </member>
    <member name="P:EO.Pdf.Contents.PdfTextContent.PositionMode">
      <summary>
            Gets or sets the text position mode.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfTextContent.Offset">
      <summary>
            Gets or sets the offset used when <see cref="P:EO.Pdf.Contents.PdfTextContent.PositionMode"></see>
            is set to <see cref="F:EO.Pdf.Contents.PdfTextPositionMode.Offset"></see>.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfTextContent.TextMatrix">
      <summary>
            Gets or sets the current text matrix.
            </summary>
      <remarks>
        <para>
            Text matrix defines the transformation from text
            space to user space. Specifically, the origin of 
            the first glyph shown by a PdfTextContent object 
            is placed at the origin of text space.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.Contents.PdfTextContent.Text">
      <summary>
            Gets or sets the text to be rendered.
            </summary>
    </member>
    <member name="T:EO.Pdf.Contents.PdfContentContainer">
      <summary>
            Represents a container object that contains
            a stream of <see cref="T:EO.Pdf.Contents.PdfContent"></see> objects.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContentContainer.Index">
      <summary>
            Gets the index of the container object.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContentContainer.Contents">
      <summary>
            Gets the root <see cref="T:EO.Pdf.Contents.PdfContentCollection"></see>.
            </summary>
    </member>
    <member name="M:EO.Pdf.Contents.PdfContentContainer.Clear">
      <summary>
            Clears all contents.
            </summary>
    </member>
    <member name="T:EO.Pdf.Contents.PdfContent">
      <summary>
            Represents a low level PDF content object.
            </summary>
    </member>
    <member name="M:EO.Pdf.Contents.PdfContent.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Contents.PdfContent"></see> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.SaveGfxState">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Pdf.Contents.PdfContent"></see> object
            should automatically save and restore graphic state when rendered.
            </summary>
      <remarks>
        <para>
            This property is set to <b>true</b> by default, in which case
            any graphic state changes occured inside this PdfContent would
            not have any impact on anything outside of the PdfContent object.
            </para>
        <para>
            If this property is set to false, then graphic state is not
            restored after the PdfContent is rendered. Consider the following
            scenario:
            </para>
        <list type="bulletin">
          <item>
                    PdfContent A contains PdfContent B and PdfContent C;
                </item>
          <item>
                    PdfContent B's SaveGfxState is set to <b>false</b>;
                </item>
          <item>
                    Changing PdfContent B's ForeColor property will also
                    change the effective ForeColor for PdfContent C because
                    PdfContent C is rendered after PdfContent B;
                </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.Container">
      <summary>
            Gets the <see cref="T:EO.Pdf.Contents.PdfContentContainer"></see> object that
            this <see cref="T:EO.Pdf.Contents.PdfContent"></see> resides.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.Parent">
      <summary>
            Gets the parent <see cref="T:EO.Pdf.Contents.PdfContent"></see> object.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.Flatness">
      <summary>
            Gets or sets the flatness tolerance in the graphics state.
            </summary>
      <remarks>
            The flatness tolerance controls the maximum permitted distance 
            in device pixels between the mathematically correct path and 
            an approximation constructed from straight line segments.
            smaller values yield greater precision at the cost of more computation.
            Valid values are from 0 to 100, a value of 0 specifies the default 
            flatness tolerance.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.GfxMatrix">
      <summary>
            Gets or sets the current graphic matrix.
            </summary>
      <remarks>
            Graphics matrix maps user space coordinates into output 
            device coordinates.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.StrokingColor">
      <summary>
            Gets or set the stroking color.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.NonStrokingColor">
      <summary>
            Gets or sets the non-stroking color.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.LineWidth">
      <summary>
            Gets or sets the line width.
            </summary>
      <remarks>
            This property is in "user space unit", which is usually
            1/72 inch.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.StrokeAdjustment">
      <summary>
            Gets or sets whether to automatically compensate
            for the rasterization effects to produce strokes 
            of uniform thickness.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.LineCapStyle">
      <summary>
            Gets or set the line cap style.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.LineDashStyle">
      <summary>
            Gets or sets the line dash style.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.CharSpacing">
      <summary>
            Gets or sets the character spacing in text space unit.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.WordSpacing">
      <summary>
            Gets or sets the word spacing in text space unit.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.TextLeading">
      <summary>
            Gets or sets the vertical distance between the baselines of adjacent lines of text in text space unit.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.Font">
      <summary>
            Gets or sets the current font.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.HasChildren">
      <summary>
            Gets a value indicating whether the <see cref="T:EO.Pdf.Contents.PdfContent"></see>
            contains any child <see cref="T:EO.Pdf.Contents.PdfContent"></see> objects.
            </summary>
    </member>
    <member name="P:EO.Pdf.Contents.PdfContent.Contents">
      <summary>
            Gets the child <see cref="T:EO.Pdf.Contents.PdfContentCollection"></see>.
            </summary>
    </member>
    <member name="T:EO.Pdf.Contents.PdfRawContent">
      <summary>
            Represents the raw content loaded from a page.
            </summary>
    </member>
    <member name="T:EO.Pdf.Contents.PdfContentCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.Contents.PdfContent"></see> objects.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfJavaScriptAction">
      <summary>
            Represents a PDF action to executes JavaScript code.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfJavaScriptAction.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfJavaScriptAction" /> class.
            </summary>
      <param name="javaScript">The JavaScript code to be executed.</param>
    </member>
    <member name="P:EO.Pdf.PdfJavaScriptAction.JavaScript">
      <summary>
            Gets or sets the JavaScript to be executed.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfAttachment">
      <summary>
            Represents an attachment in the PDF file.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfAttachment.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:EO.Pdf.PdfAttachment" /> object from a file.
            </summary>
      <param name="fileName">The full file name of the attachment.</param>
      <remarks>
            This constructor loads the file data from <i>fileName</i>.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PdfAttachment.#ctor(System.String,System.String)">
      <summary>
            Creates a new <see cref="T:EO.Pdf.PdfAttachment" /> object from a file and set the sub type.
            </summary>
      <param name="fileName">The full file name of the attachment.</param>
      <param name="subType">The sub type of the file. The sub type are defined by RFC 2046, for example, "text/plain". This information is optional. To omit this argument, pass <b>null</b>.</param>
      <remarks>
            This constructor loads the file data from <i>fileName</i>.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PdfAttachment.#ctor(System.String,System.Byte[],System.String)">
      <summary>
            Creates a new <see cref="T:EO.Pdf.PdfAttachment" /> object from file data.
            </summary>
      <param name="name">The name of the attachment.</param>
      <param name="data">The data of the attachment.</param>
      <param name="subType">The subtype of the file. The subtype are defined by RFC 2046, for example, "text/plain". This information is optional.</param>
    </member>
    <member name="M:EO.Pdf.PdfAttachment.#ctor(System.String,System.Byte[],System.String,System.DateTime,System.DateTime)">
      <summary>
            Creates a new <see cref="T:EO.Pdf.PdfAttachment" /> object from file data.
            </summary>
      <param name="name">The name of the attachment.</param>
      <param name="data">The data of the attachment.</param>
      <param name="subType">The subtype of the file. The subtype are defined by RFC 2046, for example, "text/plain". This information is optional.</param>
      <param name="creationDate">The creation date of the attachment. This information is optional. To omit this argument, pass DateTime.MinValue.</param>
      <param name="modDate">The last write time of the attachment. This information is optional. To omit this argument, pass DateTime.MinValue.</param>
    </member>
    <member name="P:EO.Pdf.PdfAttachment.Name">
      <summary>
            Gets or sets the attachment name. Each attachment must have an unique name.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfAttachment.Description">
      <summary>
            Gets or sets the attachment description.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfAttachment.SubType">
      <summary>
            Gets or sets the attachment subtype.
            </summary>
      <remarks>
            The subtype are defined by RFC 2046, for example, "text/plain". 
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfAttachment.Data">
      <summary>
            Gets or sets the attachment data.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfAttachment.CreationDate">
      <summary>
            Gets or sets the creation date.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfAttachment.ModDate">
      <summary>
            Gets or sets the modified date.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfAttachmentCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.PdfAttachment" /> objects.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfDocumentSecurity">
      <summary>
            Contains information about security information about
            a <see cref="T:EO.Pdf.PdfDocument"></see>.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfDocumentSecurity.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Pdf.PdfDocumentSecurity"></see>
            class with the given open password.
            </summary>
      <param name="accessPassword">The password used to open the document.</param>
      <remarks>
        <para>
            Use this constructor to create a <see cref="T:EO.Pdf.PdfDocumentSecurity"></see>
            object that can be used to open a password protected PDF document. 
            For example, the following code tries to load a PDF file with password
            "1234":
            </para>
        <code lang="C#" title="C#">
            //Create the PdfDocumentSecurity object with password "1234"
            PdfDocumentSecurity security = new PdfDocumentSecurity("1234");
            
            //Load the document with the PdfDocumentSecurity object
            PdfDocument doc = new PdfDocument(pdfFileName, security);
            </code>
        <para>
            See <a href="Pdf/Advanced/encryption.html">here</a> for more information
            about PDF file security.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDocumentSecurity.AccessPassword">
      <summary>
            Gets the access password that was used to open the document.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocumentSecurity.OwnerPasswordProvided">
      <summary>
            Returns a value indicating whether the supplied
            <see cref="P:EO.Pdf.PdfDocumentSecurity.AccessPassword"></see> is the owner password
            or the user password. 
            </summary>
      <remarks>
        <para>
            See <a cref="M:EO.Pdf.PdfDocumentSecurity.#ctor(System.String)"></a> for more details about owner
            password and user password.
            </para>
        <para>
            This property is only updated on the 
            <see cref="T:EO.Pdf.PdfDocumentSecurity"></see> object returned through
            <see cref="P:EO.Pdf.PdfDocument.Security"></see> property after the
            document has already been loaded.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDocumentSecurity.OwnerPassword">
      <summary>
            Sets or gets the owner password.
            </summary>
      <remarks>
        <para>
            Set this password to encrypt the PDF document. For 
            example, the following code saves a PDF file with owner 
            password "1234":
            </para>
        <code lang="C#" title="C#">
            //Create a new PdfDocument object
            PdfDocument doc = new PdfDocument();
            
            //Create document contents
            ....
            
            //Set document password and permission
            doc.Security.OwnerPassword = "1234";
            doc.Security.Disallow(PdfDocumentPermission.Printing);
            
            //Save the document
            doc.Save(fileName);
            </code>
        <para>
          <b>Note:</b> User does not require this password to open
            the file. To always require a password to open the file,
            use <see cref="P:EO.Pdf.PdfDocumentSecurity.UserPassword"></see> instead.
            See <a href="Pdf/Advanced/encryption.html">here</a> for more information
            about PDF file security.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDocumentSecurity.UserPassword">
      <summary>
            Gets or sets the user password.
            </summary>
      <remarks>
        <para>
            Set this password to password protect the PDF file. Once
            set, the correct password must be provided in order to
            correctly decrypt the PDF file. The following code set
            user password to "1234":
            </para>
        <code lang="C#" title="C#">
            //Create a new PdfDocument object
            PdfDocument doc = new PdfDocument();
            
            //Create document contents
            ....
            
            //Set document password and permission
            doc.Security.UserPassword = "1234";
            
            //Save the document
            doc.Save(fileName);
            </code>
        <para>
            File generated by the above code can not be opened 
            without the correct password "1234".
            See <a href="Pdf/Advanced/encryption.html">here</a> for more information
            about PDF file security.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDocumentSecurity.Permissions">
      <summary>
            Gets or sets the document permissions.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfDocumentSecurity.Disallow(EO.Pdf.PdfDocumentPermissions)">
      <summary>
            Disallow a specific permission.
            </summary>
      <param name="permission">The permission to disallow.</param>
      <remarks>
            This function clears the corresponding flag in <see cref="P:EO.Pdf.PdfDocumentSecurity.Permissions"></see>
            property.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDocumentSecurity.IsEncrypted">
      <summary>
            Gets a value indicating whether the file is encrypted.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfDocumentPermissions">
      <summary>
            Specifies permissions for a <see cref="T:EO.Pdf.PdfDocument"></see>.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.None">
      <summary>
            No permissions.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.Printing">
      <summary>
            Allows printing.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.ModifyingContents">
      <summary>
            Allows modifying page contents.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.CopyingContents">
      <summary>
            Allows copying page contents such as text and images.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.Commenting">
      <summary>
            Allows adding text annotation.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.FillingFormFields">
      <summary>
            Allows filling in form fields.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.CopyingContentsForAccessibility">
      <summary>
            Allows copying page contents such as text and images
            for in support of accessibility to users with 
            disabilities.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.AssembingDocument">
      <summary>
            Allows inserting, rotating or deleting pages
            or bookmarks.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.HighQualityPrinting">
      <summary>
            Allows printing high quality output. Without
            this flag printing is limited to a low-level 
            representation of the appearance, possibly of 
            degraded quality.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDocumentPermissions.All">
      <summary>
            Allow all permissions.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfPushButtonField">
      <summary>
            Represents a push button.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfOnOffField">
      <summary>
            Represents a field with on/off state.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfCheckBoxField">
      <summary>
            Represents a checkbox button.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfCheckBoxField.Checked">
      <summary>
            Gets or sets a value indicating whether the checkbox is checked.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfCheckBoxField.Value">
      <summary>
            Gets or sets the value of the checkbox.
            </summary>
      <remarks>
            The value is "1" for checked, "0" for unchecked. You
            can also set this value to "On" or "Yes" to check the
            checkbox.
            </remarks>
    </member>
    <member name="T:EO.Pdf.PdfRadioButtonGroup">
      <summary>
            Represents a radio button group. 
            </summary>
      <remarks>
        <para>
            A radio button group contains a set of related radio buttons, 
            each represented by a <see cref="T:EO.Pdf.PdfRadioButtonField"></see>
            object in the <see cref="T:EO.Pdf.PdfRadioButtonGroup"></see>'s
            <see cref="P:EO.Pdf.PdfField.Children"></see> collection.
            </para>
        <para>
            Use <see cref="P:EO.Pdf.PdfListField.SelectedIndex"></see> property to get or set
            the selected radio button index.
            </para>
      </remarks>
    </member>
    <member name="T:EO.Pdf.PdfRadioButtonField">
      <summary>
            Represents a radio button.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfRadioButtonField.Group">
      <summary>
            Gets the parent <see cref="T:EO.Pdf.PdfRadioButtonGroup" /> object in which this <see cref="T:EO.Pdf.PdfRadioButtonField" /> belongs.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfListItem">
      <summary>
            Represents an item in a PDF list box.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfListItem.#ctor(System.String,System.String)">
      <summary>
            Creates a new item with the given text and value.
            </summary>
      <param name="text">The item text.</param>
      <param name="value">The item value.</param>
    </member>
    <member name="M:EO.Pdf.PdfListItem.#ctor(System.String)">
      <summary>
            Create a new item with the given text.
            </summary>
      <param name="text">
      </param>
    </member>
    <member name="M:EO.Pdf.PdfListItem.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfListItem"></see> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfListItem.Text">
      <summary>
            Gets or sets the item text.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfListItem.Value">
      <summary>
            Gets or sets the item value.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfListItemCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.PdfListItem"></see> objects.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfListField">
      <summary>
            Represents a list field.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfListField.Items">
      <summary>
            Gets the list of items.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfListField.SelectedIndex">
      <summary>
            Gets or sets the selected item index.
            </summary>
      <remarks>
            Use -1 to clear the selected item.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfListField.Value">
      <summary>
            Gets or sets the value of the list.
            </summary>
      <remarks>
            The value of the list box is the selected item text.
            Setting this property automatically updates 
            <see cref="P:EO.Pdf.PdfListField.SelectedIndex"></see> to the index of a
            matching item.
            </remarks>
    </member>
    <member name="T:EO.Pdf.PdfListBoxField">
      <summary>
            Represents a listbox field.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfComboBoxField">
      <summary>
            Represents a combobox field.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfField">
      <summary>
            Represents a fill in form field.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfField.Name">
      <summary>
            Gets or sets the field name.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfField.FullName">
      <summary>
            Gets or sets the full field name.
            </summary>
      <remarks>
            For a field with no parent, the full name is the same as <see cref="P:EO.Pdf.PdfField.Name"></see>.
            For a field that is the child of another field, the fully qualified name 
            is formed by appending the child field’s name to the parent’s fully name, 
            separated by a period, for example, <i>PersonalData.Address.ZipCode</i>.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfField.MaxFontSize">
      <summary>
            Gets or sets the maxium font size when automatic font resizing is used.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfField.ReadOnly">
      <summary>
            Gets or sets a value indicating whether the field is readonly.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfField.Font">
      <summary>
            Gets or sets the font associated to the field.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfField.Color">
      <summary>
            Gets or sets the text color of the field.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfField.IsAppearanceInherited">
      <summary>
            Gets or sets whether the <see cref="T:EO.Pdf.PdfField" />'s <see cref="P:EO.Pdf.PdfField.Font" /> or <see cref="P:EO.Pdf.PdfField.Color" />
            is inherited from its parent field.
            </summary>
      <remarks>
            When a <see cref="T:EO.Pdf.PdfField" />'s <see cref="P:EO.Pdf.PdfField.Font" /> or <see cref="P:EO.Pdf.PdfField.Color" /> is inherited
            from a parent field, modifying them may affect other fields too. In this case you can set
            this property to false to stop such inheritance first.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfField.Value">
      <summary>
            Gets or sets the field value.
            </summary>
      <remarks>
            The following table lists field values for different field types:
            <list type="table"><listheader><term>Field Type</term><description>Value</description></listheader><item><term><see cref="T:EO.Pdf.PdfCheckBoxField"></see></term><description>
                        "1" for checked state and "0" for unchecked state.
                    </description></item><item><term><see cref="T:EO.Pdf.PdfListBoxField"></see></term><description>
                        The selected item text, or null if no item is selected.
                    </description></item><item><term><see cref="T:EO.Pdf.PdfTextField"></see></term><description>
                        The text for the textbox.
                    </description></item></list></remarks>
    </member>
    <member name="P:EO.Pdf.PdfField.Parent">
      <summary>
            Gets the parent field.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfField.Children">
      <summary>
            Gets the children field collection.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfField.Modified">
      <summary>
            Mark the field as modified so that changes made to this field 
            will be saved.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfGenericField">
      <summary>
            Represents a generic field.
            </summary>
      <remarks>
            A generic field is a field that is valid per PDF specification
            but is does not have type specific <see cref="T:EO.Pdf.PdfField"></see>
            object (such as <see cref="T:EO.Pdf.PdfTextField"></see> to associated with.
            </remarks>
    </member>
    <member name="T:EO.Pdf.PdfFieldCollection">
      <summary>
            Represents a collection of fields.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfFieldCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:EO.Pdf.PdfField"></see> with the specified name.
            </summary>
      <param name="name">The field name.</param>
    </member>
    <member name="T:EO.Pdf.PdfTextFieldMode">
      <summary>
            Specifies the text box mode.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfTextFieldMode.SingleLine">
      <summary>
            Single line text box.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfTextFieldMode.MultipleLine">
      <summary>
            Multiple line text box.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfTextFieldMode.Password">
      <summary>
            Password box.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfTextField">
      <summary>
            Represents a text box field.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfTextField.Text">
      <summary>
            Gets or sets the textbox text.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfTextField.Value">
      <summary>
            Gets or sets the textbox text.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfTextField.Mode">
      <summary>
            Gets or sets the textbox mode.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfActionType">
      <summary>
            Specifies the type of a PDF action.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfActionType.GoTo">
      <summary>
            Changes the view to a specified destination.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfActionType.Launch">
      <summary>
            Launches an application.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfActionType.URI">
      <summary>
            Launches an URI.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfActionType.JavaScript">
      <summary>
            Executes JavaScript.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfAction">
      <summary>
            The base class for all PDF actions.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfGoToAction">
      <summary>
            Represents a PDF action that changes the view to a specified destination.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfGoToAction.#ctor(EO.Pdf.PdfDestination)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfGoToAction" /> object.
            </summary>
      <param name="destination">The destination of the action.</param>
    </member>
    <member name="P:EO.Pdf.PdfGoToAction.Destination">
      <summary>
            Gets the destination of this action.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfLaunchAction">
      <summary>
            Represents a PDF action that Launches an application.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfLaunchAction.#ctor(System.String,System.Boolean)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfLaunchAction" /> object.
            </summary>
      <param name="path">The path of the application to launch.</param>
      <param name="useNewWindow">Whether to use a new window.</param>
    </member>
    <member name="P:EO.Pdf.PdfLaunchAction.Path">
      <summary>
            Gets or sets the path of the application.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfLaunchAction.UseNewWindow">
      <summary>
            Gets or sets whether to use a new window when the application is launched.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfUriAction">
      <summary>
            Represents a PDF action that opens an URI.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfUriAction.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfUriAction" /> class.
            </summary>
      <param name="uri">The URI to be oepned.</param>
    </member>
    <member name="P:EO.Pdf.PdfUriAction.Uri">
      <summary>
            Gets or sets the URI to be opened.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfDestFitMode">
      <summary>
            Specifies auto fit mode for a <see cref="T:EO.Pdf.PdfDestination"></see> object.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfDestFitMode.None">
      <summary>
        <para>
            Does not try to automatically fit the page.
            </para>
        <para>
            This option displays the page with the coordinates (<see cref="P:EO.Pdf.PdfDestination.FitRect"></see>.Location) 
            positioned at the upper-left corner of the window and the contents of the 
            page magnified by the <see cref="P:EO.Pdf.PdfDestination.ZoomFactor"></see>.
            </para>
      </summary>
    </member>
    <member name="F:EO.Pdf.PdfDestFitMode.EntirePage">
      <summary>
        <para>
            Automatically fits the entire page.
            </para>
        <para>
            Neither <see cref="P:EO.Pdf.PdfDestination.FitRect"></see> nor
            <see cref="P:EO.Pdf.PdfDestination.ZoomFactor"></see> is used for this
            value.
            </para>
      </summary>
    </member>
    <member name="F:EO.Pdf.PdfDestFitMode.EntirePageH">
      <summary>
        <para>
            Automatically fits the entire width of the page.
            </para>
        <para>
            This option displays the page with the vertical coordinate 
            top (<see cref="P:EO.Pdf.PdfDestination.FitRect"></see>.Top) positioned 
            at the top edge of the window and the contents of the page 
            magnified just enough to fit the entire width of the page 
            within the window.
            </para>
      </summary>
    </member>
    <member name="F:EO.Pdf.PdfDestFitMode.EntirePageV">
      <summary>
        <para>
            Automatically fits the entire height of the page.
            </para>
        <para>
            This option displays the page with the horizontal coordinate left 
            (<see cref="P:EO.Pdf.PdfDestination.FitRect"></see>.Left) positioned at 
            the left edge of the window and the contents of the page magnified 
            just enough to fit the entire height of the page within the window.
            </para>
      </summary>
    </member>
    <member name="F:EO.Pdf.PdfDestFitMode.EntirePageR">
      <summary>
        <para>
            Automatically fits to the specified rectangle.
            </para>
        <para>
            This option displays the page with its contents magnified just 
            enough to fit the rectangle specified (<see cref="P:EO.Pdf.PdfDestination.FitRect"></see>) 
            entirely within the window both horizontally and vertically. 
            If the required horizontal and vertical magnification factors 
            are different, use the smaller of the two, centering the 
            rectangle within the window in the other dimension.
            </para>
      </summary>
    </member>
    <member name="F:EO.Pdf.PdfDestFitMode.BoundingBox">
      <summary>
        <para>
            Automatically fits the bounding box.
            </para>
        <para>
            Similar to <see cref="F:EO.Pdf.PdfDestFitMode.EntirePageR"></see>, but uses the page's
            bounding box instead of <see cref="P:EO.Pdf.PdfDestination.FitRect"></see>.
            </para>
      </summary>
    </member>
    <member name="F:EO.Pdf.PdfDestFitMode.BoundingBoxH">
      <summary>
        <para>
            Automatically fits the entire bounding box width of the page.
            </para>
        <para>
            Similar to <see cref="F:EO.Pdf.PdfDestFitMode.EntirePageH"></see>, but uses the page's
            bounding box instead of <see cref="P:EO.Pdf.PdfDestination.FitRect"></see>.
            </para>
      </summary>
    </member>
    <member name="F:EO.Pdf.PdfDestFitMode.BoundingBoxV">
      <summary>
        <para>
            Automatically fits the entire bounding box height of the page.
            </para>
        <para>
            Similar to <see cref="F:EO.Pdf.PdfDestFitMode.EntirePageV"></see>, but uses the page's
            bounding box instead of <see cref="P:EO.Pdf.PdfDestination.FitRect"></see>.
            </para>
      </summary>
    </member>
    <member name="T:EO.Pdf.PdfDestination">
      <summary>
            Represents a particular view and location of the document.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfDestination.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfDestination"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfDestination.#ctor(EO.Pdf.PdfPage,EO.Pdf.PdfDestFitMode,EO.Pdf.Drawing.PdfRectangle,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfDestination"></see> class.
            </summary>
      <param name="page">The target page.</param>
      <param name="fitMode">The auto-fit mode.</param>
      <param name="fitRect">The auto-fit rectangle.</param>
      <param name="zoomFactor">The zoom factor.</param>
    </member>
    <member name="M:EO.Pdf.PdfDestination.#ctor(EO.Pdf.PdfPage,EO.Pdf.PdfDestFitMode)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfDestination"></see> 
            class with just the auto-fit mode.
            </summary>
      <remarks>
            This constructor is equivalent of calling 
            <see cref="M:EO.Pdf.PdfDestination.#ctor(EO.Pdf.PdfPage,EO.Pdf.PdfDestFitMode,EO.Pdf.Drawing.PdfRectangle,System.Single)"></see>
            with <i>fitRect</i> set to <b>null</b> and <i>zoomFactor</i> set to
            0.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDestination.Page">
      <summary>
            Gets or sets the page associated to this <see cref="T:EO.Pdf.PdfDestination"></see>.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDestination.FitMode">
      <summary>
            Gets or sets the auto-fit mode.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDestination.FitRect">
      <summary>
            Gets or sets the auto-fit rectangle.
            </summary>
      <remarks>
        <para>
            Different <see cref="P:EO.Pdf.PdfDestination.FitMode"></see> values interpret this
            rectangle differently. See <see cref="T:EO.Pdf.PdfDestFitMode"></see>
            for more details.
            </para>
        <para>
            Values in this rectangle are expressed in PDF user space unit.
            By default, one inch is 72 user space unit. Also the Y axis
            grows from the bottom to top. So for example, if the paper height
            is 11 inch and the top margin is 1 inch, then the top of the first
            line on the page would have a Y value of 720 (72 * 10 inch).
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDestination.ZoomFactor">
      <summary>
            Gets or sets the zoom factor of this <see cref="T:EO.Pdf.PdfDestination"></see>.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Pdf.PdfDestination.FitMode"></see> is set
            to <see cref="F:EO.Pdf.PdfDestFitMode.None"></see>.
            </remarks>
    </member>
    <member name="T:EO.Pdf.PdfLink">
      <summary>
            Contains information about a hyperlink.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfLink.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfLink"></see> class.
            </summary>
      <remarks>
            This constructor creates an uninitialized <see cref="T:EO.Pdf.PdfLink"></see>
            object. You must set the link's source rectangles and target
            in order to save it to the <see cref="T:EO.Pdf.PdfDocument"></see>.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PdfLink.#ctor(EO.Pdf.PdfPageRectangle[],EO.Pdf.PdfDestination)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfLink"></see> class.
            </summary>
      <param name="sourceRects">
            The source rectangles. This argument defines the 
            "clickable" area of the link.        
            </param>
      <param name="targetDestination">
            The destination of the link.
            </param>
    </member>
    <member name="M:EO.Pdf.PdfLink.#ctor(EO.Pdf.PdfPageRectangle,EO.Pdf.PdfDestination)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfLink"></see> class.
            </summary>
      <param name="sourceRect">
            The source rectangle. This argument defines the 
            "clickable" area of the link.
            </param>
      <param name="targetDestination">
            The destination of the link.
            </param>
    </member>
    <member name="M:EO.Pdf.PdfLink.#ctor(EO.Pdf.PdfPageRectangle[],System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfLink"></see> class.
            </summary>
      <param name="sourceRects">
            The source rectangle. This argument defines the 
            "clickable" area of the link.
            </param>
      <param name="targetUrl">The target Url.</param>
    </member>
    <member name="M:EO.Pdf.PdfLink.#ctor(EO.Pdf.PdfPageRectangle,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfLink"></see> class.
            </summary>
      <param name="sourceRect">
            The source rectangle. This argument defines the 
            "clickable" area of the link.
            </param>
      <param name="targetUrl">The target Url.</param>
    </member>
    <member name="P:EO.Pdf.PdfLink.SourceRect">
      <summary>
            Gets or sets the source rectangle of the link.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfLink.SourceRects">
      <summary>
            Gets or sets the source rectangle list for the link.
            </summary>
      <remarks>
            A link can have multiple source rectangles. For example,
            a hyperlink that spans into multiple lines need one
            rectangle to mark the boundary of each line.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfLink.TargetUrl">
      <summary>
            Gets or sets the target Url of the link.
            </summary>
      <remarks>
            When <see cref="P:EO.Pdf.PdfLink.TargetUrl"></see> is specified, 
            <see cref="P:EO.Pdf.PdfLink.TargetDestination"></see> is ignored.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfLink.TargetDestination">
      <summary>
            Gets or sets the target destination of the link.
            </summary>
      <remarks>
            You can create a <see cref="T:EO.Pdf.PdfDestination"></see> object from
            a <see cref="T:EO.Pdf.HtmlElement"></see>'s <see cref="P:EO.Pdf.HtmlElement.Location"></see>
            property through its
            <see cref="M:EO.Pdf.PdfPageLocation.CreateDestination"></see> method,
            or from an <see cref="T:EO.Pdf.Acm.AcmContent"></see> object
            through its <see cref="M:EO.Pdf.Acm.AcmContent.CreateDestination"></see>
            method. In both cases the returned <see cref="T:EO.Pdf.PdfDestination"></see>
            object represents the <see cref="T:EO.Pdf.HtmlElement"></see> or 
            <see cref="T:EO.Pdf.Acm.AcmContent"></see>'s top left corner.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PdfLink.Render">
      <summary>
            Add the link into the PDF file.
            </summary>
      <remarks>
            Once you initialize a <see cref="T:EO.Pdf.PdfLink"></see> object, you must
            call this method to save it. Otherwise the link is not saved and
            will not appear in the final PDF file.
            </remarks>
    </member>
    <member name="T:EO.Pdf.PdfPageLocation">
      <summary>
            Represents a location on a <see cref="T:EO.Pdf.PdfPage"></see>.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfPageLocation.#ctor(EO.Pdf.PdfPage)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfPageLocation"></see> class
            with both <see cref="P:EO.Pdf.PdfPageLocation.X"></see> and <see cref="P:EO.Pdf.PdfPageLocation.Y"></see> set to zero.
            </summary>
      <param name="page">The <see cref="T:EO.Pdf.PdfPage"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.PdfPageLocation.#ctor(EO.Pdf.PdfPage,System.Single,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfPageLocation"></see> class.
            </summary>
      <param name="page">The <see cref="T:EO.Pdf.PdfPage"></see> object.</param>
      <param name="x">The X location from the top of the page in inches.</param>
      <param name="y">The Y location from the top of the page in inches.</param>
    </member>
    <member name="P:EO.Pdf.PdfPageLocation.Page">
      <summary>
            Gets the <see cref="T:EO.Pdf.PdfPage"></see> object.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfPageLocation.PageIndex">
      <summary>
            Gets the page index.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfPageLocation.X">
      <summary>
            Gets or sets the X location in inches.
            </summary>
      <remarks>
            This value is in page coordinates.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfPageLocation.Y">
      <summary>
            Gets or sets the Y location in inches.
            </summary>
      <remarks>
            This value is in page coordinates.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PdfPageLocation.CreateDestination">
      <summary>
            Creates a new <see cref="T:EO.Pdf.PdfDestination"></see>
            object for this location.
            </summary>
      <remarks>
            A <see cref="T:EO.Pdf.PdfDestination"></see> object can
            be used to for bookmark or hyperlink destionation.
            </remarks>
    </member>
    <member name="T:EO.Pdf.PdfPageRectangle">
      <summary>
            Represents a rectangle on a <see cref="T:EO.Pdf.PdfPage"></see>.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfPageRectangle.#ctor(EO.Pdf.PdfPage)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfPageRectangle"></see> class
            with all members set to zero.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfPageRectangle.#ctor(EO.Pdf.PdfPage,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfPageRectangle"></see> class
            with the given values.
            </summary>
      <param name="page">The <see cref="T:EO.Pdf.PdfPage"></see> object.</param>
      <param name="x">The X location from the top of the page in inches.</param>
      <param name="y">The Y location from the top of the page in inches.</param>
      <param name="width">The width of the rectangle in inches.</param>
      <param name="height">The height of the rectangle in inches.</param>
    </member>
    <member name="M:EO.Pdf.PdfPageRectangle.#ctor(EO.Pdf.PdfPageLocation,System.Single,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfPageRectangle"></see> class
            with the given location and size.
            </summary>
      <param name="location">The top left location of the rectangle.</param>
      <param name="width">The width of the rectangle in inches.</param>
      <param name="height">The height of the rectangle in inches.</param>
    </member>
    <member name="P:EO.Pdf.PdfPageRectangle.Width">
      <summary>
            Gets or sets the width of the rectangle in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfPageRectangle.Height">
      <summary>
            Gets or sets the height of the rectangle in inches.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfBookmark">
      <summary>
            Represents a bookmark in the PDF file.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfBookmark.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfBookmark"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfBookmark.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfBookmark"></see> class
            with the given text.
            </summary>
      <param name="text">The bookmark text.</param>
    </member>
    <member name="M:EO.Pdf.PdfBookmark.CreatePlaceHolder(EO.Pdf.PdfDocument)">
      <summary>
            Creates a placeholder bookmark item.
            </summary>
      <param name="targetDocument">The target <see cref="T:EO.Pdf.PdfDocument"></see> object.</param>
      <remarks>
            Place holder bookmark items can be used to customize the
            result bookmark structure when merging multiple 
            <see cref="T:EO.Pdf.PdfDocument"></see> objects. See 
            <see cref="M:EO.Pdf.PdfDocument.Merge(EO.Pdf.PdfDocument[])">PdfDocument.Merge</see> for more details
            about this feature.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfBookmark.Text">
      <summary>
            Gets or sets the bookmark text.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfBookmark.Destination">
      <summary>
            Gets or sets the bookmark's destination.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfBookmark.Parent">
      <summary>
            Gets or sets the parent bookmark.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfBookmark.Color">
      <summary>
            Gets or sets the bookmark color.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfBookmark.IsItalic">
      <summary>
            Gets or sets a value indicating whether the bookmark text is italic.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfBookmark.IsBold">
      <summary>
            Gets or sets a value indicating whether the bookmark text is bold.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfBookmark.ChildNodes">
      <summary>
            Gets the child bookmark collection.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfBookmarkCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.PdfBookmark"></see> objects.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfPortfolioView">
      <summary>
            Specifies the initial portfolio view.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPortfolioView.NotSet">
      <summary>
            Portfolio is not enabled.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPortfolioView.Detail">
      <summary>
            The collection view shall be presented in details mode.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPortfolioView.Collection">
      <summary>
            The collection view shall be presented in tile mode.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPortfolioView.Hidden">
      <summary>
            The collection view shall be initially hidden. The PDF reader would 
            usually provide a mean for the user to view the collection by some explicit 
            action.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfPortfolio">
      <summary>
            Contains information about PDF portfolio.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfPortfolio.InitialDocument">
      <summary>
            Gets or sets the initial document.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfPortfolio.InitialView">
      <summary>
            Gets or sets the initial view.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfSigner">
      <summary>
            Utility class to sign a PDF file.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfSigner.Reason">
      <summary>
            Gets or sets the reason for the signing.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfSigner.Location">
      <summary>
            Gets or sets the location for the signing.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfSigner.ContactInfo">
      <summary>
            Gets or sets the contact information for the signing.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfSigner.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
      <summary>
            Initialize a new instance of the <see cref="T:EO.Pdf.PdfSigner" /> class.
            </summary>
      <param name="cert">The certificate to be used to sign the PDF file.</param>
      <param name="password">The password of the certificate. Pass <b>null</b> if no password is needed.</param>
    </member>
    <member name="M:EO.Pdf.PdfSigner.#ctor(System.Byte[],System.String)">
      <summary>
            Initialize a new instance of the <see cref="T:EO.Pdf.PdfSigner" /> class.
            </summary>
      <param name="certData">Certificate data in PFX (Pkcs12) format.</param>
      <param name="password">Certificate password.</param>
    </member>
    <member name="M:EO.Pdf.PdfSigner.#ctor(System.String,System.String)">
      <summary>
            Initialize a new instance of the <see cref="T:EO.Pdf.PdfSigner" /> class.
            </summary>
      <param name="certFileName">The full path of the certificate file.</param>
      <param name="password">The password of the certificate. Pass <b>null</b> if no password is needed.</param>
    </member>
    <member name="M:EO.Pdf.PdfSigner.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Initialize a new instance of the <see cref="T:EO.Pdf.PdfSigner" /> class.
            </summary>
      <param name="cert">The certificate to be used to sign the PDF file.</param>
    </member>
    <member name="M:EO.Pdf.PdfSigner.#ctor(System.String)">
      <summary>
            Initialize a new instance of the <see cref="T:EO.Pdf.PdfSigner" /> class.
            </summary>
      <param name="certFileName">The full path of the certificate file.</param>
    </member>
    <member name="M:EO.Pdf.PdfSigner.Sign(System.Byte[])">
      <summary>
            Sign a PDF file.
            </summary>
      <param name="pdfFileData">The binary PDF file data.</param>
      <returns>Signed PDF file data.</returns>
    </member>
    <member name="M:EO.Pdf.PdfSigner.Sign(System.String,System.String)">
      <summary>
            Sign a PDF file.
            </summary>
      <param name="inputFileName">The input PDF file name.</param>
      <param name="outputFileName">The output PDF file name.</param>
    </member>
    <member name="M:EO.Pdf.PdfSigner.Sign(System.String)">
      <summary>
            Sign a PDF file.
            </summary>
      <param name="pdfFileName">The full path of the PDF file to be signed.</param>
      <remarks>
            This method overwrites <i>pdfFileName</i> with the signed version.
            </remarks>
    </member>
    <member name="T:EO.Pdf.PdfPageMode">
      <summary>
            Specifies the document's page mode.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageMode.UseNone">
      <summary>
            Neither document outline (bookmarks) nor thumbnail images are visible.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageMode.UseOutlines">
      <summary>
            Document outline (bookmarks) are visible.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageMode.UseThumbs">
      <summary>
            Thumbnail images are visible.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageMode.FullScreen">
      <summary>
            Full-screen mode with no menu bar, window controls, or any 
            other window visible.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageMode.UseAttachments">
      <summary>
            Opens the attachment window.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfPageLayout">
      <summary>
            Specifying the page layout to be used when the document is opened.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageLayout.SinglePage">
      <summary>
            Displays one page at a time. This is the default value.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageLayout.OneColumn">
      <summary>
            Displays the pages in one column.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageLayout.TwoColumnLeft">
      <summary>
            Displays the pages in two columns, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageLayout.TwoColumnRight">
      <summary>
            Displays the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageLayout.TwoPageLeft">
      <summary>
            Displays the pages two at a time, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageLayout.TwoPageRight">
      <summary>
            Displays the pages two at a time, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfViewerPreference">
      <summary>
            Contains viewer preference information.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.AutoPrint">
      <summary>
            Gets or sets a value specifying whether the print dialog
            automatically opens when then the file is opened.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.HideToolbar">
      <summary>
            Gets or sets a flag specifying whether to hide 
            the viewer application's tool bars when the 
            document is active.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.HideMenubar">
      <summary>
            Gets or sets a flag specifying whether to hide 
            the viewer application's menu bar when the 
            document is active.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.HideWindowUI">
      <summary>
            Gets or sets a flag specifying whether to hide user 
            interface elements in the document's window (such as 
            scroll bars and navigation controls), leaving only 
            the document's contents displayed.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.FitWindow">
      <summary>
            Gets or sets a flag specifying whether to resize the 
            document's window to fit the size of the first 
            displayed page.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.CenterWindow">
      <summary>
            Gets or sets a flag specifying whether to 
            position the document's window in the 
            center of the screen.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.DisplayDocTitle">
      <summary>
            Gets or sets a flag specifying whether the window's 
            title bar should display the document title taken 
            from <see cref="P:EO.Pdf.PdfDocument.Info"></see> property.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.NonFullScreenPageMode">
      <summary>
            Gets or sets the document page mode when the viewer
            application is not in full screen mode.
            </summary>
      <remarks>
            This property is meaningful only if the <see cref="P:EO.Pdf.PdfDocument.PageMode">PdfDocument.PageMode</see> 
            is set to <see cref="F:EO.Pdf.PdfPageMode.FullScreen"></see>; it is ignored otherwise.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.InitialDestination">
      <summary>
            Gets or sets the initial destination when the document is opened.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerPreference.PageLayout">
      <summary>
            Gets or sets the page layout to be used when the document is opened.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfFloatArray">
      <summary>
            Represents an array of float numbers such as a matrix.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfFloatArray.IsEmpty">
      <summary>
            Gets a value indicating whether the 
            <see cref="T:EO.Pdf.Drawing.PdfFloatArray"></see> is empty.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfFloatArray.op_Equality(EO.Pdf.Drawing.PdfFloatArray,EO.Pdf.Drawing.PdfFloatArray)">
      <summary>
            Compares two <see cref="T:EO.Pdf.Drawing.PdfFloatArray"></see> instances for equality.
            </summary>
      <param name="left">The <see cref="T:EO.Pdf.Drawing.PdfFloatArray"></see> that is to the left of the equality operator.</param>
      <param name="right">The <see cref="T:EO.Pdf.Drawing.PdfFloatArray"></see> that is to the right of the equality operator.</param>
      <returns>true if the two <see cref="T:EO.Pdf.Drawing.PdfFloatArray"></see> instance are equal; otherwise, false.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfFloatArray.op_Inequality(EO.Pdf.Drawing.PdfFloatArray,EO.Pdf.Drawing.PdfFloatArray)">
      <summary>
            Tests whether two specified <see cref="T:EO.Pdf.Drawing.PdfFloatArray"></see> instances are different.
            </summary>
      <param name="left">The <see cref="T:EO.Pdf.Drawing.PdfFloatArray"></see> that is to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:EO.Pdf.Drawing.PdfFloatArray"></see> that is to the right of the inequality operator.</param>
      <returns>true if the two <see cref="T:EO.Pdf.Drawing.PdfFloatArray"></see> instance are different; otherwise, false.</returns>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfImage">
      <summary>
            Represents a raw PDF image.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfImage.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfImage"></see> 
            class from an image file.
            </summary>
      <param name="fileName">The image file name.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfImage.#ctor(System.Drawing.Image,System.Boolean)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfImage"></see>
            class from a <see cref="T:System.Drawing.Image">System.Drawing.Image</see>
            object.
            </summary>
      <param name="image">The <see cref="T:System.Drawing.Image"></see> object.</param>
      <param name="keepImage">
        <b>true</b> to maintain a reference of the image. When this
            argument is false, <see cref="P:EO.Pdf.Drawing.PdfImage.Image"></see> returns <b>null</b>.
            </param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfImage.#ctor(System.Drawing.Image)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfImage"></see>
            class from a <see cref="T:System.Drawing.Image">System.Drawing.Image</see>
            object.
            </summary>
      <param name="image">The <see cref="T:System.Drawing.Image"></see> object.</param>
      <remarks>
            This constructor calls <see cref="M:EO.Pdf.Drawing.PdfImage.#ctor(System.Drawing.Image,System.Boolean)"></see> with
            <i>keepImage</i> set to <b>true</b>.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfImage.Image">
      <summary>
            Gets the associated <see cref="T:System.Drawing.Image">System.Drawing.Image</see> object.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfPath">
      <summary>
            Represents a PDF path.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPath.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfPath"></see> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPath.SubPaths">
      <summary>
            Gets the sub path collection.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfSubPath">
      <summary>
            Represents a sub path. 
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSubPath.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfSubPath"></see> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfSubPath.Path">
      <summary>
            Gets the <see cref="T:EO.Pdf.Drawing.PdfPath"></see> object that owns
            this sub path.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfSubPath.From">
      <summary>
            Gets or sets the starting point of the sub path.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfSubPath.Closed">
      <summary>
            Gets or sets a value indicating whether this sub path is closed.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfSubPath.Segments">
      <summary>
            Gets the sub path's segment collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfSubPath.To">
      <summary>
            Gets the ending points of the sub path.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSubPath.MoveTo(System.Drawing.PointF)">
      <summary>
            Moves the starting position.
            </summary>
      <param name="p">The new starting position.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSubPath.LineTo(System.Drawing.PointF)">
      <summary>
            Append a <see cref="T:EO.Pdf.Drawing.PdfPathLineSegment"></see> 
            from the current ending position to the new position.
            </summary>
      <param name="p">The new position.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSubPath.Rectangle(System.Drawing.RectangleF)">
      <summary>
            Append a <see cref="T:EO.Pdf.Drawing.PdfPathRectSegment"></see> into
            the sub path.
            </summary>
      <param name="rect">The rectangle that defines the segment.</param>
      <remarks>
            If used, <see cref="T:EO.Pdf.Drawing.PdfPathRectSegment"></see> must be
            the only segment in the path.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfSubPathCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.Drawing.PdfSubPath"></see> objects.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfSubPathCollection.Path">
      <summary>
            Gets the <see cref="T:EO.Pdf.Drawing.PdfPath"></see> object that owns this collection.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfPathSegment">
      <summary>
            Represents a segment in a sub path.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPathSegment.SubPath">
      <summary>
            Gets the <see cref="T:EO.Pdf.Drawing.PdfSubPath"></see> object that owns this segment.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPathSegment.Path">
      <summary>
            Gets the <see cref="T:EO.Pdf.Drawing.PdfPath"></see> object that owns the parent sub path.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPathSegment.To">
      <summary>
            Gets or sets the ending point of this segment.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfPathRectSegment">
      <summary>
            Represents a rectangle segment.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPathRectSegment.#ctor(EO.Pdf.Drawing.PdfRectangle)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfPathRectSegment"></see>
            class with the given rectangle.
            </summary>
      <param name="rect">The rectangle.</param>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPathRectSegment.Size">
      <summary>
            Gets the rectangle size.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfPathLineSegment">
      <summary>
            Represents a line segment.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPathLineSegment.#ctor(EO.Pdf.Drawing.PdfPoint)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfPathLineSegment"></see>
            class from the current sub path ending point to the new point.
            </summary>
      <param name="to">The line ending point.</param>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfPathCurveSegment">
      <summary>
            Represents a cubic Bézier curve.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPathCurveSegment.#ctor(EO.Pdf.Drawing.PdfPoint,EO.Pdf.Drawing.PdfPoint,EO.Pdf.Drawing.PdfPoint)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfPathCurveSegment"></see>
            class with the given control points and end point.
            </summary>
      <param name="cp1">Control point 1.</param>
      <param name="cp2">Control point 2.</param>
      <param name="to">The end point.</param>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPathCurveSegment.CP1">
      <summary>
            Gets or sets the first control point.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPathCurveSegment.CP2">
      <summary>
            Gets or sets the second control point.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfPathSegmentCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.Drawing.PdfPathSegment"></see> objects.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPathSegmentCollection.SubPath">
      <summary>
            Gets the <see cref="T:EO.Pdf.Drawing.PdfSubPath"></see> that owns this collection.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfPoint">
      <summary>
            Represents a point.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.#ctor">
      <summary>
            Creates a new uninitialized instance of the <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.#ctor(System.Single[])">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> class with
            the provided values.
            </summary>
      <param name="values">A two elements array that contains the x and y value.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.#ctor(System.Single,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> class
            with the given x and y value.
            </summary>
      <param name="x">The x value.</param>
      <param name="y">The y value.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.#ctor(EO.Pdf.Drawing.PdfSize)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> class
            based on a <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.
            </summary>
      <param name="size">The <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.</param>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPoint.X">
      <summary>
            Gets or sets the X value.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfPoint.Y">
      <summary>
            Gets or sets the Y value.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.op_Implicit(EO.Pdf.Drawing.PdfPoint)~System.Drawing.PointF">
      <summary>
            Converts a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object to a
            <see cref="T:System.Drawing.PointF">System.Drawing.PointF</see>
            object.
            </summary>
      <param name="p">The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.op_Implicit(System.Drawing.PointF)~EO.Pdf.Drawing.PdfPoint">
      <summary>
            Converts a <see cref="T:System.Drawing.PointF">System.Drawing.PointF</see>
            object to a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.
            </summary>
      <param name="p">The <see cref="T:System.Drawing.PointF">System.Drawing.PointF</see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.op_Implicit(EO.Pdf.Drawing.PdfPoint)~System.Drawing.SizeF">
      <summary>
            Converts a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object to a 
            <see cref="T:System.Drawing.SizeF"></see> object.
            </summary>
      <param name="p">The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.op_Implicit(System.Drawing.SizeF)~EO.Pdf.Drawing.PdfPoint">
      <summary>
            Converts a <see cref="T:System.Drawing.SizeF">System.Drawing.SizeF</see>
            object to a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.
            </summary>
      <param name="sz">The <see cref="T:System.Drawing.SizeF"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.op_Implicit(EO.Pdf.Drawing.PdfPoint)~EO.Pdf.Drawing.PdfSize">
      <summary>
            Converts a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object to a 
            <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.
            </summary>
      <param name="p">The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.op_Addition(EO.Pdf.Drawing.PdfPoint,EO.Pdf.Drawing.PdfSize)">
      <summary>
            Translates a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> by a given <see cref="T:EO.Pdf.Drawing.PdfSize"></see>.
            </summary>
      <param name="pt">The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> to translate.</param>
      <param name="sz">A <see cref="T:EO.Pdf.Drawing.PdfSize"></see> that specifies the pair of numbers to add to the coordinates of <i>pt</i>.</param>
      <returns>The translated <see cref="T:EO.Pdf.Drawing.PdfPoint"></see>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.op_Subtraction(EO.Pdf.Drawing.PdfPoint,EO.Pdf.Drawing.PdfSize)">
      <summary>
            Translates a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> by the negative of a given <see cref="T:EO.Pdf.Drawing.PdfSize"></see>.
            </summary>
      <param name="pt">The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> to translate.</param>
      <param name="sz">A <see cref="T:EO.Pdf.Drawing.PdfSize"></see> that specifies the pair of numbers to to subtract from the coordinates of <i>pt</i>.</param>
      <returns>The translated <see cref="T:EO.Pdf.Drawing.PdfPoint"></see>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.Add(EO.Pdf.Drawing.PdfPoint,EO.Pdf.Drawing.PdfSize)">
      <summary>
            Translates a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> by a given <see cref="T:EO.Pdf.Drawing.PdfSize"></see>.
            </summary>
      <param name="pt">The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> to translate.</param>
      <param name="sz">A <see cref="T:EO.Pdf.Drawing.PdfSize"></see> that specifies the pair of numbers to add to the coordinates of <i>pt</i>.</param>
      <returns>The translated <see cref="T:EO.Pdf.Drawing.PdfPoint"></see>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.Subtract(EO.Pdf.Drawing.PdfPoint,EO.Pdf.Drawing.PdfSize)">
      <summary>
            Translates a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> by the negative of a given <see cref="T:EO.Pdf.Drawing.PdfSize"></see>.
            </summary>
      <param name="pt">The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> to translate.</param>
      <param name="sz">A <see cref="T:EO.Pdf.Drawing.PdfSize"></see> that specifies the pair of numbers to to subtract from the coordinates of <i>pt</i>.</param>
      <returns>The translated <see cref="T:EO.Pdf.Drawing.PdfPoint"></see>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.Offset(System.Single,System.Single)">
      <summary>
            Translates the <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> by the specified amount.
            </summary>
      <param name="dx">The amount to offset the x-coordinate.</param>
      <param name="dy">The amount to offset the y-coordinate.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.Offset(EO.Pdf.Drawing.PdfPoint)">
      <summary>
            Translates the <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> by the specified <see cref="T:EO.Pdf.Drawing.PdfPoint"></see>.
            </summary>
      <param name="p">
            The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> used offset this <see cref="T:EO.Pdf.Drawing.PdfPoint"></see>.
            </param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.Offset(EO.Pdf.Drawing.PdfSize)">
      <summary>
            Translates the <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> by the specified <see cref="T:EO.Pdf.Drawing.PdfSize"></see>.
            </summary>
      <param name="sz">
            The <see cref="T:EO.Pdf.Drawing.PdfSize"></see> used offset this <see cref="T:EO.Pdf.Drawing.PdfPoint"></see>.
            </param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfPoint.Clone">
      <summary>
            Creates a copy of this <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfRectangle">
      <summary>
            Represents a rectangle.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfRectangle.#ctor">
      <summary>
            Creates a new uninitialized instance of the
            <see cref="T:EO.Pdf.Drawing.PdfRectangle"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfRectangle.#ctor(System.Single[])">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfRectangle"></see> class
            with the given coordinates.
            </summary>
      <param name="values">A four elements array containing
            coordinates in this order: left top x, left top y, 
            right bottom x, and right bottom y.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfRectangle"></see> class
            with the given coordinates.
            </summary>
      <param name="x1">Left top x.</param>
      <param name="y1">Left top y.</param>
      <param name="x2">Right bottom x.</param>
      <param name="y2">Right bottom y.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfRectangle.op_Implicit(EO.Pdf.Drawing.PdfRectangle)~System.Drawing.RectangleF">
      <summary>
            Converts a <see cref="T:EO.Pdf.Drawing.PdfRectangle"></see> object to a
            <see cref="T:System.Drawing.RectangleF">System.Drawing.RectangleF</see> value.
            </summary>
      <param name="rect">The <see cref="T:EO.Pdf.Drawing.PdfRectangle"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfRectangle.op_Implicit(System.Drawing.RectangleF)~EO.Pdf.Drawing.PdfRectangle">
      <summary>
            Converts a <see cref="T:System.Drawing.RectangleF">System.Drawing.RectangleF</see> object to a
            <see cref="T:EO.Pdf.Drawing.PdfRectangle"></see> value.
            </summary>
      <param name="rect">The <see cref="T:System.Drawing.RectangleF">System.Drawing.RectangleF</see> object.</param>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfRectangle.X1">
      <summary>
            Gets or sets the top left X value.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfRectangle.Y1">
      <summary>
            Gets or sets the top left Y value.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfRectangle.X2">
      <summary>
            Gets or sets the right bottom X value.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfRectangle.Y2">
      <summary>
            Gets or sets the right bottom Y value.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfRectangle.Width">
      <summary>
            Gets the rectangle width.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfRectangle.Height">
      <summary>
            Gets the rectangle height.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfRectangle.Location">
      <summary>
            Gets the top left position.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfRectangle.Size">
      <summary>
            Gets the rectangle size.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfSize">
      <summary>
            Represents a size.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.#ctor">
      <summary>
            Creates a new uninitialized instance of the <see cref="T:EO.Pdf.Drawing.PdfSize"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.#ctor(System.Single[])">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfSize"></see> class
            with the given width and height values.
            </summary>
      <param name="values">A two elements array that contains the width and height value.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.#ctor(System.Single,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfSize"></see> class
            with the given width and height values.
            </summary>
      <param name="x">The width.</param>
      <param name="y">The height.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.#ctor(EO.Pdf.Drawing.PdfPoint)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfSize"></see> class
            from a <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.
            </summary>
      <param name="p">The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.</param>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfSize.Width">
      <summary>
            Gets or sets the width.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfSize.Height">
      <summary>
            Gets or sets the height.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.op_Implicit(EO.Pdf.Drawing.PdfSize)~System.Drawing.PointF">
      <summary>
            Converts a <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object to a 
            <see cref="T:System.Drawing.PointF">System.Drawing.PointF</see> value.
            </summary>
      <param name="sz">The <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.op_Implicit(EO.Pdf.Drawing.PdfSize)~System.Drawing.SizeF">
      <summary>
            Converts a <see cref="T:System.Drawing.PointF">System.Drawing.PointF</see> value to a 
            <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.
            </summary>
      <param name="sz">The <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.op_Implicit(EO.Pdf.Drawing.PdfSize)~EO.Pdf.Drawing.PdfPoint">
      <summary>
            Converts a <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object to a 
            <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.
            </summary>
      <param name="sz">The <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.op_Addition(EO.Pdf.Drawing.PdfSize,EO.Pdf.Drawing.PdfSize)">
      <summary>
            Adds the width and height of one <see cref="T:EO.Pdf.Drawing.PdfSize"></see> 
            to the width and height of another <see cref="T:EO.Pdf.Drawing.PdfSize"></see>.
            </summary>
      <param name="sz1">The first size.</param>
      <param name="sz2">The second size</param>
      <returns>A <see cref="T:EO.Pdf.Drawing.PdfSize"></see> that is the result of the addition.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.op_Subtraction(EO.Pdf.Drawing.PdfSize,EO.Pdf.Drawing.PdfSize)">
      <summary>
            Subtracts the width and height of one <see cref="T:EO.Pdf.Drawing.PdfSize"></see> 
            from the width and height of another <see cref="T:EO.Pdf.Drawing.PdfSize"></see>.
            </summary>
      <param name="sz1">The first size.</param>
      <param name="sz2">The second size</param>
      <returns>A <see cref="T:EO.Pdf.Drawing.PdfSize"></see> that is the result of the subtraction.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.Add(EO.Pdf.Drawing.PdfSize,EO.Pdf.Drawing.PdfSize)">
      <summary>
            Adds the width and height of one <see cref="T:EO.Pdf.Drawing.PdfSize"></see> 
            to the width and height of another <see cref="T:EO.Pdf.Drawing.PdfSize"></see>.
            </summary>
      <param name="sz1">The first size.</param>
      <param name="sz2">The second size</param>
      <returns>A <see cref="T:EO.Pdf.Drawing.PdfSize"></see> that is the result of the addition.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.Subtract(EO.Pdf.Drawing.PdfSize,EO.Pdf.Drawing.PdfSize)">
      <summary>
            Subtracts the width and height of one <see cref="T:EO.Pdf.Drawing.PdfSize"></see> 
            from the width and height of another <see cref="T:EO.Pdf.Drawing.PdfSize"></see>.
            </summary>
      <param name="sz1">The first size.</param>
      <param name="sz2">The second size</param>
      <returns>A <see cref="T:EO.Pdf.Drawing.PdfSize"></see> that is the result of the subtraction.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.Offset(System.Single,System.Single)">
      <summary>
            Offsets the size by the given amount.
            </summary>
      <param name="dx">Width offset value.</param>
      <param name="dy">Height offset value.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.Offset(EO.Pdf.Drawing.PdfPoint)">
      <summary>
            Offset the size based on the given <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.
            </summary>
      <param name="p">The <see cref="T:EO.Pdf.Drawing.PdfPoint"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.Offset(EO.Pdf.Drawing.PdfSize)">
      <summary>
            Offset the size based on the given <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.
            </summary>
      <param name="sz">The <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfSize.Clone">
      <summary>
            Creates a copy of the <see cref="T:EO.Pdf.Drawing.PdfSize"></see> object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfColorSpaceType">
      <summary>
            Specifies PDF color space.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.Unknown">
      <summary>
            Unknown color space.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.DeviceGray">
      <summary>
            Gray scale.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.DeviceRGB">
      <summary>
            RGB color.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.DeviceCMYK">
      <summary>
            CMYK color.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.CalGray">
      <summary>
            A single-component CIE-based color space.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.CalRGB">
      <summary>
            A three-component CIE-based color space with only one transformation stage instead of two.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.Lab">
      <summary>
            A three-component CIE-based color space with two transformation stages.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.ICCBased">
      <summary>
            ICC (International Color Consortium) based color space.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.Indexed">
      <summary>
            Indexed color (palette based).
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.Pattern">
      <summary>
            Pattern. 
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.Separation">
      <summary>
            Separation color space.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfColorSpaceType.DeviceN">
      <summary>
            A color space that contains an arbitrary number of color components.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfColorSpace">
      <summary>
            Represents a PDF color space.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfColorSpace.Type">
      <summary>
            Gets the color space type.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColorSpace.op_Equality(EO.Pdf.Drawing.PdfColorSpace,EO.Pdf.Drawing.PdfColorSpace)">
      <summary>
            Tests whether two <see cref="T:EO.Pdf.Drawing.PdfColorSpace"></see> objects are equivalent.
            </summary>
      <param name="x">The <see cref="T:EO.Pdf.Drawing.PdfColorSpace"></see> that is to the left of the equality operator.</param>
      <param name="y">The <see cref="T:EO.Pdf.Drawing.PdfColorSpace"></see> that is to the right of the equality operator.</param>
      <returns>
        <b>true</b> if the two <see cref="T:EO.Pdf.Drawing.PdfColorSpace"></see> objects are equal; otherwise <b>false</b>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColorSpace.op_Inequality(EO.Pdf.Drawing.PdfColorSpace,EO.Pdf.Drawing.PdfColorSpace)">
      <summary>
            Tests whether two <see cref="T:EO.Pdf.Drawing.PdfColorSpace"></see> objects are different.
            </summary>
      <param name="x">The <see cref="T:EO.Pdf.Drawing.PdfColorSpace"></see> that is to the left of the inequality operator.</param>
      <param name="y">The <see cref="T:EO.Pdf.Drawing.PdfColorSpace"></see> that is to the right of the inequality operator.</param>
      <returns>
        <b>true</b> if the two <see cref="T:EO.Pdf.Drawing.PdfColorSpace"></see> objects are different; otherwise <b>false</b>.</returns>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfColor">
      <summary>
            Represents a color.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.#ctor(EO.Pdf.Drawing.PdfColorSpace)">
      <summary>
            Create an instance of the <see cref="T:EO.Pdf.Drawing.PdfColor"></see> class
            using the given color space.
            </summary>
      <param name="cs">Color space object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.#ctor(System.Single)">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Drawing.PdfColor"></see> class
            based on gray level.
            </summary>
      <param name="grayLevel">
            Gray level ranging from 0 to 1.
            </param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Drawing.PdfColor"></see> class
            based on red, green and blue value.
            </summary>
      <remarks>
        <param name="red">Red value ranging from 0 to 1.</param>
        <param name="green">Green value ranging from 0 to 1.</param>
        <param name="blue">Blue value ranging from 0 to 1.</param>
      </remarks>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.#ctor(System.Drawing.Color)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfColor"></see> class
            based on a <see cref="T:System.Drawing.Color"></see> value.
            </summary>
      <param name="color">A <see cref="T:System.Drawing.Color"></see> value.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfColor"></see> class
            using CMYK values.
            </summary>
      <param name="cyan">Cyan value ranging from 0 to 1..</param>
      <param name="magenta">Magenta value ranging from 0 to 1..</param>
      <param name="yellow">Yellow value ranging from 0 to 1..</param>
      <param name="black">Black value ranging from 0 to 1.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.#ctor(EO.Pdf.Drawing.PdfColorSpace,System.Int32)">
      <summary>
            Creates an instance of the <see cref="T:EO.Pdf.Drawing.PdfColor"></see> object
            based on the given color space and color index.
            </summary>
      <param name="colorSpace">The color space object, must be palette based.</param>
      <param name="colorIndex">The color index.</param>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfColor.IsEmpty">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EO.Pdf.Drawing.PdfColor"></see>
            object is uninitialized.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfColor.ColorSpace">
      <summary>
            Gets the color space object.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfColor.Components">
      <summary>
            Gets the color components.
            </summary>
      <remarks>
            The number of components depends on the <see cref="P:EO.Pdf.Drawing.PdfColor.ColorSpace"></see>.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.op_Equality(EO.Pdf.Drawing.PdfColor,EO.Pdf.Drawing.PdfColor)">
      <summary>
            Tests whether two <see cref="T:EO.Pdf.Drawing.PdfColor"></see> objects are equivalent.
            </summary>
      <param name="x">The <see cref="T:EO.Pdf.Drawing.PdfColor"></see> that is to the left of the equality operator.</param>
      <param name="y">The <see cref="T:EO.Pdf.Drawing.PdfColor"></see> that is to the right of the equality operator.</param>
      <returns>
        <b>true</b> if the two <see cref="T:EO.Pdf.Drawing.PdfColor"></see> objects are equal; otherwise <b>false</b>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.op_Inequality(EO.Pdf.Drawing.PdfColor,EO.Pdf.Drawing.PdfColor)">
      <summary>
            Tests whether two <see cref="T:EO.Pdf.Drawing.PdfColor"></see> objects are different.
            </summary>
      <param name="x">The <see cref="T:EO.Pdf.Drawing.PdfColor"></see> that is to the left of the inequality operator.</param>
      <param name="y">The <see cref="T:EO.Pdf.Drawing.PdfColor"></see> that is to the right of the inequality operator.</param>
      <returns>
        <b>true</b> if the two <see cref="T:EO.Pdf.Drawing.PdfColor"></see> objects are different; otherwise <b>false</b>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.op_Implicit(System.Drawing.Color)~EO.Pdf.Drawing.PdfColor">
      <summary>
            Converts a <see cref="T:System.Drawing.Color">System.Drawing.Color</see> value
            to a <see cref="T:EO.Pdf.Drawing.PdfColor"></see> object.
            </summary>
      <param name="color">The <see cref="T:System.Drawing.Color">System.Drawing.Color</see> value.</param>
      <returns>A <see cref="T:EO.Pdf.Drawing.PdfColor"></see> object that have the same RGB
            value as <i>color</i>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.op_Explicit(EO.Pdf.Drawing.PdfColor)~System.Drawing.Color">
      <summary>
            Convert a <see cref="T:EO.Pdf.Drawing.PdfColor"></see> object to a 
            <see cref="T:System.Drawing.Color">System.Drawing.Color</see> value.
            </summary>
      <param name="color">The <see cref="T:EO.Pdf.Drawing.PdfColor"></see> object.</param>
      <returns>
        <see cref="T:System.Drawing.Color">System.Drawing.Color</see> value that have the same RGB
            value as <i>color</i>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfColor.Clone">
      <summary>
            Creates a copy of this <see cref="T:EO.Pdf.Drawing.PdfColor"></see> object.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfFont">
      <summary>
            Represents a font object.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfFont.#ctor(System.Drawing.Font)">
      <summary>
            Initializes a new <see cref="T:EO.Pdf.Drawing.PdfFont"></see> object
            from a Windows <see cref="T:System.Drawing.Font"></see>
            object.
            </summary>
      <param name="font">Windows font object.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfFont.#ctor(System.String,System.Single,System.Drawing.FontStyle)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfFont"></see> class
            using the provided font name, size and style.
            </summary>
      <param name="fontName">The font name.</param>
      <param name="fontSize">The font size.</param>
      <param name="fontStyle">The font style.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfFont.#ctor(System.String,System.Single)">
      <summary>
            Create a new instance of the <see cref="T:EO.Pdf.Drawing.PdfFont"></see> class
            using the provided font name and size.
            </summary>
      <param name="fontName">The font name.</param>
      <param name="fontSize">The font size.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfFont.#ctor">
      <summary>
            Initializes a new <see cref="T:EO.Pdf.Drawing.PdfFont"></see> object.
            </summary>
      <remarks>
            This constructor initializes the <see cref="T:EO.Pdf.Drawing.PdfFont"></see>
            object with the default system font.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfFont.Name">
      <summary>
            Gets or sets the name of the font.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfFont.Style">
      <summary>
            Gets the font style.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfFont.Bold">
      <summary>
            Gets or sets a value indicating whether this font is bold.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfFont.Italic">
      <summary>
            Gets or sets a value indicating whether this font is italic.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfFont.Size">
      <summary>
            Gets or sets the font size.
            </summary>
      <remarks>
            The font size is the scaling factor used when text is rendered
            with this font. Typically one unit of the font size equals one
            "point" (1/72 inch). However this can be altered by 
            <see cref="P:EO.Pdf.Contents.PdfTextContent.TextMatrix"></see>.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfLineCapStyle">
      <summary>
            Specifies line cap style.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfLineCapStyle.Butt">
      <summary>
            Butt cap.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfLineCapStyle.Round">
      <summary>
            Round cap.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfLineCapStyle.ProjectingSquare">
      <summary>
            Projecting square cap.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfDashStyle">
      <summary>
            Represents line dash style.
            </summary>
    </member>
    <member name="F:EO.Pdf.Drawing.PdfDashStyle.Default">
      <summary>
            Gets the default dash style.
            </summary>
      <remarks>
            Default dash style renders a solid line.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfDashStyle.#ctor(System.Single[],System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.Drawing.PdfDashStyle"></see> class.
            </summary>
      <param name="pattern">The dash pattern.</param>
      <param name="phase">The dash phase.</param>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfDashStyle.Pattern">
      <summary>
            Gets the dash pattern value.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfDashStyle.Phase">
      <summary>
            Gets the dash phase value.
            </summary>
    </member>
    <member name="T:EO.Pdf.Drawing.PdfMatrix">
      <summary>
            Represents a transformation matrix.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> class as the identity matrix.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> class with the specified elements.
            </summary>
      <param name="values">An array of 6 elements.</param>
      <remarks>
        <para>
            The elements are in the following order:
            </para>
        <list type="number">
          <item>The value in the first row and first column.</item>
          <item>The value in the first row and second column.</item>
          <item>The value in the second row and first column.</item>
          <item>The value in the second row and second column.</item>
          <item>The value in the third row and first column.</item>
          <item>The value in the third row and second column.</item>
        </list>
      </remarks>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.#ctor(EO.Pdf.Drawing.PdfMatrix)">
      <summary>
            Initializes a new <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> based on
            another <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> object.
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> using the
            provided elements values.
            </summary>
      <param name="a">The value in the first row and first column.</param>
      <param name="b">The value in the first row and second column.</param>
      <param name="c">The value in the second row and first column.</param>
      <param name="d">The value in the second row and second column.</param>
      <param name="e">The value in the third row and first column.</param>
      <param name="f">The value in the third row and second column.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.NewIdentity">
      <summary>
            Creates a new identity matrix.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfMatrix.IsIdentity">
      <summary>
            Gets a value indicating whether the matrix is identity matrix.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.Clone">
      <summary>
            Creates a copy of this <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> object.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfMatrix.a">
      <summary>
            Gets or sets the value in the first row and first column.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfMatrix.b">
      <summary>
            Gets or sets the value in the first row and second column.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfMatrix.c">
      <summary>
            Gets or sets the value in the second row and first column.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfMatrix.d">
      <summary>
            Gets or sets the value in the second row and first column.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfMatrix.e">
      <summary>
            Gets or sets the value in the third row and first column.
            </summary>
    </member>
    <member name="P:EO.Pdf.Drawing.PdfMatrix.f">
      <summary>
            Gets or sets the value in the third row and first column.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.op_Implicit(EO.Pdf.Drawing.PdfMatrix)~System.Drawing.Drawing2D.Matrix">
      <summary>
            Converts a <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> object to a 
            <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see> 
            object.
            </summary>
      <param name="m">The <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> object.</param>
      <returns>A <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see>
            objects with the same elements as <i>m</i>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.op_Implicit(System.Drawing.Drawing2D.Matrix)~EO.Pdf.Drawing.PdfMatrix">
      <summary>
            Converts a <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see>  
            object to a <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> object.
            </summary>
      <param name="m">The <see cref="T:System.Drawing.Drawing2D.Matrix">System.Drawing.Drawing2D.Matrix</see> object.</param>
      <returns>A <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see>
            objects with the same elements as <i>m</i>.</returns>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.Translate(System.Single,System.Single)">
      <summary>
            Applies the specified translation vector to this <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see>.
            </summary>
      <param name="x">The x value by which to translate this <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see>.</param>
      <param name="y">The y value by which to translate this <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see>.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.Multiply(EO.Pdf.Drawing.PdfMatrix)">
      <summary>
            Multiplies the current matrix by the specified matrix.
            </summary>
      <param name="b">Matrix to multiply by.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.FlipX">
      <summary>
            Flip the current matrix horizontally.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.FlipY">
      <summary>
            Flip the current matrix vertically.
            </summary>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.Scale(System.Single,System.Single)">
      <summary>
            Applies the specified scale vector to this <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see>.
            </summary>
      <param name="x">The value by which to scale this <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> in the x-axis direction.</param>
      <param name="y">The value by which to scale this <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> in the y-axis direction.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.Rotate(System.Single)">
      <summary>
            Prepend to this <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> a clockwise rotation, 
            around the origin and by the specified angle.
            </summary>
      <param name="angle">The angle of the rotation in degrees.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.Shear(System.Single,System.Single)">
      <summary>
            Applies the specified shear vector to this <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see>.
            </summary>
      <param name="shearX">The horizontal shear factor.</param>
      <param name="shearY">The vertical shear factor.</param>
    </member>
    <member name="M:EO.Pdf.Drawing.PdfMatrix.op_Multiply(EO.Pdf.Drawing.PdfMatrix,EO.Pdf.Drawing.PdfMatrix)">
      <summary>
            Multiples two <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> objects.
            </summary>
      <param name="m1">The first <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> object.</param>
      <param name="m2">The second <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see> object.</param>
      <returns>The result matrix.</returns>
    </member>
    <member name="T:EO.Pdf.PdfDocInfo">
      <summary>
            Represents PDF file information
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocInfo.Title">
      <summary>
            Gets or sets the document title.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocInfo.Author">
      <summary>
            Gets or sets the document author.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocInfo.Subject">
      <summary>
            Gets or sets the document subject.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocInfo.Keywords">
      <summary>
            Gets or sets the keywords associated to this document.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocInfo.Creator">
      <summary>
            Gets or sets creator of the document.
            </summary>
      <remarks>
            Creator is usually set to the name of the application that
            generated the PDF file.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDocInfo.Producer">
      <summary>
            Gets or sets the producer of the document.
            </summary>
      <remarks>
            Producer is usually set to the name of the application
            that converted another file to a PDF file.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDocInfo.CreationDate">
      <summary>
            Gets or sets the file creation time.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocInfo.ModifiedDate">
      <summary>
            Gets or sets the file modified time.
            </summary>
    </member>
    <member name="T:EO.Pdf.ClientCertificate">
      <summary>
            Represents an X509 certificate that can be used for client authentication.
            </summary>
      <remarks>
            See <a href="Pdf/HtmlToPdf/ssl.html">working with secure sites</a> for more details about
            how to use this class.
            </remarks>
    </member>
    <member name="M:EO.Pdf.ClientCertificate.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.ClientCertificate"></see> class.
            </summary>
      <param name="pfxFileName">The .pfx file name that contains the certificate.</param>
      <param name="privateKeyPassword">The private key password.</param>
      <remarks>
            This constructor loads the certificate and verifies the private key password. An exception
            is thrown if either the certificate file or the password is invalid.
            </remarks>
    </member>
    <member name="T:EO.Pdf.PageBreakMode">
      <summary>
            Specifies page break mode for an element.
            </summary>
    </member>
    <member name="F:EO.Pdf.PageBreakMode.None">
      <summary>
            No special page break request.
            </summary>
    </member>
    <member name="F:EO.Pdf.PageBreakMode.BeforeAlways">
      <summary>
            Insert a page break before the element.
            </summary>
    </member>
    <member name="F:EO.Pdf.PageBreakMode.BeforeAvoid">
      <summary>
            Avoid a page break before the element.
            </summary>
    </member>
    <member name="F:EO.Pdf.PageBreakMode.AfterAlways">
      <summary>
            Insert a page break after the element.
            </summary>
    </member>
    <member name="F:EO.Pdf.PageBreakMode.AfterAvoid">
      <summary>
            Avoid a page break after the element.
            </summary>
    </member>
    <member name="F:EO.Pdf.PageBreakMode.InsideAvoid">
      <summary>
            Avoid a page break inside the element.
            </summary>
    </member>
    <member name="T:EO.Pdf.HtmlDocument">
      <summary>
            Contains information about an HTML document that is
            being converted to PDF.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlDocument.DpiX">
      <summary>
            Gets the horizontal resolution.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlDocument.DpiY">
      <summary>
            Gets the vertical resolution.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlDocument.Body">
      <summary>
            Gets the body element of the document.
            </summary>
    </member>
    <member name="M:EO.Pdf.HtmlDocument.GetElementById(System.String)">
      <summary>
            Returns the first <see cref="T:EO.Pdf.HtmlElement"></see> with the 
            specified value of the <see cref="P:EO.Pdf.HtmlElement.ID"></see> property.
            </summary>
      <param name="id">The value of the <see cref="P:EO.Pdf.HtmlElement.ID"></see> property.</param>
    </member>
    <member name="M:EO.Pdf.HtmlDocument.GetElementsByName(System.String)">
      <summary>
            Returns a collection of <see cref="T:EO.Pdf.HtmlElement"></see> based
            on the value of the <see cref="P:EO.Pdf.HtmlElement.Name"></see> property.
            </summary>
      <param name="name">The value of the <see cref="P:EO.Pdf.HtmlElement.Name"></see> property.</param>
      <remarks>
            This function returns an empty array if no match is found.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlDocument.GetElementsByName(System.Text.RegularExpressions.Regex)">
      <summary>
            Returns a collection of <see cref="T:EO.Pdf.HtmlElement"></see> whose
            <see cref="P:EO.Pdf.HtmlElement.Name"></see> property matches the given
            pattern.
            </summary>
      <param name="namePattern">The pattern to match the element's <see cref="P:EO.Pdf.HtmlElement.Name"></see> property.</param>
      <remarks>
            This function returns an empty array if no match is found.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlDocument.GetElementsByTagName(System.String)">
      <summary>
            Returns a collection of <see cref="T:EO.Pdf.HtmlElement"></see> based
            on the value of the <see cref="P:EO.Pdf.HtmlElement.TagName"></see> property.
            </summary>
      <param name="tagName">The value of the <see cref="P:EO.Pdf.HtmlElement.TagName"></see> property.</param>
      <remarks>
            This function returns an empty array if no match is found.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlDocument.GetElementsByTagName(System.Text.RegularExpressions.Regex)">
      <summary>
            Returns a collection of <see cref="T:EO.Pdf.HtmlElement"></see> whose
            <see cref="P:EO.Pdf.HtmlElement.TagName"></see> property matches the
            given pattern.
            </summary>
      <param name="tagNamePattern">The pattern to match the element's <see cref="P:EO.Pdf.HtmlElement.TagName"></see> property.</param>
      <remarks>
            This function returns an empty array if no match is found.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlDocument.GetElementsByClassName(System.String)">
      <summary>
            Returns a collection of <see cref="T:EO.Pdf.HtmlElement"></see> based
            on the value of the <see cref="P:EO.Pdf.HtmlElement.ClassName"></see> property.
            </summary>
      <param name="className">The value of the <see cref="P:EO.Pdf.HtmlElement.ClassName"></see> property.</param>
      <remarks>
            This function returns an empty array if no match is found.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlDocument.GetElementsByClassName(System.Text.RegularExpressions.Regex)">
      <summary>
            Returns a collection of <see cref="T:EO.Pdf.HtmlElement"></see> whose
            <see cref="P:EO.Pdf.HtmlElement.ClassName"></see> property match the
            given pattern.
            </summary>
      <param name="classNamePattern">The pattern to match the element's <see cref="P:EO.Pdf.HtmlElement.ClassName"></see> property.</param>
      <remarks>
            This function returns an empty array if no match is found.
            </remarks>
    </member>
    <member name="T:EO.Pdf.YRange">
      <summary>
            Represents a range on the Y axis.
            </summary>
    </member>
    <member name="M:EO.Pdf.YRange.#ctor(System.Int32,System.Int32)">
      <summary>
            Initialize a new instance of the <see cref="T:EO.Pdf.YRange" /> object.
            </summary>
      <param name="top">The top of the range.</param>
      <param name="height">The height of the range.</param>
    </member>
    <member name="P:EO.Pdf.YRange.Top">
      <summary>
            Gets the top of the range.
            </summary>
    </member>
    <member name="P:EO.Pdf.YRange.Height">
      <summary>
            Gets the height of the range.
            </summary>
    </member>
    <member name="P:EO.Pdf.YRange.Bottom">
      <summary>
            Gets the bottom of the range.
            </summary>
    </member>
    <member name="T:EO.Pdf.HtmlNode">
      <summary>
            Provides the base class for <see cref="T:EO.Pdf.HtmlElement" /> and <see cref="T:EO.Pdf.HtmlTextNode" />.
            </summary>
    </member>
    <member name="T:EO.Pdf.HtmlTextNode">
      <summary>
            Contains information about an HTML text node that
            has been converted to PDF.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlTextNode.Text">
      <summary>
            Gets the node text.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlTextNode.PageBreakLineRanges">
      <summary>
            Gets the text line ranges for page break.
            </summary>
      <remarks>
            See <a href="Pdf/HtmlToPdf/paging.html#custom">here</a> for more details on
            how to use this property.
            </remarks>
    </member>
    <member name="T:EO.Pdf.HtmlElement">
      <summary>
            Contains information about an HTML element that
            has been converted to PDF.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.TagName">
      <summary>
            Gets the element tag name.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.ID">
      <summary>
            Gets the value of the <i>id</i> attribute.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.Name">
      <summary>
            Gets the value of the <i>name</i> attribute.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.ClassName">
      <summary>
            Gets the value of the <i>class</i> attribute.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.Src">
      <summary>
            Gets the value of the <i>src</i> attribute.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.HRef">
      <summary>
            Gets the value of the <i>href</i> attribute.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.Value">
      <summary>
            Gets the value of an input element.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.InnerText">
      <summary>
            Gets the inner text of the element.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.IsVisible">
      <summary>
            Gets a value indicating whether the element is
            visible.
            </summary>
      <remarks>
            An element is invisible if it is not displayed at all
            (for example, with CSS "display:none" attribute) or
            being completely obscured by another non-transparent
            element.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlElement.Location">
      <summary>
            Gets the location of the element.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.Size">
      <summary>
            Gets the size of the element in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.VisibleRects">
      <summary>
            Gets the visible rectangles of the element.
            </summary>
      <remarks>
        <para>
            An element may have multiple visible rectangles. For example,
            a paragraph that spans into multiple lines need a rectangle
            for each line.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlElement.TargetElement">
      <summary>
            Gets the target element for a link element.
            </summary>
      <remarks>
            When the href attribute of a link element (HTML "A" element)
            is set to an anchor point (the "name" attribute of another
            "A" element), this property returns the target anchor point
            "A" element.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlElement.ChildElements">
      <summary>
            Gets all the child elements of the current element.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlElement.ChildNodes">
      <summary>
            Gets all the child nodes of the current element.
            </summary>
    </member>
    <member name="M:EO.Pdf.HtmlElement.CreateBookmark">
      <summary>
            Creates a <see cref="T:EO.Pdf.PdfBookmark"></see> object
            using this element's location and text.
            </summary>
      <remarks>
        <para>
            This function uses the element's <see cref="P:EO.Pdf.HtmlElement.InnerText"></see>
            as bookmark text.
            </para>
        <para>
          <b>Note:</b> This function only creates the <see cref="T:EO.Pdf.PdfBookmark"></see>
            object. It does not add the bookmark into the document. Thus you
            must add the bookmark into the <see cref="T:EO.Pdf.PdfDocument"></see>'s
            <see cref="P:EO.Pdf.PdfDocument.Bookmarks"></see> tree.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlElement.CreateBookmark(System.String)">
      <summary>
            Creates a <see cref="T:EO.Pdf.PdfBookmark"></see> object
            using this element's location.
            </summary>
      <param name="text">The bookmark text. Set to <b>null</b> to
            use the element's <see cref="P:EO.Pdf.HtmlElement.InnerText"></see> as bookmark text.</param>
      <remarks>
        <para>
          <b>Note:</b> This function only creates the <see cref="T:EO.Pdf.PdfBookmark"></see>
            object. It does not add the bookmark into the document. Thus you
            must add the bookmark into the <see cref="T:EO.Pdf.PdfDocument"></see>'s
            <see cref="P:EO.Pdf.PdfDocument.Bookmarks"></see> tree.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlElement.CreateLink">
      <summary>
            Creates a <see cref="T:EO.Pdf.PdfLink"></see> object
            based on this element.
            </summary>
      <remarks>
        <para>
            This function creates a <see cref="T:EO.Pdf.PdfLink"></see> object
            based on whether this element is a HTML anchor element:
            </para>
        <list type="bullet">
          <item>For a HTML anchor element that points to 
                another Url, the new <see cref="T:EO.Pdf.PdfLink"></see>'s 
                <see cref="P:EO.Pdf.PdfLink.TargetUrl"></see> will be
                initialized;
                </item>
          <item>For a HTML anchor element that points to 
                another anchor point inside the same document, the 
                new <see cref="T:EO.Pdf.PdfLink"></see>'s 
                <see cref="P:EO.Pdf.PdfLink.TargetDestination"></see> will be
                initialized;
                </item>
          <item>If the element is not a HTML anchor element,
                then neither <see cref="P:EO.Pdf.PdfLink.TargetUrl"></see> nor
                <see cref="P:EO.Pdf.PdfLink.TargetDestination"></see> will be
                initialized;
                </item>
        </list>
        <para>
            In all cases, the <see cref="T:EO.Pdf.PdfLink"></see>'s 
            <see cref="P:EO.Pdf.PdfLink.SourceRects"></see> is initialized based on
            the element's <see cref="P:EO.Pdf.HtmlElement.VisibleRects"></see>.
            </para>
        <para>
          <b>Note:</b> This function only creates the <see cref="T:EO.Pdf.PdfLink"></see>
            object. It does not add the link into the document. You can
            add the link to the document by calling <see cref="M:EO.Pdf.PdfLink.Render"></see>
            method on the returned <see cref="T:EO.Pdf.PdfLink"></see> object.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlElement.CreateLink(EO.Pdf.HtmlElement)">
      <summary>
            Creates a <see cref="T:EO.Pdf.PdfLink"></see> object
            using this element's visible rectangles and the given
            target element.
            </summary>
      <param name="targetElement">The target <see cref="T:EO.Pdf.HtmlElement"></see> object.
            This element must be in the same <see cref="T:EO.Pdf.PdfDocument"></see>.
            </param>
      <remarks>
        <para>
          <b>Note:</b> This function only creates the <see cref="T:EO.Pdf.PdfLink"></see>
            object. It does not add the link into the document. You can
            add the link to the document by calling <see cref="M:EO.Pdf.PdfLink.Render"></see>
            method on the returned <see cref="T:EO.Pdf.PdfLink"></see> object.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlElement.CreateLink(EO.Pdf.PdfPageLocation)">
      <summary>
            Creates a <see cref="T:EO.Pdf.PdfLink"></see> object
            using this element's visible rectangles and the given
            target location.
            </summary>
      <param name="targetLocation">The target location of the link.
            It must be in the same <see cref="T:EO.Pdf.PdfDocument"></see>.
            </param>
      <remarks>
        <para>
          <b>Note:</b> This function only creates the <see cref="T:EO.Pdf.PdfLink"></see>
            object. It does not add the link into the document. You can
            add the link to the document by calling <see cref="M:EO.Pdf.PdfLink.Render"></see>
            method on the returned <see cref="T:EO.Pdf.PdfLink"></see> object.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlElement.CreateLink(System.String)">
      <summary>
            Creates a <see cref="T:EO.Pdf.PdfLink"></see> object
            using this element's visible rectangles and the given
            target Url.
            </summary>
      <param name="targetUrl">The target Url of the link.
            </param>
      <remarks>
        <para>
          <b>Note:</b> This function only creates the <see cref="T:EO.Pdf.PdfLink"></see>
            object. It does not add the link into the document. You can
            add the link to the document by calling <see cref="M:EO.Pdf.PdfLink.Render"></see>
            method on the returned <see cref="T:EO.Pdf.PdfLink"></see> object.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlElement.PageBreakMode">
      <summary>
            Gets or sets the page break mode of the element.
            </summary>
      <remarks>
            See <a href="Pdf/HtmlToPdf/paging.html#custom">here</a> for more details on
            how to use this property.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlElement.PageBreakRange">
      <summary>
            Gets or sets the page break range.
            </summary>
      <remarks>
            See <a href="Pdf/HtmlToPdf/paging.html#custom">here</a> for more details on
            how to use this property.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlElement.PageBreakRangeWithMargin">
      <summary>
            Gets the page break range that includes margins.
            </summary>
      <remarks>
            Unlike <see cref="P:EO.Pdf.HtmlElement.PageBreakRange" />, this property is not used by the paging process. However
            it provides additional information that you can use to modify <see cref="P:EO.Pdf.HtmlElement.PageBreakRange" />
            property in your own <a href="Pdf/HtmlToPdf/paging.html#custom">custom paging</a> implementation.
            </remarks>
    </member>
    <member name="T:EO.Pdf.PageInfoCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.PageInfo" /> object.
            </summary>
    </member>
    <member name="M:EO.Pdf.PageInfoCollection.Contains(EO.Pdf.PageInfo)">
      <summary>
            Determines whether an element is in this collection.
            </summary>
      <param name="item">The element to be checked.</param>
      <returns>
        <b>true</b> if item is found in the collection, otherwise <b>false</b>.</returns>
    </member>
    <member name="M:EO.Pdf.PageInfoCollection.CopyTo(EO.Pdf.PageInfo[],System.Int32)">
      <summary>
            Copies the collection or a portion of it to an array.
            </summary>
      <param name="array">An array that is the destination of the elements copied.</param>
      <param name="arrayIndex">The zero-based index in <i>array</i> at which copying begins.</param>
    </member>
    <member name="P:EO.Pdf.PageInfoCollection.Count">
      <summary>
            Gets the number of elements contained in the collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.PageInfoCollection.Item(System.Int32)">
      <summary>
            Gets the element at the specified index.
            </summary>
      <param name="index">The index of the element.</param>
    </member>
    <member name="P:EO.Pdf.PageInfoCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is readonly.
            </summary>
      <remarks>
            This property always returns true.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PageInfoCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
    </member>
    <member name="M:EO.Pdf.PageInfoCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
    </member>
    <member name="T:EO.Pdf.PageInfo">
      <summary>
            Contains information about a page.
            </summary>
    </member>
    <member name="P:EO.Pdf.PageInfo.TopGap">
      <summary>
            Gets the top gap value in pixels.
            </summary>
    </member>
    <member name="M:EO.Pdf.PageInfo.PageAgain(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Run the built-in paging logic again with the option to ignore paging instructions.
            </summary>
      <param name="maxHeight">The maximum page height in pixels.</param>
      <param name="topGap">
            The amount of gap to be reserved at the top. Pass int.MinValue to use the default value, which
            is <see cref="P:EO.Pdf.Paginator.StartPosition">Paginator.StartPosition</see> for the first page and 0
            for other pages.
            </param>
      <param name="force">
            Whether to add a forced page break. When this argument is <b>true</b>, 
            all the page settings are ignored for the current page.
            </param>
      <returns>The new page height.</returns>
      <remarks>
            See <a href="Pdf/HtmlToPdf/paging.html#custom">here</a> for more details on
            how to use this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PageInfo.PageAgain(System.Int32,System.Int32)">
      <summary>
            Run the built-in paging logic again while reserving space at the top of the page.
            </summary>
      <param name="maxHeight">The maximum page height in pixels.</param>
      <param name="topGap">
            The amount of gap to be reserved at the top. Pass int.MinValue to use the default value, which
            is <see cref="P:EO.Pdf.Paginator.StartPosition">Paginator.StartPosition</see> for the first page and 0
            for other pages.
            </param>
      <returns>The new page height.</returns>
      <remarks>
            See <a href="Pdf/HtmlToPdf/paging.html#custom">here</a> for more details on
            how to use this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PageInfo.PageAgain(System.Int32)">
      <summary>
            Run the built-in paging logic again.
            </summary>
      <param name="maxHeight">The maximum page height in pixels.</param>
      <returns>The new page height.</returns>
      <remarks>
            See <a href="Pdf/HtmlToPdf/paging.html#custom">here</a> for more details on
            how to use this method.
            </remarks>
    </member>
    <member name="T:EO.Pdf.Paginator">
      <summary>
            Provides utility functions for custom paging.
            </summary>
      <remarks>
            See <a href="Pdf/HtmlToPdf/paging.html#custom">here</a> for more details on
            how to use custom paging.
            </remarks>
    </member>
    <member name="P:EO.Pdf.Paginator.Session">
      <summary>
            Gets the <see cref="T:EO.Pdf.HtmlToPdfSession" /> object that created this <see cref="T:EO.Pdf.Paginator" /> object.
            </summary>
    </member>
    <member name="P:EO.Pdf.Paginator.Document">
      <summary>
            Gets the <see cref="T:EO.Pdf.HtmlDocument" /> object that contains information about the current loaded document.
            </summary>
    </member>
    <member name="P:EO.Pdf.Paginator.ZoomLevel">
      <summary>
            Gets the zoom level.
            </summary>
    </member>
    <member name="P:EO.Pdf.Paginator.StartPosition">
      <summary>
            Gets the pixel value corresponding to <see cref="P:EO.Pdf.HtmlToPdfOptions.StartPosition">HtmlToPdfOptions.StartPosition</see>.
            </summary>
    </member>
    <member name="P:EO.Pdf.Paginator.FullPageHeight">
      <summary>
            Gets the full page height in pixels.
            </summary>
    </member>
    <member name="P:EO.Pdf.Paginator.Pages">
      <summary>
            Gets a collection of <see cref="T:EO.Pdf.PageInfo" /> objects that represents the current paging result.
            </summary>
    </member>
    <member name="T:EO.Pdf.HtmlToPdfSession">
      <summary>
            Simulates a Web session that involves multiple pages.
            </summary>
      <remarks>
        <para>
          <see cref="T:EO.Pdf.HtmlToPdfSession">
          </see> can be used to simulate a session that
            involves multiple pages. For example, it can be used to simulate the following
            steps:
            <list type="bullet"><item>Load the login page;</item><item>Enter username and password;</item><item>Submit the login page;</item><item>Load the user's order history page, which can only be accessed
                after successfully logged in;</item><item>Convert the order history page to PDF;</item></list>
            This class is often used to simulate a login session in order to convert pages
            that requires authentications. See <a href="Pdf/HtmlToPdf/Session.html">using HtmlToPdfSession</a> 
            for more details about how to use this class.
            </para>
        <para>
          <b>Note:</b> Each <see cref="T:EO.Pdf.HtmlToPdfSession"></see> object is associated with
            the thread in which it is created and can only be used in that thread. Calling
            any <see cref="T:EO.Pdf.HtmlToPdfSession"></see> methods from a different thread other than
            the one that creates the <see cref="T:EO.Pdf.HtmlToPdfSession"></see> object will throw
            an exception.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.Create">
      <summary>
            Creates a new <see cref="T:EO.Pdf.HtmlToPdfSession"></see> object.
            </summary>
      <remarks>
        <see cref="T:EO.Pdf.HtmlToPdfSession">
        </see> is an expensive object. Call <see cref="M:EO.Pdf.HtmlToPdfSession.Dispose"></see>
            to dispose the returned <see cref="T:EO.Pdf.HtmlToPdfSession"></see> object as soon as the object is
            no longer needed.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.Create(EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Creates a new <see cref="T:EO.Pdf.HtmlToPdfSession"></see> object using the specified
            <see cref="T:EO.Pdf.HtmlToPdfOptions"></see> object.
            </summary>
      <param name="options">Initial options for this session.</param>
      <remarks>
        <para>
            Use the <i>options</i> argument to preload settings such as 
            client certificate or cookies.
            </para>
        <para>
          <see cref="T:EO.Pdf.HtmlToPdfSession">
          </see> is an expensive object. Call <see cref="M:EO.Pdf.HtmlToPdfSession.Dispose"></see>
            to dispose the returned <see cref="T:EO.Pdf.HtmlToPdfSession"></see> object as soon as the object is
            no longer needed.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfSession.WebView">
      <summary>
            Returns the internal <see cref="P:EO.Pdf.HtmlToPdfSession.WebView" /> object associated to this converter.
            </summary>
      <remarks>
            This property can only be accessed inside the callback function of <see cref="M:EO.Pdf.HtmlToPdfSession.RunWebViewCallback(EO.Base.Action)" />.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.Dispose">
      <summary>
            Close the <see cref="T:EO.Pdf.HtmlToPdfSession"></see> object and release all associated resources.
            </summary>
      <remarks>
            Call this method as soon as you no longer need the <see cref="T:EO.Pdf.HtmlToPdfSession"></see> object.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfSession.Options">
      <summary>
            Gets the <see cref="T:EO.Pdf.HtmlToPdfOptions"></see> object used by this <see cref="T:EO.Pdf.HtmlToPdfSession"></see> object.
            </summary>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.LoadUrl(System.String)">
      <summary>
            Loads a Url into the session.
            </summary>
      <param name="url">The Url to be loaded.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.LoadHtml(System.String)">
      <summary>
            Loads HTML into the session.
            </summary>
      <param name="html">The HTML to be loaded.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.RunWebViewCallback(EO.WebBrowser.WebViewCallback,System.Object)">
      <summary>
            Run a <see cref="T:EO.WebBrowser.WebViewCallback" /> delegate in the context of this session.
            </summary>
      <param name="callback">The <see cref="T:EO.WebBrowser.WebViewCallback" /> delegate to run.</param>
      <param name="args">Additional arguments to be passed to your delegate.</param>
      <remarks>
        <para>
            Internally EO.Pdf use a <see cref="T:EO.WebBrowser.WebView" /> object to load the page and
            perform the conversion. You can use this method to interact with this 
            underlying <see cref="T:EO.WebBrowser.WebView" /> object directly.
            For example, you can load a page and then execute certain JavaScript in
            <see cref="T:EO.WebBrowser.WebView" /> and then perform a conversion. The following code
            demonstrates how to use this feature:
            </para>
        <code lang="C#" title="C#">
            //WebView and other related classes are defined in EO.WebBrowser 
            //namespace. Also make sure EO.WebBrowser.dll is referenced by
            //your project
            using EO.WebBrowser;
            
            using (HtmlToPdfSession session = HtmlToPdfSession.Create())
            {
                //Run a callback in the session to load a special request
                session.RunWebViewCallback((WebView webView, object args) =&gt;
                    {
                        //Create a EO.WebBrowser.Request object
                        Request request = new Request(your_special_url);
            
                        //Add some additional header entries
                        request.Headers.Add(your_special_header_name, your_special_header_value);
            
                        //Load the request
                        webView.LoadRequestAndWait(request);
            
                        return null;
                    }, null);
            
                //Perform the conversion
                session.RenderAsPDF(result_pdf_file);
            }
            </code>
        <code lang="VB" title="Visual Basic.NET">
            'WebView and other related classes are defined in EO.WebBrowser 
            'namespace. Also make sure EO.WebBrowser.dll is referenced by
            'your project
            Imports EO.WebBrowser
            
            Using session As HtmlToPdfSession = HtmlToPdfSession.Create()
            	'Run a callback in the session to load a special request
            	session.RunWebViewCallback( _
            	    Function(webView As WebView, args As Object) 
            	        'Create a EO.WebBrowser.Request object
            	        Dim request As New Request(your_special_url)
            
            	        'Add some additional header entries
            	        request.Headers.Add(your_special_header_name, your_special_header_value)
            
            	        'Load the request
            	        webView.LoadRequestAndWait(request)
            
            	        Return Nothing
            
                    End Function, _
                    Nothing)
            
            	'Perform the conversion
            	session.RenderAsPDF(result_pdf_file)
            End Using
            </code>
        <para>
            The following code demonstrates how to load a Url into the converter,
            then modify it with JavaScript before rendering the page:
            </para>
        <code lang="C#" title="C#">
            //WebView and other related classes are defined in EO.WebBrowser 
            //namespace. Also make sure EO.WebBrowser.dll is referenced by
            //your project
            using EO.WebBrowser;
            
            using (HtmlToPdfSession session = HtmlToPdfSession.Create())
            {
                //Run a callback in the session to load a special request
                session.RunWebViewCallback((WebView webView, object args) =&gt;
                {
                    //Load the Url
                    webView.LoadUrl(url_to_be_converted);
            
                    //Modify the page with JavaScript
                    webView.EvalScript(javascript_to_modify_the_page);
            
                    return null;
                }, null);
            
                //Perform the conversion
                session.RenderAsPDF(result_pdf_file);
            }
            </code>
        <code lang="VB" title="Visual Basic.NET">
            'WebView and other related classes are defined in EO.WebBrowser 
            'namespace. Also make sure EO.WebBrowser.dll is referenced by
            'your project
            Imports EO.WebBrowser
            
            Using session As HtmlToPdfSession = HtmlToPdfSession.Create()
            	'Run a callback in the session to load a special request
                'Run a callback in the session to load a special request
                session.RunWebViewCallback(Function(webView As WebView, args As Object) 
                    'Load the Url
                    webView.LoadUrl(url_to_be_converted)
            
                    'Modify the page with JavaScript
                    webView.EvalScript(javascript_to_modify_the_page)
            
                    Return Nothing
            
                End Function, Nothing)
            
                'Perform the conversion
                session.RenderAsPDF(result_pdf_file)
            End Using
            </code>
      </remarks>
      <returns>Returns the value returned by the callback.</returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.RunWebViewCallback(EO.Base.Action)">
      <summary>
            Run a <see cref="T:EO.Base.Action" /> delegate in the context of this session.
            </summary>
      <remarks>
            Inside the callback you can use <see cref="P:EO.Pdf.HtmlToPdfSession.WebView" /> property
            to access the underlying <see cref="T:EO.WebBrowser.WebView" /> object.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.Submit(System.String)">
      <summary>
            Submit the current page.
            </summary>
      <param name="submitButtonName">The name of the submit button.</param>
      <remarks>
            This method submit the page as if user has clicked the submit button.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.Submit(System.String,System.String)">
      <summary>
            Submit the current page to the specified Url.
            </summary>
      <param name="url">The target Url. Pass null (Visual Basic Nothing) to post back to the current Url.</param>
      <param name="submitButtonName">The name of the submit button.</param>
      <remarks>
            This method allows you to submit the page to a different Url than the page Url.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.Submit(System.String,System.Int32,System.Int32)">
      <summary>
            Submit the current page.
            </summary>
      <param name="submitButtonName">The submit button name.</param>
      <param name="x">The "x" position in the button.</param>
      <param name="y">The "y" position in the button.</param>
      <remarks>
            This method allows you to simulate a click on an image button. Argument <i>submitButtonName</i>
            should be the name of the image button, "x" and "y" should be the mouse click position relative
            to the left top corner of the image button.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.Submit(System.String,System.String,System.Int32,System.Int32)">
      <summary>
            Submit the current page.
            </summary>
      <param name="url">The target Url. Pass null (Visual Basic Nothing) to post back to the current Url.</param>
      <param name="submitButtonName">The submit button name.</param>
      <param name="x">The "x" position in the button.</param>
      <param name="y">The "y" position in the button.</param>
      <remarks>
            This method allows you to simulate a click on an image button. Argument <i>submitButtonName</i>
            should be the name of the image button, "x" and "y" should be the mouse click position relative
            to the left top corner of the image button.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.Submit(System.String,System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Submit the current page to the specified Url.
            </summary>
      <param name="url">The target Url. Pass null (Visual Basic Nothing) to post back to the current Url.</param>
      <param name="submitButtonName">The submit button name.</param>
      <param name="x">The "x" position in the button.</param>
      <param name="y">The "y" position in the button.</param>
      <param name="frameId">The ID of the frame to be submitted.</param>
      <remarks>
            This method is the similar to <see cref="M:EO.Pdf.HtmlToPdfSession.Submit(System.String,System.Int32,System.Int32)"></see> except that
            it allows you to submit to a different Url than the page Url.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.Fill(System.String,System.String)">
      <summary>
            Fills a form field of the given name.
            </summary>
      <param name="fieldName">The name of the form field.</param>
      <param name="fieldValue">The value of the form field.</param>
      <remarks>
            This method fills the first form field of the given name. See 
            <a href="Pdf/HtmlToPdf/Session.html">using HtmlToPdfSession</a> for more details.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.ExecScript(System.String,System.Int32)">
      <summary>
            Executes JavaScript code in the current page.
            </summary>
      <param name="script">JavaScript code to execute.</param>
      <param name="timeOut">
            Time out value in milliseconds for waiting for the return value. A negative value
            indicates an infinite wait. Zero indicates the function to return immediately without
            waiting for a return value.
            </param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.ExecScript(System.String)">
      <summary>
            Executes JavaScript code in the current page.
            </summary>
      <param name="script">The JavaScript code to execute.</param>
      <remarks>
            This method calls <see cref="M:EO.Pdf.HtmlToPdfSession.ExecScript(System.String,System.Int32)">ExecScript(string, int)</see>
            with the time out value set to 0, which instructs the function to execute the JavaScript 
            code and returns immediately without waiting for a return value.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.EscapeScriptString(System.String,System.Boolean)">
      <summary>
            Escapes a string so that it is suitable to be passed as a
            JavaScript string literal to form JavaScript code.
            </summary>
      <param name="s">The string value to be escaped.</param>
      <param name="withQuote">Whether the returned result should be enclosed in double quotes.</param>
      <remarks>
        <para>
            This is a utility function that you may find useful when formating
            JavaScript code to be passed to <see cref="M:EO.Pdf.HtmlToPdfSession.ExecScript(System.String)"></see>. For
            example, the following code calls this function when filling a form
            field:
            </para>
        <code lang="C#" title="C#">
            //Format the JavaScript code that sets the value for
            //form field 'comment'
            string script = 
                "document.getElementById('comment').value = " + 
                EscapeScriptString(UserComment, true);
                
            //Execute the JavaScript
            ExecuteScript(script);
            </code>
        <code lang="VB" title="Visual Basic.NET">
            'Format the JavaScript code that sets the value for
            'form field 'comment'
            Dim script As String = _
                "document.getElementById('comment').value = " &amp; _
                EscapeScriptString(UserComment, True)
                
            'Execute the JavaScript
            ExecuteScript(script)
            </code>
      </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.EscapeScriptString(System.String)">
      <summary>
            Escapes a string so that it is suitable to be passed as a 
            JavaScript string literal to form JavaScript code.
            </summary>
      <param name="s">The string value to be escaped.</param>
      <remarks>
            This function calls <see cref="M:EO.Pdf.HtmlToPdfSession.EscapeScriptString(System.String,System.Boolean)">EscapeScriptString(string, bool)</see> with
            <i>withQuote</i> set to true.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.GetCookies">
      <summary>
            Gets the current cookie collections.
            </summary>
      <remarks>
        <para>
            One of the primary purpose of the <see cref="T:EO.Pdf.HtmlToPdfSession"></see> class is
            to simulate an interactive session (such as user log in) in order to get
            the result cookies. For example, the following code simulate a log in
            and then get the user's authentication cookies:
            </para>
        <code lang="C#" title="C#">
            //Create a new HtmlToPdfSession object
            using (HtmlToPdfSession session = HtmlToPdfSession.Create())
            {
            
            //Load the login page
            session.LoadUrl("http://www.yoursite.com/Login.html");
            
            //Fill in the "username" and "password" form fields
            session.Fill("username", "test1234");
            session.Fill("password", "abcxyz");
            
            //Submit the page back to the server. If the login is
            //successful, this reloads the page with the newly issued
            //authentication cookies
            session.Submit();
            
            //Get all the cookies and pass these cookies to the HTML
            //to PDF converter
            HtmlToPdf.Options.Cookies = session.GetCookies();
            }
            
            //Call the HTML to PDF converter to convert a page. Since
            //the HTML to PDF converter has the cookies, it would
            //function as it has already logged in
            HtmlToPdf.ConvertUrl("http://www.yoursite.com/OrderHistory.html", "orders.pdf");
            </code>
        <code lang="VB" title="Visual Basic.NET">
            'Create a new HtmlToPdfSession object
            Using session As HtmlToPdfSession = HtmlToPdfSession.Create()
            
            	'Load the login page
            	session.Load("http://www.yoursite.com/Login.html")
            
            	'Fill in the "username" and "password" form fields
            	session.Fill("username", "test1234")
            	session.Fill("password", "abcxyz")
            
            	'Submit the page back to the server. If the login is
            	'successful, this reloads the page with the newly issued
            	'authentication cookies
            	session.Submit()
            
            	'Get all the cookies and pass these cookies to the HTML
            	'to PDF converter
            	HtmlToPdf.Options.Cookies = session.GetCookies()
            End Using
            
            'Call the HTML to PDF converter to convert a page. Since
            'the HTML to PDF converter has the cookies, it would
            'function as it has already logged in
            HtmlToPdf.ConvertUrl("http://www.yoursite.com/OrderHistory.html", "orders.pdf")
            </code>
        <para>
            Note that you only need to use this method if you wish to keep the 
            cookies and use them later. If you just need to convert the page
            right away, you can load that page directly into the <see cref="T:EO.Pdf.HtmlToPdfSession"></see>
            object and call <see cref="M:EO.Pdf.HtmlToPdfSession.RenderAsPDF(EO.Pdf.PdfDocument)"></see> to convert the page
            immediately. See <a href="Pdf/HtmlToPdf/session.html">using HtmlToPdfSession</a>
            for more details.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.GetCurrentUrl">
      <summary>
            Gets the current document Url.
            </summary>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.RenderAsPDF(EO.Pdf.PdfDocument)">
      <summary>
            Convert the current document into PDF and render the result into a <see cref="T:EO.Pdf.PdfDocument"></see> object.
            </summary>
      <param name="doc">The result <see cref="T:EO.Pdf.PdfDocument"></see> object.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.RenderAsPDF(System.String)">
      <summary>
            Convert the current document into a PDF file.
            </summary>
      <param name="fileName">The result PDF file name.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.RenderAsPDF(System.IO.Stream)">
      <summary>
            Convert the current document into PDF and save the result into a <see cref="T:System.IO.Stream"></see> object.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"></see> object to write the PDF document.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.RenderAsPDF(EO.Pdf.PdfPage)">
      <summary>
            Convert the current document into PDF and render the result into a <see cref="T:EO.Pdf.PdfPage"></see> object.
            </summary>
      <remarks>
            Use this method to output the result to an existing <see cref="T:EO.Pdf.PdfPage"></see> object.
            This method is often used to add "additional" output such as header and footer to
            the main output.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.CreatePaginator">
      <summary>
            Create a <see cref="T:EO.Pdf.Paginator" /> object that can be used to implement custom paging.
            </summary>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.RenderAsPDF(EO.Pdf.Paginator,EO.Pdf.PdfPage)">
      <summary>
            Convert the current document into PDF using paging result from the specified <see cref="T:EO.Pdf.Paginator" /> object.
            </summary>
      <param name="paginator">A <see cref="T:EO.Pdf.Paginator" /> object previously created through <see cref="M:EO.Pdf.HtmlToPdfSession.CreatePaginator" /> method.</param>
      <param name="page">Starting page of an existing <see cref="T:EO.Pdf.PdfDocument" />.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.RenderAsPDF(EO.Pdf.Paginator)">
      <summary>
            Convert the current document into PDF using paging result from the specified <see cref="T:EO.Pdf.Paginator" /> object.
            </summary>
      <param name="paginator">A <see cref="T:EO.Pdf.Paginator" /> object previously created through <see cref="M:EO.Pdf.HtmlToPdfSession.CreatePaginator" /> method.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.GetPageStyle">
      <summary>
            Returns a <see cref="T:EO.Pdf.PageStyle" /> object that contains
            information specified by @page CSS at-rule.
            </summary>
      <returns>
            Returns a <see cref="T:EO.Pdf.PageStyle" /> object if a @page CSS at-rule
            has been defined in the page. Otherwise <b>null</b>.
            </returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfSession.ResetTrigger">
      <summary>
            Reset the manual conversion trigger.
            </summary>
    </member>
    <member name="T:EO.Pdf.PageStyle">
      <summary>
            Contains information specified by @page CSS at-rule.
            </summary>
    </member>
    <member name="P:EO.Pdf.PageStyle.PageSize">
      <summary>
            Gets the page size in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.PageStyle.OutputArea">
      <summary>
            Gets the output area in inches.
            </summary>
    </member>
    <member name="M:EO.Pdf.PageStyle.Apply(EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Copies <see cref="P:EO.Pdf.PageStyle.PageSize" /> and <see cref="P:EO.Pdf.PageStyle.OutputArea" />
            to the corresponding properties of a <see cref="T:EO.Pdf.HtmlToPdfOptions" /> object.
            </summary>
      <param name="options">The <see cref="T:EO.Pdf.HtmlToPdfOptions" /> object.</param>
    </member>
    <member name="T:EO.Pdf.HtmlToPdfException">
      <summary>
            The exception that is thrown when a conversion failed.
            </summary>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfException.#ctor(System.UInt32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Pdf.HtmlToPdfException"></see> class.
            </summary>
      <param name="errorCode">The error code. See <see cref="P:EO.Pdf.HtmlToPdfException.ErrorCode"></see> for more details.</param>
      <param name="message">The error message.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Pdf.HtmlToPdfException"></see> class.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfException.ErrorCode">
      <summary>
            Gets the error code.
            </summary>
      <remarks>
            When converting an Url, this code can be standard
            HTTP error code. For example, "404" for "not found". It
            can also have a wide range of values that indicating
            other errors such as DNS error, network error or even
            generic "unspecified error". In all cases, the 
            <see cref="P:System.Exception.Message"></see> property should contain more
            information about the error.
            </remarks>
    </member>
    <member name="T:EO.Pdf.HtmlToPdfAutoFitMode">
      <summary>
            Specifies the auto-fit mode for the HTML to PDF converter.
            </summary>
    </member>
    <member name="F:EO.Pdf.HtmlToPdfAutoFitMode.None">
      <summary>
            Does not try to automatically adjust page output.
            </summary>
    </member>
    <member name="F:EO.Pdf.HtmlToPdfAutoFitMode.ShrinkToFit">
      <summary>
        <para>
            Shrink the HTML page to fit the PDF page. This option 
            does not automatically expand the HTML page if it is 
            narrower than the PDF page width. To automatically 
            shrink and expand, use <see cref="F:EO.Pdf.HtmlToPdfAutoFitMode.ScaleToFit"></see>.
            </para>
      </summary>
    </member>
    <member name="F:EO.Pdf.HtmlToPdfAutoFitMode.ScaleToFit">
      <summary>
            Scale the HTML page to fit the PDF page. Unlike
            <see cref="F:EO.Pdf.HtmlToPdfAutoFitMode.ShrinkToFit"></see> that would only shrink the
            HTML page, <see cref="F:EO.Pdf.HtmlToPdfAutoFitMode.ScaleToFit"></see> would shrink
            or expand the HTML page when needed.
            </summary>
    </member>
    <member name="T:EO.Pdf.HtmlToPdfTriggerMode">
      <summary>
            Specifies how the HTML to PDF conversion is triggered.
            </summary>
      <remarks>
            See <see cref="P:EO.Pdf.HtmlToPdfOptions.TriggerMode">HtmlToPdfOptions.TriggerMode</see>
            for more details.
            </remarks>
    </member>
    <member name="F:EO.Pdf.HtmlToPdfTriggerMode.Auto">
      <summary>
            Automatically triggers conversion as soon as the page
            contents (styles, images, etc) are loaded.
            </summary>
    </member>
    <member name="F:EO.Pdf.HtmlToPdfTriggerMode.Manual">
      <summary>
            Manually trigger the conversion from JavaScript.
            </summary>
    </member>
    <member name="F:EO.Pdf.HtmlToPdfTriggerMode.Dual">
      <summary>
            Conditions for both <see cref="F:EO.Pdf.HtmlToPdfTriggerMode.Auto"></see> and <see cref="F:EO.Pdf.HtmlToPdfTriggerMode.Manual"></see>
            must be met before conversion can start.
            </summary>
    </member>
    <member name="T:EO.Pdf.HtmlToPdfOptions">
      <summary>
            Contains various HTML to PDF conversion options.
            </summary>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfOptions.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.HtmlToPdfOptions"></see> class.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.PageSize">
      <summary>
            Specifies output page size in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.OutputArea">
      <summary>
            Specifies output area in inches.
            </summary>
      <remarks>
            Output area excludes page margins. See 
            <a href="Pdf/HtmlToPdf/page_size.html">here</a> for
            more information about this property.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.ColumnCount">
      <summary>
            Specifies how many columns per page.
            </summary>
      <remarks>
            By default, the HTML to PDF converter outputs a single
            column on every page. Set this property to enable multiple
            column output. 
            </remarks>
      <see cref="P:EO.Pdf.HtmlToPdfOptions.ColumnGapWidth">
      </see>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.ColumnGapWidth">
      <summary>
            Specifies the width of the gap between columns in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.MinLoadWaitTime">
      <summary>
            Specifies the minimum wait time in milliseconds to load a page.
            </summary>
      <remarks>
        <para>
            Some web pages dynamically creates content with
            script. In order to capture an output that is
            as accurate as how the page would look to the end
            user, the converter waits for a short period of time 
            before trying to render the PDF output after it has
            finished loading. This gap gives the page some 
            time to execute its intialization script.
            Use this parameter to control the number of milliseconds
            the converter waits before trying to render the page.
            </para>
        <para>
            The default value is 0, which instructs the converter
            to automatically use an appropriate value. To minimize
            the wait time, set this parameter to a very small vlaue
            (for example, 1 millisecond).
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.MaxLoadWaitTime">
      <summary>
            Specifies the maximum wait time in milliseconds to 
            load a page.
            </summary>
      <remarks>
        <para>
            Before the HTML page can be rendered, it must be 
            loaded. This can take some time, especially if the 
            page is being loaded from a remote server. This
            parameter controls the number of milliseconds the
            converter waits before it proceed to render the page
            anyway.
            </para>
        <para>
            The default value is 0, which instructs the converter
            to automatically use an appropriate value.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.ZoomLevel">
      <summary>
            Gets or sets the initial zooming level.
            </summary>
      <remarks>
        <para>
            Sets the initial zoom level applied during the conversion.
            For example, you can set ZoomLevel to 0.5 (50%) in
            order to fit a 10 inches wide HTML page on a 5 
            inches wide paper. 
            </para>
        <para>
            Note that this value sets the initial zoom level only. During the
            conversion the converter may choose to apply a zoom level that is 
            lower than this value if the HTML contents is too wide to fit on
            the PDF page even at this initial zoom level. Because of this, 
            value specified by this property is in fact the maximum zoom level.
            To instruct the converter to use exactly this zoom level with no
            further auto-zooming, set both <see cref="P:EO.Pdf.HtmlToPdfOptions.AutoFitX" /> 
            and <see cref="P:EO.Pdf.HtmlToPdfOptions.AutoFitY" /> to <b>None</b>.
            </para>
        <para>
            This property is automatically cleared after each conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.AutoFitX">
      <summary>
            Specifies the horizontal auto fit mode.
            </summary>
      <remarks>
        <para>
            The HTML to PDF converter considers both <see cref="P:EO.Pdf.HtmlToPdfOptions.AutoFitX"></see> and <see cref="P:EO.Pdf.HtmlToPdfOptions.AutoFitY"></see>
            to decide a single final scale factor, which applies horizontally and vertically.
            For example, if both <see cref="P:EO.Pdf.HtmlToPdfOptions.AutoFitX"></see> and <see cref="P:EO.Pdf.HtmlToPdfOptions.AutoFitY"></see>
            are set to <see cref="F:EO.Pdf.HtmlToPdfAutoFitMode.ScaleToFit"></see> and,
            </para>
        <list type="number">
          <item>The HTML page is twice as wide as the PDF output area;</item>
          <item>The HTML page height is only half of the PDF output area;</item>
        </list>
        <para>
            Then the final scale factor will be 0.5 so that the whole HTML page is shrunk 
            to half of its original size by 50% on both horizontally and vertically. 
            </para>
        <para>
            This property is automatically reset to <see cref="F:EO.Pdf.HtmlToPdfAutoFitMode.ShrinkToFit"></see>
            after every conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.AutoFitY">
      <summary>
            Specifies the vertical auto fit mode.
            </summary>
      <remarks>
        <para>
          <see cref="P:EO.Pdf.HtmlToPdfOptions.AutoFitX">
          </see> and <see cref="P:EO.Pdf.HtmlToPdfOptions.AutoFitY"></see> are both
            considered together during the conversion. See remarks for 
            <see cref="P:EO.Pdf.HtmlToPdfOptions.AutoFitX"></see> for more details.
            </para>
        <para>
            This property is automatically reset to <see cref="F:EO.Pdf.HtmlToPdfAutoFitMode.None"></see>
            after every conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.AutoBookmark">
      <summary>
            Specifies whether to automatically generates bookmarks
            based on HTML header (H1 - H6) elements.
            </summary>
      <remarks>
        <para>
            This property is automatically reset to the default (<b>false</b>)
            after each conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.NoCache">
      <summary>
            Specifies whether to use/update cache while downloading
            remote files.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.UserName">
      <summary>
            Specifies the user name if the HTML page to be converted
            requires authentication.
            </summary>
      <remarks>
            This property is automatically cleared after each conversion.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.Password">
      <summary>
            Specifies the password if the HTML page to be converted
            requires authentication.
            </summary>
      <remarks>
            This property is automatically cleared after each conversion.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.PostData">
      <summary>
            Specifies HTTP post data such as form data to be posted
            to the server while requesting the HTML page from the
            server.
            </summary>
      <remarks>
            This property overrides values set by <see cref="M:EO.Pdf.HtmlToPdfOptions.ClearPostData"></see>
            and <see cref="M:EO.Pdf.HtmlToPdfOptions.AddPostData(System.String,System.String)"></see>.
            </remarks>
      <remarks>
            This property is automatically cleared after each conversion.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.AdditionalHeaders">
      <summary>
            Specifies additional HTTP headers to be added to the
            default headers while requesting the HTML page from the
            server.
            </summary>
      <remarks>
        <para>
            This property is a string array. Each element in the array
            contains a single header entry. For example, the following
            code adds two additional headers:
            </para>
        <code lang="C#">
            //Add additional headers for referer and charset
            HtmlToPdf.Options.AdditionalHeaders = new string[]
            {
               "Referer: http://www.essentialobjects.com",
               "Accept-Charset: iso-8859-5",
            };
            </code>
        <code lang="VB">
            'Add additional headers for referer and charset
            HtmlToPdf.Options.AdditionalHeaders = New String() _
            { _
                "Referer: http://www.essentialobjects.com", _
               "Accept-Charset: iso-8859-5",
            }
            </code>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.NoScript">
      <summary>
            Specifies whether to disable script in the HTML file.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.NoLink">
      <summary>
            Specifies whether to disable links in the HTML file.
            </summary>
      <remarks>
            By default, the Html to PDF converter hyperlinks in the HTML
            file into links inside the PDF file. Setting this property to
            true turns off this feature.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.HeaderHtmlFormat">
      <summary>
            Gets or sets the header format.
            </summary>
      <remarks>
        <para>
            The format string can include HTML markups as well
            as variables that will be replaced at runtime with
            the value of the variable. A variable is marked by
            a pair of "{" and "}". The following variables are
            supported:
            </para>
        <list type="table">
          <listheader>
            <term>Variable</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>url</term>
            <description>The current url</description>
          </item>
          <item>
            <term>total_pages</term>
            <description>Total page numbers</description>
          </item>
          <item>
            <term>page_number</term>
            <description>The current page number</description>
          </item>
        </list>
        <para>
            For example, the following <b>HeaderHtmlFormat</b> 
            displays current page number at the center:
            </para>
        <code lang="HTML">
            &lt;div style="text-align:center"&gt;{page_number}&lt;/div&gt;
            </code>
        <para>
            This property is automatically cleared after each conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.HeaderHtmlPosition">
      <summary>
            Gets or sets the vertical position for the header HTML in inches.
            </summary>
      <remarks>
        <para>
            The left and right edge of the header area is the same as
            the left and right edge of <see cref="P:EO.Pdf.HtmlToPdfOptions.OutputArea"></see>. 
            <see cref="P:EO.Pdf.HtmlToPdfOptions.HeaderHtmlPosition"></see> specifies the distance
            between the top edge of the paper to the top edge of the
            header area in inches.
            </para>
        <para>
            This property is automatically cleared after each conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.FooterHtmlFormat">
      <summary>
            Gets or sets the footer format.
            </summary>
      <remarks>
        <para>
            See <see cref="P:EO.Pdf.HtmlToPdfOptions.HeaderHtmlFormat"></see> for more details.
            </para>
        <para>
            This property is automatically cleared after each conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.FooterHtmlPosition">
      <summary>
            Gets or sets the vertical position for the footer HTML in inches.
            </summary>
      <remarks>
        <para>
            The left and right edge of the footer area is the same as
            the left and right edge of <see cref="P:EO.Pdf.HtmlToPdfOptions.OutputArea"></see>. 
            <see cref="P:EO.Pdf.HtmlToPdfOptions.FooterHtmlPosition"></see> specifies the distance
            between the top edge of the paper to the top edge of the
            footer area in inches.
            </para>
        <para>
            This property is automatically cleared after each conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.HeaderHtmls">
      <summary>
            Gets or sets the HTML text for headers.
            </summary>
      <remarks>
            This property supersedes <see cref="P:EO.Pdf.HtmlToPdfOptions.HeaderHtmlFormat" />.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.FooterHtmls">
      <summary>
            Gets or sets the HTML text for footers.
            </summary>
      <remarks>
            This property supersedes <see cref="P:EO.Pdf.HtmlToPdfOptions.FooterHtmlFormat" />.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.StartPageIndex">
      <summary>
            Gets or set the starting page index.
            </summary>
      <remarks>
        <para>
            By default, a new conversion automatically starts a new page
            while rendering to a <see cref="T:EO.Pdf.PdfDocument"></see> object. 
            Set this property to a non-negative value to instruct the 
            converter to start from the specified page.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.StartPosition">
      <summary>
            Gets or sets the starting Y offset in inches on the first page.
            </summary>
      <remarks>
        <para>
            The initial value for this property is 0, which means a new 
            conversion always starts at the top of the page. Setting this 
            value to a positive value instructs the converter to start from 
            the middle of the page instead of from the top. For example, 
            setting <b>StartPosition</b> to 1 would start output at 1 
            inch below the top boundary of <see cref="P:EO.Pdf.HtmlToPdfOptions.OutputArea"></see>
            (if the page has a top margin of 1 inch, then the start position
            is 2 inches from the top edge of the paper).
            </para>
        <para>
            You can use this property together with 
            <see cref="P:EO.Pdf.HtmlToPdfResult.LastPageIndex">HtmlToPdfResult.LastPageIndex</see> and 
            <see cref="P:EO.Pdf.HtmlToPdfResult.LastPosition">HtmlToPdfResult.LastPosition</see>
            to render multiple HTML page/snippets continuously. 
            For example, the following code would render 
            "paragraph2" immediately after "paragrah1" on the same page as if
            they were rendered with a single call.
            </para>
        <code lang="C#">
            //Render some text.
            EO.Pdf.HtmlToPdfResult result = 
                EO.Pdf.HtmlToPdf.ConverHtml("&lt;p&gt;paragraph1&lt;/p&gt;", doc);
            
            //Follow the previous output immediately
            EO.Pdf.HtmlToPdf.Options.StartPageIndex = result.LastPageIndex;
            EO.Pdf.HtmlToPdf.Options.StartPosition = result.LastPosition;
            //You can also replace the above code with 
            //EO.Pdf.HtmlToPdf.Options.Follow(result);
            
            //render some additional text. This block will follow
            //the previous block immediately on the same page
            EO.Pdf.HtmlToPdf.ConverHtml("&lt;p&gt;paragraph2&lt;/p&gt;", doc);
            </code>
        <code lang="VB">
            'Render some text
            EO.Pdf.HtmlToPdfResult result = _
                EO.Pdf.HtmlToPdf.ConverHtml("&lt;p&gt;paragraph1&lt;/p&gt;", doc)
            
            'Follow the previous output immediately
            EO.Pdf.HtmlToPdf.Options.StartPageIndex = result.LastPageIndex
            EO.Pdf.HtmlToPdf.Options.StartPosition = result.LastPosition
            'You can also replace the above code with 
            'EO.Pdf.HtmlToPdf.Options.Follow(result)
            
            'render some additional text. This block will follow
            'the previous block immediately on the same page
            EO.Pdf.HtmlToPdf.ConverHtml("&lt;p&gt;paragraph2&lt;/p&gt;", doc)
            </code>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.StartColumnIndex">
      <summary>
            Gets or sets the start column index.
            </summary>
      <remarks>
        <para>
            When <see cref="P:EO.Pdf.HtmlToPdfOptions.ColumnCount"></see> is set to a value greater
            than 0, this property and <see cref="P:EO.Pdf.HtmlToPdfOptions.StartPosition"></see>
            determine the start position of the output.
            </para>
        <para>
            By default, <see cref="P:EO.Pdf.HtmlToPdfOptions.StartPosition" /> indicates the start position
            of the first column of the output. Set this property to -1 to start
            from the <see cref="P:EO.Pdf.HtmlToPdfOptions.StartPosition" /> on every column of the first page.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.BaseUrl">
      <summary>
            Gets or sets the base Url when converting HTML text.
            </summary>
      <remarks>
        <para>
            Base Url specifies an explicit URL used to resolve links and 
            references to external sources such as images and style sheets.
            while converting HTML text. For example, the following code
            convert EO logo:
            <code lang="C#">
            //Set BaseUrl so we do not need to specify the full
            //Url in the HTML to be converted
            EO.Pdf.HtmlToPdf.Options.BaseUrl = "http://www.essentialobjects.com/images/";
            
            //Convert HTML. Note the img's src attribute does
            //not contain the full Url
            EO.Pdf.HtmlToPdf.ConvertHtml("&lt;img src='logo.gif' /&gt;", "eo_logo.pdf");
            </code><code lang="VB">
            'Set BaseUrl so we do not need to specify the full
            'Url in the HTML to be converted
            EO.Pdf.HtmlToPdf.Options.BaseUrl = "http://www.essentialobjects.com/images/"
            
            'Convert HTML. Note the img's src attribute does
            'not contain the full Url
            EO.Pdf.HtmlToPdf.ConvertHtml("&lt;img src='logo.gif' /&gt;", "eo_logo.pdf")
            </code>
            This property is only used by 
            <a href="EO.Pdf.HtmlToPdf.ConvertHtml_overloads.html">HtmlToPdf.ConvertHtml</a>. It is ignored when
            converting Url. 
            </para>
        <para>
            This property is automatically cleared after each conversion so you must set it
            again if you wish to use it for the next conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.JpegQualityLevel">
      <summary>
            Specifies the JPEG compression quality level.
            </summary>
      <remarks>
        <para>
            Valid values include -1 and any value ranging from 0 to 100. 
            <list type="bullet"><item>Setting this value to 1 to 100 to explicitly specify JPEG 
                compression level. A quality level of 0 corresponds to the 
                greatest compression (worse image quality), and a quality level 
                of 100 corresponds to the least compression (better image quality).
                </item><item>Setting this value to 0 to use the default compression
                level.</item><item>Setting this value to -1 to use lossless JPEG compression.</item></list></para>
        <para>
        </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.AutoAdjustForDPI">
      <summary>
            Specifies whether to automatically adjust output based on the
            current system's DPI settings.
            </summary>
      <remarks>
            The default value is <b>false</b>.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.AllowLocalAccess">
      <summary>
            Specifies whether to allow access to local files.
            </summary>
      <remarks>
        <para>
            By default, the converter can access local files. For example, 
            the following code would need to access local file "c:\hello.gif"
            in order to render the image correctly:
            </para>
        <code lang="C#">
            HtmlToPdf.ConvertHtml("&lt;img src='c:\\hello.gif' /&gt;", pdfFile);
            </code>
        <code lang="VB">
            HtmlToPdf.ConvertHtml("&lt;img src='c:\hello.gif' /&gt;", pdfFile)
            </code>
        <para>
            This can be a security risk if the converter is running on a server.
            In that case you should set this property to false. When this
            property is set to false, local access is still allowed if 
            <see cref="P:EO.Pdf.HtmlToPdfOptions.BaseUrl"></see> is a local path.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.TriggerMode">
      <summary>
            Gets or sets the condition that triggers the HTML to PDF conversion.
            </summary>
      <remarks>
        <para>
            The default value is <see cref="F:EO.Pdf.HtmlToPdfTriggerMode.Auto"></see>,
            which means the HTML to PDF converter will wait for all page contents
            to be loaded (CSS, images, etc) before starting conversion. You
            can override this behavior by setting <see cref="P:EO.Pdf.HtmlToPdfOptions.TriggerMode"></see>
            to <see cref="F:EO.Pdf.HtmlToPdfTriggerMode.Manual"></see> or
            <see cref="F:EO.Pdf.HtmlToPdfTriggerMode.Dual"></see>.
            </para>
        <para>
            When <see cref="P:EO.Pdf.HtmlToPdfOptions.TriggerMode"></see> is set to either 
            <see cref="F:EO.Pdf.HtmlToPdfTriggerMode.Manual"></see> or
            <see cref="F:EO.Pdf.HtmlToPdfTriggerMode.Dual"></see>, you must manually
            trigger the conversion from JavaScript by calling the following
            code:
            </para>
        <code lang="js">
            eoapi.convert();
            </code>
        <para>
            If you do not call <i>eoapi.convert()</i> in your page, then the
            conversion will not start. It will eventually fail with a time out
            error.
            </para>
        <para>
            When <see cref="P:EO.Pdf.HtmlToPdfOptions.TriggerMode"></see> is set to 
            <see cref="F:EO.Pdf.HtmlToPdfTriggerMode.Manual"></see>, the converter
            will start immediately as soon as <i>eoapi.convert()</i> is called,
            regardless whether all page contents are loaded or not. When
            <see cref="P:EO.Pdf.HtmlToPdfOptions.TriggerMode"></see> is set to 
            <see cref="F:EO.Pdf.HtmlToPdfTriggerMode.Dual"></see>, the converter
            will still wait for page contents to be loaded. The conversion
            will start only after page contents are loaded and <i>eoapi.convert()</i>
            is called.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.FirstPageNumber">
      <summary>
            Gets or sets the page number for the first page.
            </summary>
      <remarks>
            The default value is 1. This value is being used as the base number
            for the <i>page_number</i> variable in <see cref="P:EO.Pdf.HtmlToPdfOptions.HeaderHtmlFormat"></see>
            and <see cref="P:EO.Pdf.HtmlToPdfOptions.FooterHtmlFormat"></see>.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.FirstHeaderFooterPageIndex">
      <summary>
            Gets or sets the first page on which header and footer should be added
            (through <see cref="P:EO.Pdf.HtmlToPdfOptions.HeaderHtmlFormat"></see> and <see cref="P:EO.Pdf.HtmlToPdfOptions.FooterHtmlFormat"></see>).
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.VisibleElementIds">
      <summary>
            Gets or sets a list of visible element Ids.
            </summary>
      <remarks>
        <para>
            Use this property to render a portion of the page instead of the
            full page. For example, with the following HTML file:
            <code lang="HTML">
            &lt;html&gt;
                &lt;body&gt;
                    ....header....
                    &lt;div id="contents"&gt;
                        ....main contents.....
                    &lt;/div&gt;
                    ....footer....
                &lt;/body&gt;
            &lt;/html&gt;
            </code>
            If you only wish to render the main contents to PDF, you can
            set <see cref="P:EO.Pdf.HtmlToPdfOptions.VisibleElementIds"></see> to "contents" so that
            only the element whose <b>id</b> property is set to "contents" 
            will be rendered (in this case a DIV element).
            </para>
        <para>
            To specify multiple visible element Ids, use ";" to separate them.
            For example, "menu;contents;".
            </para>
        <para>
            If you use ASP.NET, be aware that this property takes the 
            client side DHTML element ID, not the ASP.NET server side control ID. 
            Usually you can use the server control's <b>ClientID</b> property
            to get the corresponding client side DHTML element ID.
            </para>
        <para>
          <see cref="P:EO.Pdf.HtmlToPdfOptions.InvisibleElementIds">
          </see> can be used together with
            this property to explicitly hides certain elements in the "visible"
            area.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.InvisibleElementIds">
      <summary>
            Gets or sets a list of invisible element Ids.
            </summary>
      <remarks>
        <para>
            Use this property to explicitly hide certain elements. For example,
            if you wish to hide the "Print" button in your PDF, then you can
            set this property to the ID of the "Print" button.
            </para>
        <para>
            To specify multiple visible element Ids, use ";" to separate them.
            For example, "menu;contents;".
            </para>
        <para>
            If you use ASP.NET, be aware that this property takes the 
            client side DHTML element ID, not the ASP.NET server side control ID. 
            Usually you can use the server control's <b>ClientID</b> property
            to get the corresponding client side DHTML element ID.
            </para>
        <para>
            This property is often used together with <see cref="P:EO.Pdf.HtmlToPdfOptions.VisibleElementIds"></see>.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.GeneratePageImages">
      <summary>
            Gets or sets a value indicating whether to automatically generate
            page images.
            </summary>
      <remarks>
            When this property is set to <b>true</b>, the <see cref="P:EO.Pdf.HtmlToPdfResult.PageImages"></see>
            property of the <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object returned by ConvertHtml/ConvertUrl
            methods contains an array of page images.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.RepeatTableHeaderAndFooter">
      <summary>
            Gets or sets a value indicating whether the HTML to PDF converter
            should automatically repeat table header and footer.
            </summary>
      <remarks>
        <para>
            If a table spans over multiple pages and this property is true,
            the HTML to PDF converter will automatically repeat <i>thead</i> and
            <i>tfoot</i> rows on every page. Setting this property to false
            to prevent such row from being repeated.
            </para>
        <para>
            This property is automatically reset to <b>true</b>
            after every conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.SSLVerificationMode">
      <summary>
            Gets or sets how SSL certificate should be verified.
            </summary>
      <remarks>
        <para>
            The default value is <see cref="P:EO.Pdf.HtmlToPdfOptions.SSLVerificationMode">SSLVerificationMode.None</see>. 
            See <a href="Pdf/HtmlToPdf/ssl.html">working with secure sites</a> for more details about
            how to use this property.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.ClientCertificate">
      <summary>
            Gets or sets the client certificate used to communicate with the server.
            </summary>
      <remarks>
            See <a href="Pdf/HtmlToPdf/ssl.html">working with secure sites</a> for more details about
            how to use this property.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.ProxyInfo">
      <summary>
            Gets or sets the proxy information.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.UserStyleSheet">
      <summary>
            Gets or sets the additional style sheets to be applied to the document to be converted.
            </summary>
      <remarks>
        <para>
            Setting this property to a string that contains one or more style rules
            applies the style rules to the document to be converted. For example, you 
            can set it to
            <code lang="CSS" title="CSS">
            body { font-size: 20px; }
            </code>
            to change the document's default font size to 20px.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.JSInitCode">
      <summary>
            Gets or sets the additional JavaScript code to be executed in the document to be converted.
            </summary>
      <remarks>
        <para>
            This code is run before any other JavaScript code in the page. 
            </para>
        <para>
            This property is automatically cleared after each conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.ThrowOnHttpError">
      <summary>
            Gets or sets a value indicating whether the conversion should fail if a HTTP error occurred.
            </summary>
      <remarks>
            By default, the conversion will still succeed even if a HTTP error occurred. For example,
            if the converter tries to access an unauthorized page, the web server may return
            "403 - Forbidden" HTTP error but also respond a custom and user friendly page
            informing the user that they are not authorized to access the requested page. In this case 
            by default the page will be still converted to PDF and the conversion would still succeed. 
            Setting this property to <b>true</b> to throw an exception in such case.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.Cookies">
      <summary>
            Gets or sets the collection of cookies used for the conversion.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.BeforeRenderPage">
      <summary>
            Gets or sets a function to be called before contents
            are rendered on a page.
            </summary>
      <remarks>
        <para>
            You can use this property to implement watermark, which
            is displayed below the "normal" output.
            </para>
        <para>
            This property is automatically cleared after each conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.AfterRenderPage">
      <summary>
            Gets or sets a function to be called after contents
            are rendered on a page.
            </summary>
      <remarks>
        <para>
            You can use this property to output additional contents
            (such as custom page header and footer) on every page.
            </para>
        <para>
            This property is automatically cleared after each conversion.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.CertificateError">
      <summary>
            Gets or sets a function to be called when a server side certificate error occurs.
            </summary>
      <remarks>
            This property is not used by the <a href="Pdf/Install/old_engine.html">classic engine</a>.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfOptions.ClearPostData">
      <summary>
            Clears post data.
            </summary>
      <remarks>
            You can either call <see cref="M:EO.Pdf.HtmlToPdfOptions.ClearPostData"></see>
            and <see cref="M:EO.Pdf.HtmlToPdfOptions.AddPostData(System.String,System.String)"></see> to set HTTP post data,
            or set <see cref="P:EO.Pdf.HtmlToPdfOptions.PostData"></see> directly. When
            <see cref="P:EO.Pdf.HtmlToPdfOptions.PostData"></see> is set, values set by
            <see cref="M:EO.Pdf.HtmlToPdfOptions.ClearPostData"></see> and <see cref="M:EO.Pdf.HtmlToPdfOptions.AddPostData(System.String,System.String)"></see>
            are ignored.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfOptions.AddPostData(System.String,System.String)">
      <summary>
            Add a post variable.
            </summary>
      <param name="name">Variable name.</param>
      <param name="value">Variable value.</param>
      <remarks>
            You can either call <see cref="M:EO.Pdf.HtmlToPdfOptions.ClearPostData"></see>
            and <see cref="M:EO.Pdf.HtmlToPdfOptions.AddPostData(System.String,System.String)"></see> to set HTTP post data,
            or set <see cref="P:EO.Pdf.HtmlToPdfOptions.PostData"></see> directly. When
            <see cref="P:EO.Pdf.HtmlToPdfOptions.PostData"></see> is set, values set by
            <see cref="M:EO.Pdf.HtmlToPdfOptions.ClearPostData"></see> and <see cref="M:EO.Pdf.HtmlToPdfOptions.AddPostData(System.String,System.String)"></see>
            are ignored.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.RetrieveNodeText">
      <summary>
            Gets or sets a value specifying whether the HTML node text is retrieved
            so that <see cref="P:EO.Pdf.HtmlElement.InnerText">HtmlElement.InnerText</see> can
            be used to return the element text.
            </summary>
      <remarks>
            The default value is <b>true</b>.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfOptions.UsePrintMedia">
      <summary>
            Gets or sets a value indicating whether print media should be used.
            </summary>
      <remarks>
        <para>
            By default the PDF converter uses screen media. Setting this property
            to true to use print media instead.
            </para>
        <para>
            This property is automatically reset to false after every conversion.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfOptions.Follow(EO.Pdf.HtmlToPdfResult)">
      <summary>
            Set <see cref="P:EO.Pdf.HtmlToPdfOptions.StartPageIndex"></see> and <see cref="P:EO.Pdf.HtmlToPdfOptions.StartPosition"></see>
            based on the previous conversion result so that output of 
            the next conversion immediately follows output of the
            previous conversion.
            </summary>
      <param name="result">The previous conversion result data.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfOptions.SyncZoomLevel(EO.Pdf.HtmlToPdfResult)">
      <summary>
            Instructs the next conversion to use the same zoom level as the
            previous conversion.
            </summary>
      <param name="result">The previous conversion result data.</param>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfOptions.Serialize">
      <summary>
            Save the options as a byte array.
            </summary>
      <returns>The serialized result.</returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfOptions.Deserialize(System.Byte[])">
      <summary>
            Recreate a <see cref="T:EO.Pdf.HtmlToPdfOptions" /> object based on the data previous returned by <see cref="M:EO.Pdf.HtmlToPdfOptions.Serialize" />.
            </summary>
      <param name="data">Data previous returned by <see cref="M:EO.Pdf.HtmlToPdfOptions.Serialize" />.</param>
      <returns>The new <see cref="T:EO.Pdf.HtmlToPdfOptions" /> object.</returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdfOptions.CollectPerfData">
      <summary>
            Specifies that performance data should be collected for conversions using this <see cref="T:EO.Pdf.HtmlToPdfOptions" /> object.
            </summary>
    </member>
    <member name="T:EO.Pdf.HtmlToPdfResult">
      <summary>
            Contains HTML to PDF conversion result.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.HtmlDocument">
      <summary>
            Gets the <see cref="P:EO.Pdf.HtmlToPdfResult.HtmlDocument"></see> object created during the conversion.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.PdfDocument">
      <summary>
            Gets the <see cref="P:EO.Pdf.HtmlToPdfResult.PdfDocument"></see> object used during the conversion.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.StartPageIndex">
      <summary>
            Gets the start page index.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.StartColumnIndex">
      <summary>
            Gets the start column index.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.StartPosition">
      <summary>
            Gets the start Y position in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.LastPageIndex">
      <summary>
            Gets the last rendered page index.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.LastColumnIndex">
      <summary>
            Gets the last column index.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.LastPosition">
      <summary>
            Gets the last Y position in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.PageImages">
      <summary>
            Get the page images.
            </summary>
      <remarks>
            This property is only valid when <see cref="P:EO.Pdf.HtmlToPdfOptions.GeneratePageImages"></see>
            is set to <b>true</b>. When <see cref="P:EO.Pdf.HtmlToPdfOptions.GeneratePageImages"></see>
            is set to <b>false</b>, this property returns <b>null</b> (Visual Basic <b>Nothing</b>).
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdfResult.ZoomLevel">
      <summary>
            Returns the zoom level automatically applied by the converter.
            </summary>
      <remarks>
            When the web page is wider than the PDF page width, the converter automatically scales
            the web page to fit into the PDF page. This property returns the zoom level applied
            during this process.
            </remarks>
    </member>
    <member name="T:EO.Pdf.SSLVerificationMode">
      <summary>
            Specifies how to verify a server SSL certificate.
            </summary>
    </member>
    <member name="F:EO.Pdf.SSLVerificationMode.None">
      <summary>
            Do not verify SSL certificate against a trusted certificate authority. This allows
            you to use self-signed test certificate.
            </summary>
    </member>
    <member name="F:EO.Pdf.SSLVerificationMode.VerifyCertificate">
      <summary>
            Verify the certificate against a trusted certificate authority only without checking
            whether the intended host name for the certificate matches the actual host name. For
            example, a certificate for "www.production.com" will be accepted even if it is being used
            on "www.test.com". Use this option if you have a valid certificate and wish to test it
            in your test environment.
            </summary>
    </member>
    <member name="F:EO.Pdf.SSLVerificationMode.VerifyHost">
      <summary>
            Verify the certificate against a trusted certificate authority, and also verify
            the host name for the certificate. This ensures the certificate is authentic and
            also ensures it is used on the intended site.
            </summary>
    </member>
    <member name="T:EO.Pdf.HtmlToPdf">
      <summary>
            HTML to PDF converter.
            </summary>
      <remarks>
        <para>
            Use this class to convert any Web page Url or HTML text
            to a PDF file, to a <see cref="T:System.IO.Stream"></see> or 
            to a <see cref="T:EO.Pdf.PdfPage"></see>. For example, the following code 
            convert Google's home page to a PDF file named 
            "google_home_page.pdf":
            </para>
        <code lang="C#">
            //Convert a Url to PDF file
            HtmlToPdf.ConvertUrl("http://www.google.com", "google_home_page.pdf");
            </code>
        <code lang="VB">
            'Convert a Url to PDF file
            HtmlToPdf.ConvertUrl("http://www.google.com", "google_home_page.pdf")
            </code>
        <para>
            You can also configure various options through the
            <see cref="T:EO.Pdf.HtmlToPdf">HtmlToPdf</see> object's <see cref="P:EO.Pdf.HtmlToPdf.Options"></see>
            property. For example, the following code set
            the output page size to be A3:
            </para>
        <code lang="C#">
            //Set output page size
            HtmlToPdf.Options.PageSize = PdfPageSizes.A3;
            
            //Convert the Url
            HtmlToPdf.ConvertUrl("http://www.google.com", "google_home_page.pdf");
            </code>
        <code lang="VB">
            'Set output page size
            HtmlToPdf.Options.PageSize = PdfPageSizes.A3
            
            'Convert the Url
            HtmlToPdf.ConvertUrl("http://www.google.com", "google_home_page.pdf")
            </code>
        <para>
            In addition to converting Url, you can also convert an HTML file
            or HTML markup directly. The following code convert HTML file 
            "c:\hello.html" or HTML markup "&lt;b&gt;Hello!&lt;/b&gt;" directly:
            </para>
        <code lang="C#">
            //Convert a HTML file to PDF file
            HtmlToPdf.ConvertUrl("c:\\hello.html", "hello.pdf");
            
            //Convert HTML markup to PDF file
            HtmlToPdf.ConvertHtml("&lt;b&gt;Hello!&lt;/b&gt;", "hello.pdf");
            </code>
        <code lang="VB">
            'Convert a HTML file to PDF file
            HtmlToPdf.ConvertUrl("c:\hello.html", "hello.pdf")
            
            'Convert HTML markup to PDF file
            HtmlToPdf.ConvertHtml("&lt;b&gt;Hello!&lt;/b&gt;", "hello.pdf")
            </code>
        <para>
            You can convert Url or HTML markup to a physical file or directly to an output
            <see cref="T:System.IO.Stream"></see> or <see cref="T:EO.Pdf.PdfPage"></see> without
            creating a PDF file. See 
            <a href="EO.Pdf.HtmlToPdf.ConvertUrl_overloads.html">ConvertUrl</a> and
            <a href="EO.Pdf.HtmlToPdf.ConvertHtml_overloads.html">ConvertHtml</a> 
            for more details.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdf.Options">
      <summary>
            Gets the <see cref="T:EO.Pdf.HtmlToPdfOptions"></see> object that
            contains various conversion options.
            </summary>
      <remarks>
            This property is multi-thread safe. A different 
            <see cref="T:EO.Pdf.HtmlToPdfOptions"></see> object is 
            maintained for each thread.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdf.DebugConsole">
      <summary>
            Gets or sets a <see cref="T:System.IO.TextWriter"></see> object that can used to output
            debug messages during the conversion.
            </summary>
      <remarks>
        <para>
            Set this property if you wish to receive debug messages such as JavaScript
            error messages or message that you explicitly output in your code. For example,
            the following code set the HTML to PDF converter to output debug message to
            the standard output window:
            </para>
        <code lang="C#" title="C#">
            //Display debug messages on the standard output stream
            HtmlToPdf.DebugConsole = Console.Out;
            </code>
        <code lang="VB" title="Visual Basic.NET">
            'Display debug messages on the standard output stream
            HtmlToPdf.DebugConsole = Console.Out
            </code>
        <para>
            Once you call the above code, you can use the following JavaScript code in
            your page to output debug messages:
            </para>
        <code lang="C#" title="JavaScript">
            //Write debug message to the debug console
            console.log("hello! I am called!");
            </code>
      </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdf.MaxConcurrentTaskCount">
      <summary>
            Gets or sets the maximum number of concurrent 
            conversion allowed at the same time.
            </summary>
    </member>
    <member name="P:EO.Pdf.HtmlToPdf.CacheFolder">
      <summary>
            Gets or sets the folder in which cache file directories should be created.
            </summary>
      <remarks>
            By default, EO.Pdf creates cache file directory in the current user's temp
            directory. Use this property to override this location.
            </remarks>
    </member>
    <member name="P:EO.Pdf.HtmlToPdf.Result">
      <summary>
            Gets the last HTML to PDF result.
            </summary>
      <remarks>
            To avoid permanently keeping the result in memory even when it's no longer needed, 
            this property is automatically cleared after a certain period of time. As such it 
            is recommended that you immediately use this property after the conversion and call 
            ClearResult when this property is no longer needed. 
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,EO.Pdf.PdfDocument)">
      <summary>
            Convert a Web page into PDF and write the output
            to a <see cref="T:EO.Pdf.PdfDocument"></see>.
            </summary>
      <param name="url">The Url of the page.</param>
      <param name="doc">The output <see cref="T:EO.Pdf.PdfDocument"></see> object.</param>
      <remarks>
            You can use call this method multiple times on a single
            <see cref="T:EO.Pdf.PdfDocument"></see> object to merge multiple Web
            pages into a single PDF file.
            </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,EO.Pdf.PdfDocument,EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Convert a Web page into PDF and write the output
            to a <see cref="T:EO.Pdf.PdfDocument"></see>.
            </summary>
      <param name="url">The Url of the page.</param>
      <param name="doc">The output <see cref="T:EO.Pdf.PdfDocument"></see> object.</param>
      <param name="options">
            The conversion options that would override 
            <see cref="P:EO.Pdf.HtmlToPdf.Options"></see> if specified.
            </param>
      <remarks>
            You can call this method multiple times on a single
            <see cref="T:EO.Pdf.PdfDocument"></see> object to merge multiple Web
            pages into a single PDF file.
            </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,EO.Pdf.PdfPage)">
      <summary>
            Convert a Web page into a PDF and write the
            output to a <see cref="T:EO.Pdf.PdfPage"></see>.
            </summary>
      <param name="url">The Url of the page.</param>
      <param name="page">The <see cref="T:EO.Pdf.PdfPage"></see> object that receives the output.</param>
      <remarks>
            Use this method to render a Web page into a specific
            <see cref="T:EO.Pdf.PdfPage"></see>. Output beyond the visible
            page area will be clipped.
            </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,EO.Pdf.PdfPage,EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Convert a Web page into a PDF and write the
            output to a <see cref="T:EO.Pdf.PdfPage"></see>.
            </summary>
      <param name="url">The Url of the page.</param>
      <param name="page">The <see cref="T:EO.Pdf.PdfPage"></see> object that receives the output.</param>
      <param name="options">
            The conversion options that would override 
            <see cref="P:EO.Pdf.HtmlToPdf.Options"></see> if specified.
            </param>
      <remarks>
            Use this method to render a Web page into a specific
            <see cref="T:EO.Pdf.PdfPage"></see>. Output beyond the visible
            page area will be clipped.
            </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,System.String)">
      <summary>
            Convert a Web page into a PDF file.
            </summary>
      <param name="url">The Url of the page.</param>
      <param name="pdfFileName">The output PDF file name.</param>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,System.String,EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Convert a Web page into a PDF file.
            </summary>
      <param name="url">The Url of the page.</param>
      <param name="pdfFileName">The output PDF file name.</param>
      <param name="options">
            The conversion options that would override 
            <see cref="P:EO.Pdf.HtmlToPdf.Options"></see> if specified.
            </param>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,System.IO.Stream)">
      <summary>
            Convert a Web page into PDF and write the output to a 
            <see cref="T:System.IO.Stream"></see>.
            </summary>
      <param name="url">The Url of the page.</param>
      <param name="stream">The output stream.</param>
      <remarks>
        <para>
            Use this version to save the PDF directly to a stream
            without creating a file, which is especially useful in a
            Web application. For example, the following code saves the 
            output directly to the <b>OutputStream</b>
            of the current <b>HttpResponse</b> object.
            </para>
        <code lang="C#">
            //Convert Url to PDF and send the result directly to the client
            HtmlToPdf.ConvertUrl("http://www.google.com", Response.OutputStream);
            </code>
        <code lang="VB">
            'Convert Url to PDF and send the result directly to the client
            HtmlToPdf.ConvertUrl("http://www.google.com", Response.OutputStream)
            </code>
      </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,System.IO.Stream,EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Convert a Web page into PDF and write the output to a 
            <see cref="T:System.IO.Stream"></see>.
            </summary>
      <param name="url">The Url of the page.</param>
      <param name="stream">The output stream.</param>
      <param name="options">
            The conversion options that would override 
            <see cref="P:EO.Pdf.HtmlToPdf.Options"></see> if specified.
            </param>
      <remarks>
        <para>
            Use this version to save the PDF directly to a stream
            without creating a file, which is especially useful in a
            Web application. For example, the following code saves the 
            output directly to the <b>OutputStream</b>
            of the current <b>HttpResponse</b> object.
            </para>
        <code lang="C#">
            //Convert Url to PDF and send the result directly to the client
            HtmlToPdf.ConvertUrl("http://www.google.com", Response.OutputStream);
            </code>
        <code lang="VB">
            'Convert Url to PDF and send the result directly to the client
            HtmlToPdf.ConvertUrl("http://www.google.com", Response.OutputStream)
            </code>
      </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,EO.Pdf.PdfDocument)">
      <summary>
            Convert HTML text to PDF and write output to a <see cref="T:EO.Pdf.PdfDocument"></see> object.
            </summary>
      <param name="html">The html text.</param>
      <param name="doc">The output <see cref="T:EO.Pdf.PdfDocument"></see> object.</param>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
      <remarks>
            Note: Usually you must set <see cref="P:EO.Pdf.HtmlToPdfOptions.BaseUrl">HtmlToPdf.Options.BaseUrl</see>
            before calling this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,EO.Pdf.PdfDocument,EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Convert HTML text to PDF and write output to a <see cref="T:EO.Pdf.PdfDocument"></see> object.
            </summary>
      <param name="html">The html text.</param>
      <param name="doc">The output <see cref="T:EO.Pdf.PdfDocument"></see> object.</param>
      <param name="options">
            The conversion options that would override 
            <see cref="P:EO.Pdf.HtmlToPdf.Options"></see> if specified.
            </param>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
      <remarks>
            Note: Usually you must set <see cref="P:EO.Pdf.HtmlToPdfOptions.BaseUrl">HtmlToPdf.Options.BaseUrl</see>
            before calling this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,EO.Pdf.PdfPage)">
      <summary>
            Convert HTML text to PDF and write output to a <see cref="T:EO.Pdf.PdfPage"></see> object.
            </summary>
      <param name="html">The html text.</param>
      <param name="page">The output page.</param>
      <remarks>
        <para>
            Use this method to render HTML on a specific
            <see cref="T:EO.Pdf.PdfPage"></see>. Output beyond the visible
            page area will be clipped. 
            </para>
        <para>
            You can use this method to render multiple small
            HTML segment to the same page, or to render small 
            "add-ons" to a page, such as header and footer.
            </para>
      </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
      <remarks>
            Note: Usually you must set <see cref="P:EO.Pdf.HtmlToPdfOptions.BaseUrl">HtmlToPdf.Options.BaseUrl</see>
            before calling this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,EO.Pdf.PdfPage,EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Convert HTML text to PDF and write output to a <see cref="T:EO.Pdf.PdfPage"></see> object.
            </summary>
      <param name="html">The html text.</param>
      <param name="page">The output page.</param>
      <param name="options">
            The conversion options that would override 
            <see cref="P:EO.Pdf.HtmlToPdf.Options"></see> if specified.
            </param>
      <remarks>
        <para>
            Use this method to render HTML on a specific
            <see cref="T:EO.Pdf.PdfPage"></see>. Output beyond the visible
            page area will be clipped. 
            </para>
        <para>
            You can use this method to render multiple small
            HTML segment to the same page, or to render small 
            "add-ons" to a page, such as header and footer.
            </para>
      </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
      <remarks>
            Note: Usually you must set <see cref="P:EO.Pdf.HtmlToPdfOptions.BaseUrl">HtmlToPdf.Options.BaseUrl</see>
            before calling this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,System.String)">
      <summary>
            Convert HTML text to PDF and write output to a file.
            </summary>
      <param name="html">The html text.</param>
      <param name="pdfFileName">The output PDF file name.</param>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
      <remarks>
            Note: Usually you must set <see cref="P:EO.Pdf.HtmlToPdfOptions.BaseUrl">HtmlToPdf.Options.BaseUrl</see>
            before calling this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,System.String,EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Convert HTML text to PDF and write output to a file.
            </summary>
      <param name="html">The html text.</param>
      <param name="pdfFileName">The output PDF file name.</param>
      <param name="options">
            The conversion options that would override 
            <see cref="P:EO.Pdf.HtmlToPdf.Options"></see> if specified.
            </param>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
      <remarks>
            Note: Usually you must set <see cref="P:EO.Pdf.HtmlToPdfOptions.BaseUrl">HtmlToPdf.Options.BaseUrl</see>
            before calling this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,System.IO.Stream)">
      <summary>
            Convert HTML text to PDF and write output to a <see cref="T:System.IO.Stream"></see> object.
            </summary>
      <param name="html">The html text.</param>
      <param name="stream">The output stream.</param>
      <remarks>
        <para>
            Use this version to save the PDF directly to a stream
            without creating a file, which is especially useful in a
            Web application. For example, the following saves the 
            output directly to the <b>OutputStream</b>
            of the current <b>HttpResponse</b> object.
            </para>
        <code lang="C#">
            //Convert Url to PDF and send the result directly to the client
            HtmlToPdf.ConvertUrl("http://www.google.com", Response.OutputStream);
            </code>
        <code lang="VB">
            'Convert Url to PDF and send the result directly to the client
            HtmlToPdf.ConvertHtml("http://www.google.com", Response.OutputStream)
            </code>
      </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
      <remarks>
            Note: Usually you must set <see cref="P:EO.Pdf.HtmlToPdfOptions.BaseUrl">HtmlToPdf.Options.BaseUrl</see>
            before calling this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,System.IO.Stream,EO.Pdf.HtmlToPdfOptions)">
      <summary>
            Convert HTML text to PDF and write output to a <see cref="T:System.IO.Stream"></see> object.
            </summary>
      <param name="html">The html text.</param>
      <param name="stream">The output stream.</param>
      <param name="options">
            The conversion options that would override 
            <see cref="P:EO.Pdf.HtmlToPdf.Options"></see> if specified.
            </param>
      <remarks>
        <para>
            Use this version to save the PDF directly to a stream
            without creating a file, which is especially useful in a
            Web application. For example, the following saves the 
            output directly to the <b>OutputStream</b>
            of the current <b>HttpResponse</b> object.
            </para>
        <code lang="C#">
            //Convert Url to PDF and send the result directly to the client
            HtmlToPdf.ConvertUrl("http://www.google.com", Response.OutputStream);
            </code>
        <code lang="VB">
            'Convert Url to PDF and send the result directly to the client
            HtmlToPdf.ConvertHtml("http://www.google.com", Response.OutputStream)
            </code>
      </remarks>
      <returns>
            Returns a <see cref="T:EO.Pdf.HtmlToPdfResult"></see> object that
            contains additional information about the conversion.
            </returns>
      <remarks>
            Note: Usually you must set <see cref="P:EO.Pdf.HtmlToPdfOptions.BaseUrl">HtmlToPdf.Options.BaseUrl</see>
            before calling this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.AddTrustedCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
            Add an additional trusted certificate.
            </summary>
      <param name="cert">The new trusted certificate to add.</param>
      <remarks>
            See <a href="Pdf/HtmlToPdf/ssl.html">working with secure sites</a> for more details about
            when you need to call this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.AddLocalTrustedCertificates">
      <summary>
            All all trusted certificates in your local certificate store.
            </summary>
      <remarks>
            See <a href="Pdf/HtmlToPdf/ssl.html">working with secure sites</a> for more details about
            when you need to call this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.AddMyTrustedCertificates">
      <summary>
            All all trusted certificates in the current user's certificate store.
            </summary>
      <remarks>
            See <a href="Pdf/HtmlToPdf/ssl.html">working with secure sites</a> for more details about
            when you need to call this method.
            </remarks>
    </member>
    <member name="M:EO.Pdf.HtmlToPdf.ClearResult">
      <summary>
            Clears the <see cref="P:EO.Pdf.HtmlToPdf.Result" /> property.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfPageSizes">
      <summary>
            Contains standard page sizes in inches.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.Letter">
      <summary>
            Letter size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.Note">
      <summary>
            Note size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.Legal">
      <summary>
            Legal size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A0">
      <summary>
            A0 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A1">
      <summary>
            A1 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A2">
      <summary>
            A2 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A3">
      <summary>
            A3 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A4">
      <summary>
            A4 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A5">
      <summary>
            A5 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A6">
      <summary>
            A6 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A7">
      <summary>
            A7 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A8">
      <summary>
            A8 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A9">
      <summary>
            A9 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.A10">
      <summary>
            A10 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.B0">
      <summary>
            B0 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.B1">
      <summary>
            B1 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.B2">
      <summary>
            B2 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.B3">
      <summary>
            B3 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.B4">
      <summary>
            B4 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.B5">
      <summary>
            B5 size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.ArchA">
      <summary>
            Arch A size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.ArchB">
      <summary>
            Arch B size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.ArchC">
      <summary>
            Arch C size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.ArchD">
      <summary>
            Arch D size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.ArchE">
      <summary>
            Arch E size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.Folio">
      <summary>
            Folio size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.HalfLetter">
      <summary>
            Half letter size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.Tabloid">
      <summary>
            Tabloid size.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfPageSizes.Ledger">
      <summary>
            Ledger size.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfPageSizes.FromName(System.String)">
      <summary>
            Get page size from name.
            </summary>
      <param name="pageSizeName">
            A page size name, for example, "A4", "Letter", etc.
            </param>
      <returns>
            Returns the size of the page in inches if
            <i>pageSizeName</i> is valid, otherwise
            returns <see cref="F:System.Drawing.SizeF.Empty"></see>.
            </returns>
    </member>
    <member name="T:EO.Pdf.PdfRender">
      <summary>
            Renders PDF pages as an image.
            </summary>
      <remarks>
            The following code demonstrates how to render the first page of a give PDF file as an image:
            <code lang="C#">
            //Create a new PdfRender object
            using (PdfRender render = PdfRender.Create())
            {
                //Load the PDF file
                render.Load("test.pdf");
            
                //Render the first page as image
                System.Drawing.Image pageImage = render.Render(0);
            }
            </code><code lang="VB">
            'Create a new PdfRender object
                Using render As PdfRender = PdfRender.Create()
            	'Load the PDF file
            	render.Load("test.pdf")
            
            	'Render the first page as image
            	Dim pageImage As System.Drawing.Image = render.Render(0)
                End Using
            </code></remarks>
    </member>
    <member name="M:EO.Pdf.PdfRender.Dispose">
      <summary>
            Release all associated resources for this <see cref="T:EO.Pdf.PdfRender" /> object.
            </summary>
      <remarks>
            Call this method as soon as you no longer need the <see cref="T:EO.Pdf.PdfRender"></see> object.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PdfRender.Create">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfRender" /> object.
            </summary>
      <remarks>
        <see cref="T:EO.Pdf.PdfRender">
        </see> is an expensive object. Call <see cref="M:EO.Pdf.PdfRender.Dispose"></see>
            to dispose the returned <see cref="T:EO.Pdf.PdfRender"></see> object as soon as the object is
            no longer needed.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PdfRender.Load(EO.Pdf.PdfDocument)">
      <summary>
            Loads a <see cref="T:EO.Pdf.PdfDocument" /> object.
            </summary>
      <param name="doc">The document to be loaded.</param>
    </member>
    <member name="M:EO.Pdf.PdfRender.Load(System.String)">
      <summary>
            Loads a PDF file.
            </summary>
      <param name="fileName">The full path of the file to be loaded.</param>
    </member>
    <member name="M:EO.Pdf.PdfRender.Load(System.Byte[])">
      <summary>
            Loads a PDF file in binary form.
            </summary>
      <param name="pdfData">The binary PDF file data.</param>
    </member>
    <member name="M:EO.Pdf.PdfRender.Load(System.IO.Stream)">
      <summary>
            Loads a PDF file from a <see cref="T:System.IO.Stream" /> object.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that contains the PDF data.
            The current position of the Stream must point to the begining of the PDF file.
            </param>
    </member>
    <member name="M:EO.Pdf.PdfRender.Render(System.Int32,System.Int32)">
      <summary>
            Renders a page to image.
            </summary>
      <param name="pageIndex">The index of the page to be rendered.</param>
      <param name="dpi">Optional DPI value.</param>
    </member>
    <member name="T:EO.Pdf.PdfViewerErrorCode">
      <summary>
            Specifies error code uses by <see cref="T:EO.Pdf.PdfViewerException" /></summary>
    </member>
    <member name="F:EO.Pdf.PdfViewerErrorCode.OK">
      <summary>
            No errors.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfViewerErrorCode.NotReady">
      <summary>
            The PdfViewer is not ready for the operation requested.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfViewerErrorCode.WebViewError">
      <summary>
            An error has occurred on the underlying <see cref="T:EO.WebBrowser.WebView" />.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfViewerErrorCode.InvalidPDFFile">
      <summary>
            The resource to be loaded is not a PDF file.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfViewerErrorCode.IsEmpty">
      <summary>
            The PdfViewer is empty.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfViewerException">
      <summary>
            The exception that is thrown when an error occurs with a PdfViewer.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerException.ViewerErrorCode">
      <summary>
            Gets the PdfViewer error code.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfViewerException.WebViewErrorCode">
      <summary>
            Gets the underlying <see cref="T:EO.WebBrowser.WebView" /> error code.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfStandard">
      <summary>
            Represents PDF file standard.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfStandard.None">
      <summary>
            Standard not set.
            </summary>
    </member>
    <member name="F:EO.Pdf.PdfStandard.PDF_A">
      <summary>
            PDF/A standard.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfDocument">
      <summary>
            Represents a PDF document.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfDocument.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfDocument"></see> class.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfDocument.#ctor(System.String)">
      <summary>
            Load a PDF file from the specified file name.
            </summary>
      <param name="fileName">The PDF file name.</param>
    </member>
    <member name="M:EO.Pdf.PdfDocument.#ctor(System.IO.Stream)">
      <summary>
            Load a PDF file from the specified stream.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream"></see> object from which to load the PDF file.</param>
    </member>
    <member name="M:EO.Pdf.PdfDocument.#ctor(System.String,EO.Pdf.PdfDocumentSecurity)">
      <summary>
            Loads a secured PDF file from the specified file name.
            </summary>
      <param name="fileName">The PDF file name.</param>
      <param name="security">Security parameters such as access password.</param>
    </member>
    <member name="M:EO.Pdf.PdfDocument.#ctor(System.String,System.String)">
      <summary>
            Loads a secured PDF file from the specified file name.
            </summary>
      <param name="fileName">The PDF file name.</param>
      <param name="accessPassword">Access password for the PDF file.</param>
    </member>
    <member name="M:EO.Pdf.PdfDocument.#ctor(System.IO.Stream,EO.Pdf.PdfDocumentSecurity)">
      <summary>
            Loads a secured PDF file from the specified stream.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream"></see> object from which to load the PDF file.</param>
      <param name="security">Security parameters such as access password.</param>
    </member>
    <member name="M:EO.Pdf.PdfDocument.#ctor(System.IO.Stream,System.String)">
      <summary>
            Loads a secured PDF file from the specified stream.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream"></see> object from which to load the PDF file.</param>
      <param name="accessPassword">Access password for the PDF file.</param>
    </member>
    <member name="P:EO.Pdf.PdfDocument.Pages">
      <summary>
            Gets the page collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.Info">
      <summary>
            Gets the <see cref="T:EO.Pdf.PdfDocInfo"></see> object for this
            document.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.ViewerPreference">
      <summary>
            Gets the <see cref="T:EO.Pdf.PdfViewerPreference"></see> for this
            object.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.Bookmarks">
      <summary>
            Gets the root bookmark collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.Attachments">
      <summary>
            Gets the attachment collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.PageMode">
      <summary>
            Gets or sets a value specifying how the document should be displayed when opened.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.Language">
      <summary>
            Gets or sets the natural language of the document.
            </summary>
      <remarks>
            The following code sets the natural language of the document to "en-US":
            <code lang="C#">
            doc.Language = "en-US";
            </code><code lang="VB">
            doc.Language = "en-US"
            </code></remarks>
    </member>
    <member name="P:EO.Pdf.PdfDocument.Security">
      <summary>
            Gets an <see cref="T:EO.Pdf.PdfDocumentSecurity"></see> through
            which you can configure document security settings.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.Fields">
      <summary>
            Gets the document's form fields collection.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.Standard">
      <summary>
            Gets or sets the PDF file standard.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.EmbedFont">
      <summary>
            Gets or sets a value indicating whether all font data
            should be automatically embedded in the PDF file.
            </summary>
      <remarks>
        <para>
            Embed all font data in the PDF file allows the PDF file
            to be correctly displayed even if the font used is not
            installed on the target system. The default value is <b>true</b>.
            Setting this value to <b>false</b> to omit most commonly
            used font data from the PDF file.
            </para>
        <para>
            Font data are always embedded when <see cref="P:EO.Pdf.PdfDocument.Standard"></see> is set to <see cref="F:EO.Pdf.PdfStandard.PDF_A"></see>.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Pdf.PdfDocument.Portfolio">
      <summary>
            Gets the <see cref="T:EO.Pdf.PdfPortfolio" /> object which contains PDF portfolio related settings.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfDocument.OpenAction">
      <summary>
            Gets or sets the PDF action when the document is opened.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Save(System.String)">
      <summary>
            Save the document to a file.
            </summary>
      <param name="fileName">A string that contains the name of the file.</param>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Save(System.IO.Stream)">
      <summary>
            Save the document to a <see cref="T:System.IO.Stream"></see>.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream"></see> object to which the file should be saved.</param>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Clone">
      <summary>
            Creates a new <see cref="T:EO.Pdf.PdfDocument"></see> object that is
            a duplicate of the current object.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Clone(System.Int32,System.Int32)">
      <summary>
            Creates a new <see cref="T:EO.Pdf.PdfDocument"></see> object that is
            a duplicate of the current object but only with pages in
            the specific range.
            </summary>
      <param name="fromPage">Zero based index for the first page to be cloned.</param>
      <param name="pageCount">Number of pages to be cloned, use -1 to clone all pages till the last page.</param>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Split(System.Int32[])">
      <summary>
            Splits the current <see cref="T:EO.Pdf.PdfDocument"></see> into
            multiple <see cref="T:EO.Pdf.PdfDocument"></see> objects.
            </summary>
      <param name="pageIndexes">
            The indexes of the page where split occurs. See remark
            section for more details.
            </param>
      <returns>An array of <see cref="T:EO.Pdf.PdfDocument"></see> objects.</returns>
      <remarks>
        <para>
            This function splits a <see cref="T:EO.Pdf.PdfDocument"></see> at the
            specified position. For example, the following code splits
            the current <see cref="T:EO.Pdf.PdfDocument"></see> into two
            <see cref="T:EO.Pdf.PdfDocument"></see> objects: the first one
            contains the first 2 pages and the second contains all
            the remaining pages:
            </para>
        <code lang="C#">
            //Split doc from the third page
            PdfDocument[] docs = doc.Split(2);
            </code>
        <code lang="VB">
            'Split doc from the third page
            Dim docs As PdfDocument() = doc.Split(2)
            </code>
        <para>
            The following code splits the current <see cref="T:EO.Pdf.PdfDocument"></see>
            into three <see cref="T:EO.Pdf.PdfDocument"></see> objects: the first
            one contains the first 2 pages, the second one contains the
            third page and the third one contains all the remaining pages.
            </para>
        <code lang="C#">
            //Split doc at the third page and the fourth page
            PdfDocument[] docs = doc.Split(2, 3);
            </code>
        <code lang="VB">
            '//Split doc at the third page and the fourth page
            Dim docs As PdfDocument() = doc.Split(2, 3)
            </code>
        <para>
            Each "child" <see cref="T:EO.Pdf.PdfDocument"></see> must contain
            at least one page, otherwise an error will be thrown. For
            example, the following code will throw an error because
            the first "child" <see cref="T:EO.Pdf.PdfDocument"></see> would have
            zero pages.
            </para>
        <code lang="C#">
            //This code will throw an error because the first child
            //PdfDocument would have zero pages
            PdfDocument[] docs = doc.Split(0);
            </code>
        <code lang="VB">
            'This code will throw an error because the first child
            'PdfDocument would have zero pages
            Dim docs As PdfDocument() = doc.Split(0)
            </code>
      </remarks>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Merge(EO.Pdf.PdfDocument[])">
      <summary>
            Merges multiple <see cref="T:EO.Pdf.PdfDocument"></see> objects into
            a single <see cref="T:EO.Pdf.PdfDocument"></see> object.
            </summary>
      <param name="docs">A list of <see cref="T:EO.Pdf.PdfDocument"></see>
            objects to be merged.
            </param>
      <returns>
            Returns a single <see cref="T:EO.Pdf.PdfDocument"></see> that contains
            all pages from each of the supplied document.
            </returns>
      <remarks>
        <para>
            If any of the source <see cref="T:EO.Pdf.PdfDocument"></see> 
            has bookmarks, the bookmarks will be merged into the result
            document. By default, this function appends all the root
            bookmark items into the result document's root bookmark item
            list. For example, if the first document has 3 root items and
            the second document has 2 root items while merging two 
            documents, then the result document will have 5 root items.
            </para>
        <para>
            This behavior can be changed by using <i>placeholder</i>
            bookmark items. A placeholder bookmark item is a special
            bookmark item that represents all bookmark items for a given
            document. Follow these steps to use a placeholder item:
            </para>
        <list type="number">
          <item>
            <para>
                Create a placeholder bookmark item by calling
                <see cref="M:EO.Pdf.PdfBookmark.CreatePlaceHolder(EO.Pdf.PdfDocument)">PdfBookmark.CreatePlaceHolder</see>,
                for example:
                </para>
            <code lang="C#">
                //Creates a placeholder representing all bookmark
                //items for "doc2"
                PdfBookmark placeHolderForDoc2 = PdfBookmark.CreatePlaceHolder(doc2);
                </code>
            <code lang="VB">
                'Creates a placeholder representing all bookmark
                'items for "doc2"
                Dim placeHolderForDoc2 As PdfBookmark = PdfBookmark.CreatePlaceHolder(doc2)
                </code>
          </item>
          <item>
            <para>
                Insert the placeholder item into the first document's
                bookmark tree at where you wish the target document's
                bookmarks to appear. For example, the following code
                instructs all top level bookmark items for "doc2" to
                appear under the first top level bookmark item of doc1.
                </para>
            <code lang="C#">
                //Insert all bookmarks in doc2 as child nodes of the
                //first bookmark of doc1
                doc1.Bookmarks[0].ChildNodes.Add(placeHolderForDoc2);
                </code>
            <code lang="VB">
                'Insert all bookmarks in doc2 as child nodes of the
                'first bookmark of doc1
                doc1.Bookmarks(0).ChildNodes.Add(placeHolderForDoc2)
                </code>
          </item>
        </list>
        <para>
            You can use placeholder bookmark items any of the source
            documents that points to any other source documents. However
            they cannot form a circle. For example, you cannot have
            doc2's top level items inserted as child items of doc1 and
            have doc1's top level items inserted as child items of doc2
            at the same time.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Merge(System.Boolean,EO.Pdf.HtmlToPdfResult[])">
      <summary>
            Merges conversion results from previous 
            <see cref="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,System.String)">HtmlToPdf.ConvertUrl</see> or
            <see cref="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,System.String)">HtmlToPdf.ConvertHtml</see>
            results.
            </summary>
      <param name="fixupLinks">Whether to automatically fix up the links between the <see cef="HtmlToPdfResult" />
            objects to be merged. See remark section for details.</param>
      <param name="htmlToPdfResults">Two or more <see cref="T:EO.Pdf.HtmlToPdfResult" /> objects.</param>
      <remarks>
        <para>
            When using this method to merge multiple <see cref="T:EO.Pdf.PdfDocument" /> objects,
            it also updates the corresponding <see cref="T:EO.Pdf.HtmlDocument" /> objects. The <see cref="T:EO.Pdf.HtmlElement" />
            objects in the <see cref="T:EO.Pdf.HtmlDocument" /> object previously point to separate
            <see cref="T:EO.Pdf.PdfDocument" /> objects. After the merge, they all point to locations
            inside the merged <see cref="T:EO.Pdf.PdfDocument" />.
            </para>
        <para>
        </para>
      </remarks>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Merge(EO.Pdf.HtmlToPdfResult[])">
      <summary>
            Merges conversion results from previous 
            <see cref="M:EO.Pdf.HtmlToPdf.ConvertUrl(System.String,System.String)">HtmlToPdf.ConvertUrl</see> or
            <see cref="M:EO.Pdf.HtmlToPdf.ConvertHtml(System.String,System.String)">HtmlToPdf.ConvertHtml</see>
            results.
            </summary>
      <param name="htmlToPdfResults">Two or more <see cref="T:EO.Pdf.HtmlToPdfResult" /> objects.</param>
      <remarks>
            This method calls <see cref="M:EO.Pdf.PdfDocument.Merge(System.Boolean,EO.Pdf.HtmlToPdfResult[])" /> with <i>fixupLinks</i>
            parameter set to <b>true</b>.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Merge(System.String,System.String,System.Int32)">
      <summary>
            Merges two PDF files.
            </summary>
      <param name="fileName1">Full path of the first PDF file.</param>
      <param name="fileName2">Full path of the second PDF file.</param>
      <param name="bookmarkLevel">
            Specify on which level the second file's bookmarks should
            be inserted into. See remark section for more details.
            </param>
      <remarks>
        <para>
            This function appends the second PDF file to the end
            of the first PDF file and does not perform a "deep merge".
            thus can result in bigger file but uses less memory and 
            is much faster.
            </para>
        <para>
            If either of the source file has bookmarks, then they
            will be merged into the final file. In case both file
            has bookmarks, it may be necessary to insert the second
            file's bookmarks as child bookmarks of a bookmark item
            in the first file. For example, consider the following 
            bookmark structure:
            </para>
        <para>
            The first file's bookmarks:
            </para>
        <code>
            Chapter 1 - Overview
                Introduction
                Terms and definitions
            Chapter 2 - Syntax
            </code>
        <para>
            The second file's bookmarks:
            </para>
        <code>
            File Structure
            Object Types
            Members
            </code>
        <para>
            If the desired final bookmarks is:
            </para>
        <code>
            Chapter 1 - Overview
                Introduction
                Terms and definitions
            Chapter 2 - Syntax
                File Structure
                Object Types
                Members
            </code>
        <para>
            Then <i>bookmarkLevel</i> should be set to 1,
            which indicating the second file's bookmarks will be on
            the second level (0 based). 
            </para>
        <para>
            If <i>bookmarkLevel</i>
            is set to 0, then all bookmarks for the second file will
            be directly appended after "Chapter 2":
            </para>
        <code>
            Chapter 1 - Overview
                Introduction
                Terms and definitions
            Chapter 2 - Syntax
            File Structure
            Object Types
            Members
            </code>
      </remarks>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Merge(System.String,System.String)">
      <summary>
            Merges two PDF files.
            </summary>
      <param name="fileName1">Full path of the first PDF file.</param>
      <param name="fileName2">Full path of the second PDF file.</param>
      <remarks>
            This function calls <see cref="M:EO.Pdf.PdfDocument.Merge(System.String,System.String,System.Int32)"></see>
            with <i>bookmarkLevel</i> set to 0.
            </remarks>
    </member>
    <member name="M:EO.Pdf.PdfDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings)">
      <summary>
            Print the PDF file.
            </summary>
      <param name="printerSettings">Set the default printer settings. Pass <b>null</b> to display the print dialog to ask user for the settings.</param>
      <param name="pageSettings">Set the default page settings. Pass <b>null</b> to use <see cref="P:System.Drawing.Printing.PrinterSettings.DefaultPageSettings" />
            of the <i>printerSettings</i> argument.
            </param>
      <remarks>
            If a valid <i>printerSettings</i> value is supplied, then the print dialog will not be shown.
            The following code demonstrates how to "silent print" with the default printer:
            <code lang="cs">
            doc1.Print(EO.WebBrowser.WebView.GetDefaultPrinterSettings());
            </code><code lang="vb">
            doc1.Print(EO.WebBrowser.WebView.GetDefaultPrinterSettings())
            </code></remarks>
    </member>
    <member name="T:EO.Pdf.PdfPageEventArgs">
      <summary>
            Provide data to events associated to a <see cref="T:EO.Pdf.PdfPage"></see>.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfPageEventArgs.#ctor(EO.Pdf.PdfPage)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfPageEventArgs"></see> object.
            </summary>
      <param name="page">The <see cref="T:EO.Pdf.PdfPage"></see> object.</param>
    </member>
    <member name="P:EO.Pdf.PdfPageEventArgs.Page">
      <summary>
            Gets the <see cref="T:EO.Pdf.PdfPage"></see> object associated to this event.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfPageEventHandler">
      <summary>
            Represents the method that will handle events associated to
            a <see cref="T:EO.Pdf.PdfPage"></see>.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfDocumentEventArgs">
      <summary>
            Provides data to events associated to a <see cref="T:EO.Pdf.PdfDocument" /> object.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfDocumentEventArgs.#ctor(EO.Pdf.PdfDocument)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Pdf.PdfDocumentEventArgs" /> object.
            </summary>
      <param name="document">The <see cref="T:EO.Pdf.PdfDocument" /> object.</param>
    </member>
    <member name="P:EO.Pdf.PdfDocumentEventArgs.Document">
      <summary>
            Gets or sets the <see cref="T:EO.Pdf.PdfDocument" /> object.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfDocumentEventHandler">
      <summary>
            Represents the method that will handle events associated to
            a <see cref="T:EO.Pdf.PdfDocument" /> object.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfObject">
      <summary>
            Base class for an object that is directly associated to a PDF file.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfObject.Document">
      <summary>
            Gets the associated <see cref="T:EO.Pdf.PdfDocument"></see> object.
            </summary>
    </member>
    <member name="T:EO.Pdf.PdfPage">
      <summary>
            Represents a page in the PDF file.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfPage.MediaBox">
      <summary>
            Gets or sets the page's media box in user space unit.
            </summary>
      <remarks>
            The media box defines the boundaries of the physical 
            medium on which the page is to be printed. It usually
            defines the entire page area, but may also include
            extended area surrounding the finished page for 
            bleed, printing marks, or other such purposes.
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfPage.CropBox">
      <summary>
            Gets or sets the page's crop box in user space unit.
            </summary>
      <remarks>
            The crop box defines the boundaries of the visible 
            area of the page. 
            </remarks>
    </member>
    <member name="P:EO.Pdf.PdfPage.Size">
      <summary>
            Gets or sets the page size in inches.
            </summary>
    </member>
    <member name="P:EO.Pdf.PdfPage.Rotation">
      <summary>
            Gets the rotation angle of the page.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfPage.Transform(EO.Pdf.Drawing.PdfMatrix)">
      <summary>
            Transform the page contents by the 
            specific <see cref="T:EO.Pdf.Drawing.PdfMatrix"></see>.
            </summary>
      <param name="matrix">The transformation matrix.</param>
      <remarks>
        <para>
            The transformation can scale, translate, rotate, or skew page contents.
            For example, the following code rotates the page contents
            by 30 degrees clockwise:
            </para>
        <para>
          <code lang="C#">
            //Rotate page contents by 30 degrees clockwise
            PdfMatrix matrix = new PdfMatrix();
            matrix.Rotate(-30);
            pdfPage.Transform(matrix);
            </code>
          <code lang="VB">
            'Rotate page contents by 30 degrees clockwise
            Dim matrix As New PdfMatrix()
            matrix.Rotate(-30)
            pdfPage.Transform(matrix)
            </code>
        </para>
        <para>
            Please note:
            </para>
        <list type="number">
          <item>
            <para>
                    PDF page Y coordinates is from bottom to top. Thus
                    you must use a negative offset Y value to move the
                    contents downwards. For example, the following matrix
                    moves the page contents downwards for one inch:
                    </para>
            <code lang="C#">
                    //Matrix to move contents downwards for one inch
                    matrix.Translate(0, -72);
                    </code>
            <code lang="VB">
                    'Matrix to move contents downwards for one inch
                    matrix.Translate(0, -72)
                    </code>
            <para>
                    The default unit is 1/72 inch.
                    </para>
          </item>
          <item>
            <para>
                    Negative degrees rotate contents clockwise, positive
                    degrees rotate contents counter clockwise. For example,
                    the following matrix rotates the page contents 30
                    degrees clockwise:
                    </para>
            <code lang="C#">
                    //Matrix to rotate the page contents 30 degrees clockwise
                    matrix.Rotate(-30);
                    </code>
            <code lang="VB">
                    'Matrix to rotate the page contents 30 degrees clockwise
                    matrix.Rotate(-30)
                    </code>
            <para>
                    The coordinate origin is the bottom left corner of the page.
                    </para>
          </item>
        </list>
        <para>
            The following code rotate the page 180 degrees:
            </para>
        <code lang="C#">
            PdfMatrix matrix = new PdfMatrix();
            matrix.Rotate(180);
            matrix.Translate(-612, -792);
            pdfPage.Transform(matrix);
            </code>
        <code lang="VB">
            Dim matrix As New PdfMatrix()
            matrix.Rotate(180)
            matrix.Translate(-612, -792)
            pdfPage.Transform(matrix)
            </code>
        <para>
            Note that you must also call <see cref="M:EO.Pdf.Drawing.PdfMatrix.Translate(System.Single,System.Single)" /> to translate the matrix
            sicne the coordinate origin is at the bottom left corner of the page. The exact translate
            amount depends on the size of the page. The above value is for page size 8.5 inch by
            11 inch (612 = 8.5 * 72, 792 = 11 * 72).
            </para>
      </remarks>
    </member>
    <member name="T:EO.Pdf.PdfPageCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Pdf.PdfPage"></see> objects.
            </summary>
    </member>
    <member name="M:EO.Pdf.PdfPageCollection.Add">
      <summary>
            Adds a new page.
            </summary>
      <returns>The newly added page.</returns>
    </member>
    <member name="T:EO.Pdf.Runtime">
      <summary>
            Class used to initialize runtime information.
            </summary>
    </member>
    <member name="P:EO.Pdf.Runtime.TempFilePath">
      <summary>
            Gets or sets temporary file path.
            </summary>
      <remarks>
            EO.Pdf may need to create temp files while converting large HTML files.
            Use this property to get or set the temp file directory.
            </remarks>
    </member>
    <member name="M:EO.Pdf.Runtime.AddLicense(System.String)">
      <summary>
            Add the license information.
            </summary>
      <param name="license">License string.</param>
    </member>
    <member name="T:EO.Base.BaseObject">
      <summary>
            This class is offers internal low-level services to derived
            class and is the base class of most classes in the EO.Pdf 
            Library.
            </summary>
    </member>
    <member name="T:EO.Base.BaseObjectCollection`1">
      <summary>
            Represents a collection of <see cref="T:EO.Base.BaseObject">BaseObjects</see>.
            </summary>
      <typeparam name="T">The actual <see cref="T:EO.Base.BaseObject"></see> type.</typeparam>
    </member>
    <member name="P:EO.Base.BaseObjectCollection`1.Owner">
      <summary>
            Gets the owner <see cref="T:EO.Base.BaseObject"></see>.
            </summary>
    </member>
    <member name="M:EO.Base.BaseObjectCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds the elements of the specified list to the end of this list.
            </summary>
      <param name="items">List of items to be added.</param>
    </member>
    <member name="P:EO.Base.BaseObjectCollection`1.Count">
      <summary>
            Gets the number of items in the collection.
            </summary>
    </member>
    <member name="T:EO.Base.BaseObjectCollectionWrapper`2">
      <summary>
            Provides a convenient wrapper around a <see cref="T:EO.Base.BaseObjectCollection`1"></see>
            of objects of a base classes but actually only stores objects of a certain
            derived class.
            </summary>
      <typeparam name="TWrapper">The derived class.</typeparam>
      <typeparam name="TItem">The base class.</typeparam>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.#ctor(EO.Base.BaseObjectCollection{`1})">
      <summary>
            Creates a new instance of the <see cref="T:EO.Base.BaseObjectCollectionWrapper`2"></see> class.
            </summary>
      <param name="inner">The inner <see cref="T:EO.Base.BaseObjectCollection`1"></see>.</param>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.IndexOf(`0)">
      <summary>
            Returns the zero-based index of the first occurrence <i>item</i>.
            </summary>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.Insert(System.Int32,`0)">
      <summary>
            Inserts an item into the collection at the specified index.
            </summary>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.RemoveAt(System.Int32)">
      <summary>
            Removes an item at the specified index.
            </summary>
    </member>
    <member name="P:EO.Base.BaseObjectCollectionWrapper`2.Item(System.Int32)">
      <summary>
            Gets or sets an item at the specified index.
            </summary>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.Add(`0)">
      <summary>
            Adds a new item to the collection.
            </summary>
      <param name="item">The item to be added.</param>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.Clear">
      <summary>
            Clears the collection.
            </summary>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.Contains(`0)">
      <summary>
            Determines whether the collection contains the specified item.
            </summary>
      <param name="item">The item to be located.</param>
      <returns>
        <b>true</b> if the item is found in the collection.</returns>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
      <param name="array">The target array.</param>
      <param name="arrayIndex">The index in the array at which to begin copying.</param>
    </member>
    <member name="P:EO.Base.BaseObjectCollectionWrapper`2.Count">
      <summary>
            Gets the total number of items in the collection.
            </summary>
    </member>
    <member name="P:EO.Base.BaseObjectCollectionWrapper`2.IsReadOnly">
      <summary>
            Returns whether the collection is read-only.
            </summary>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific item from the collection.
            </summary>
      <param name="item">The item to be removed.</param>
      <returns>
        <b>true</b> if <i>item</i> successfully removed; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:EO.Base.BaseObjectCollectionWrapper`2.GetEnumerator">
      <summary>
            Returns an enumerator for the entire collection.
            </summary>
    </member>
  </members>
</doc>